{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["cs","introduct","note","个人博客：https://coer.m","仓库：https://github.com/millione/notes/tree/mast","先给出干货，个人总结出的一些常用算法：板子","在此系统整理下自己杂乱无章的笔记，希望能够自成体系，以供日后温习。","在线阅读：https://coer.me/notes/","相关链接"],"01-data-structrue/basic/01-array/array.html":["!=","\"curly\");","\"moe\",","%d","%d\\n\",","(","(arr[i]","(cnt","(e[])new","(exclusive)","(for","(i","(inclusive)","(insert","(int","(num","(optional)","(t[])arraylist.toarray(new","(thi",")","*","*/","+","++;",",","/*","//","0","0)","0;","1","1).","1.","1.5","1.6","10.","1089.","1:","1;","1]","2.","2:","3.","4.","5.","6.","7.","8.","9.",":",";","=","==",">",">=","@lc","@overrid","[1,0,0,2,3,0,0,4]","[1,0,2,3,0,4,5,0]","[1,2,3]","[1089]","a)","a,","a.length","a2","a2)","abov","ad","add(0,","add(int","add(size,","addal","addall(collect","addfirst(","addlast(","alloc","anyth","app=leetcod","arr","arr)","arr.length;","array","array()","array(int","array,","array.","array.)","array:","array;","arrayindexoutofboundsexcept","arraylist","arrays.aslist(\"larry\",","arrays.sort(new","arraystoreexcept","aslist","aslist(t...","back","beyond","big","binarysearch","binarysearch(object[]","boolean","by:","c","c)","call","capac","capacity)","chang","class","classcastexcept","clear","clear()","clone","clone()","cnt","cnt++;","code:","code=start","collect","compar","comparator()","compare(t","compon","contain","contains(","contains(object","contract","copi","copied,","copyofrang","copyofrange(t[]","data","data.length));","data.length;","data;","data[i","data[i];","data[index]","data[index];","defin","description:","determin","discuss","duplic","duplicatezeros(int[]","e","e);","e){","e;","e[]","each","element","elements'","endpoint","enough;","equal","equals(object[]","exampl","example,","exclusive.","explanation:","failed.","fill","fill(object[]","final","first","fix","for(int","found","found.","from,","fromindex","fromindex,","function,","function.","get(int","getcapacity()","getsize()","given","greater","guarante","high","id=1089","if(index","illegal.\");","illegalargumentexcept","illegalargumentexception(\"add","illegalargumentexception(\"get","illegalargumentexception(\"remov","illegalargumentexception(\"set","inclus","index","index){","index,","indexof","indexof(object","indic","initi","input","input:","insert","instanc","int","integers)","integers,","interfac","isempty()","jdk11","key","key)","key,","key.","lang=java","last","lastindexof","lastindexof(object","leetcod","length","less","lie","list","list,","low","modif","modifi","mutual","n","natur","new","note","note:","null","nullpointerexcept","num","o","o(1)。","o(1)，只有在个别时刻才会退化为","o(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。","o(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近","o)","o1,","o1.compareto(o2);","o2)","object","object[]","object[capacity];","obtain","occurr","on","order","origin","original,","original.length","otherwise,","output:","outsid","pad","parameters:","place,","point","point)","presenc","privat","public","purpose.","rang","re","remain","remov","remove(int","removeal","removeall(collect","represent","requir","res.append('[');","res.append(string.format(\"array:","result","ret","retain","retainal","retainall(collect","return","returns:","right.","runtim","same","search","set(int","shift","since:","size","size)","size,","size;","solut","sort","sort(object[]","sort(t[]","specifi","static","stoog","store","stored,","string","stringbuild","stringbuilder();","sublist","sublist(int","t","t[0]);","t[]","test","testedss","this(10);","throw","throws:","to)","to:","toarray","toarray(t[]","toindex","toindex)","tostr","tostring()","tostring(object[]","true","truncat","two","type","us","used.","val","val)","valu","view","violat","void","whose","within","written.","zero","zero,","{","|","}","});","从数组中删除index位置的元素,","优化：如果数组中存储的数据没有任何规律，数组只是被当作一个存储数据的集合，如果将某个数据插入到第k个位置，则可以将第k位的数据搬移到数组元素的最后，把新元素直接放入到第k个位置。","优化：每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正地删除操作，这样就大大减少了删除操作导致的数据搬移。","修改index索引位置的元素为","修改元素","删除元素","动态数组：均摊时间复杂度一般都等于最好情况时间复杂度。因为在大部分情况下，入栈操作的时间复杂度","原地操作，从后先前。","参考","向所有元素后添加一个新元素","在index索引的位置插入一个新元素","在所有元素前添加一个新元素","基本构造","增加元素","如果你了解jvm，你会发现这就是jvm标记清除垃圾回收算法的核心思想。","实现","数组","数组(array)是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。","数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为","无参数的构造函数，默认数组的容量capacity=10","构造函数，传入数组的容量capacity构造array","查找数组中是否有元素e","查询元素","获取index索引位置的元素","获取数组中的元素个数","获取数组的容量","返回删除的元素","返回数组是否为空","都是","题目"],"01-data-structrue/basic/02-linkedlist/linkedlist.html":["!=","\"","\");","&&","(0","(a","(cur","(head","(i.e.","(index","(int","(pre","(which","*","*/","+","/*","/**","//","0","0){","02","0;","1","1,","1.","10.","11.","141.","142.","1:","1:55","1;","2","2);","2.","2000","2020","234.","25","2:","3","3.","3:","4.","4],","5.","6.","7.","707.","8.","9.",":",";","=","==",">\");",">1",">2",">3","@author","@creat","@lc","@overrid","[\"mylinkedlist\",\"addathead\",\"addattail\",\"addatindex\",\"get\",\"deleteatindex\",\"get\"]","[1,2],","[141]","[142]","[1],","[234]","[3,2,0,","[707]","[[],[1],[3],[1,2],[1],[1],[1]]","[null,null,null,null,2,null,3]","add","add(int","addathead(val)","addathead,","addatindex","addatindex(index,","addattail(val)","addattail,","addnode(doublelinkednod","addnode(node);","app=leetcod","append","arr){","arr.length","arr[0];","assum","attribut","attributes:","based)个位置的元素","based)个位置的元素为","based)位置添加新的元素","based)位置的元素,","becom","befor","begins.","boolean","built","by:","call","choos","class","class:","code:","code=end","code=start","connect","constant)","constraints:","cur","cur)","cur.next","cur.next.next;","cur.next;","current","cycl","cycle,","data","definit","delet","deleteatindex(index)","deleteatindex.","dequ","deque.offerfirst(e)))","deque.offerlast(e)))","description:","design","detectcycle(listnod","determin","discuss","doublelinkednod","doublelinkednode{","doubli","dummi","dummy.next;","dummy;","dummyhead","dummyhead.next;","dummyhead;","e","e)","e){","e,","e.tostring();","e;","element","empti","empty\");","end","equal","exampl","example:","explanation:","extra","failed.","fals","false;","fast","fast.next","fast.next.next;","first","follow","for(int","front","function","get(index)","get(int","get,","getsize(){","given","greater","hascycle(listnod","head","head)","head){","head,","head.next","head.next.next;","head.next;","head.post","head.post.pr","head.post;","head;","here.","https://coer.com","id=141","id=142","id=234","id=707","if(arr","if(fast","if(head.v","if(index","ii","illeg","illegal.\");","illegalargumentexception(\"add","illegalargumentexception(\"arr","illegalargumentexception(\"get","illegalargumentexception(\"remov","illegalargumentexception(\"set","implement","index","index)","index){","index,","index.\");","indexed)","indexed.","indic","initi","input:","insert","inserted.","insertion,","int","integ","interfac","invalid,","isempty(){","ispalindrome(listnod","it.","jdk11","key;","lang=java","last","leetcod","length","length,","library.","link","linkedlist","linkedlist(){","linkedlist.addathead(1);","linkedlist.addatindex(1,","linkedlist.addattail(3);","linkedlist.deleteatindex(1);","linkedlist.get(1);","list","list)","list,","list.","listnod","listnode(int","listnode(int[]","liuj","made","memory?","modifi","more","movenode(doublelinkednod","mylinkedlist","mylinkedlist()","mylinkedlist();","need","new","next","next)","next){","next.","next;","node","node(","node()","node();","node(){","node(int","node)","node,","node.","node.post","node.post.pr","node.post;","node.pr","node.pre.post","node.pre;","node;","node{","nosuchelementexcept","note:","now","null","null)","null);","null){","null.","null;","o(1)","o(n)","offer","offer(","offerfirst","offerfirst(","offerlast","offerlast(","on","output:","palindrom","palindrome.","parameters:","peek","peek()","peekfirst","peekfirst()","peeklast","peeklast()","pleas","pm","po","pointer/refer","poll","poll()","pollfirst","pollfirst()","polllast","polllast()","pop","pop()","posit","post;","pre","pre.next;","pre;","prev","previou","privat","public","push","push(","queue","queue.offer(e)))","re","rehead","rehead.next;","rehead.val){","remove(int","removelastnode()","removenode(doublelinkednod","removenode(node);","repres","res.append(\"null\");","res.append(cur","res.tostring();","return","return;","returns:","reverse(listnod","reverse(slow);","second","set(int","singli","size","size)","size;","slow","slow.next;","solut","solv","space?","specifi","stack","string","stringbuild","stringbuilder();","structur","tail","tail.pre;","tail;","temp","temp;","th","this(","this(e,","this(null,","this(val,","this.","this.next","this.val","this;","throw","throws:","time","to.","top","tostring(){","true","true;","two","up:","us","val","val)","val,","val;","valid.","valu","value;","void","want","while(cur","while(fast","while(head","while(rehead","without","x)","x;","{","|","||","}","不要吝啬使用指针记录。","从链表中删除index(0","代码逻辑在处理头结点和尾结点的时候，是否能正常工作？","修改元素","修改链表的第index(0","先给出刷题调试用链表结构：","删除元素","单链表实现","参考","双链表实现","在链表的index(0","基本构造","增加元素","如果链表为空时，代码是否能正常工作？","如果链表只包含一个结点时，代码是否能正常工作？","如果链表只包含两个结点时，代码是否能正常工作？","我们可以用以下几个边界条件来检查链表代码是否正确：","查询元素","获取链表中的元素个数","获得链表的第index(0","返回删除的元素","返回链表是否为空","链表","链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。","题目"],"01-data-structrue/basic/03-stack-queue/stack-queue.html":["(!stack.isempty())","(!temp.isempty())","(a","(doubl","(for","(int","(which","(x","*","*/","/*","/**","//","0.","0;","1","1.","155.","2","2);","2.","225.","232.","3);","3.","4.","5.","=",">","@lc","[155]","[225]","[232]","add","app=leetcod","arraydequ","arraydeque();","arraydeque<>();","assum","back","back,","boolean","call","class","code:","code=end","code=start","constant","data","depend","dequ","deque)","deque,","deque.offer();","deque.offerfirst();","deque.offerlast();","deque.peek();","deque.peekfirst();","deque.peeklast();","deque.pollfirst();","deque.polllast();","deque.pop();","deque.push();","description:","design","discuss","e","e)","element","element.","empti","empty()","empty.","end","example,","example:","fals","follow","front","front,","getmin()","head","here.","id=155","id=225","id=232","implement","import","initi","instanti","int","integer.max_value;","java.util.arraydeque;","java.util.deque;","java.util.linkedlist;","java.util.queue;","jdk11","lang=java","language,","linkedlist<>();","list","long","mean","min","minimum","minstack","minstack()","minstack();","minstack.getmin();","minstack.pop();","minstack.push(","minstack.push(0);","minstack.top();","minval","minval;","myqueu","myqueue()","myqueue();","mystack","mystack()","mystack();","natively.","new","nosuchelementexcept","notes:","null","nullpointerexcept","obj","obj.empty();","obj.peek();","obj.pop();","obj.push(x);","object","offer","offer(","onto","oper","param_2","param_3","param_4","parameters:","peek","peek()","peek/pop","poll","poll()","pop","pop()","pop,","privat","public","push","push(","push(int","push(x)","push,","queue","queue),","queue).","queue.","queue.empty();","queue.offer(e)))","queue.offer(x);","queue.peek();","queue.pop();","queue.push(1);","queue.push(2);","queue;","queues.","remov","repres","retriev","return","returns:","simul","size,","solut","specifi","stack","stack).","stack.","stack.empty();","stack.isempty();","stack.peek();","stack.pop();","stack.push(1);","stack.push(2);","stack.push(temp.pop());","stack.push(x);","stack.top();","stack;","stacks.","standard","structur","such:","support","temp","temp.push(stack.pop());","throws:","time.","top","top()","top,","true","us","valid","valid.","void","whether","x","x)","{","|","}","参考","因此，在使用栈和队列时，个人倾向于使用如下方式：","在使用jdk11相关的api接口时，stack已经不被推荐使用了，因为它继承自vector，是jdk1.0的产物，设计不够合理且性能低效。","当作为栈使用时，性能比stack好；当作为队列使用时，性能比linkedlist好。","栈和队列","栈：后进先出；队列：先进先出","题目"],"01-data-structrue/basic/04-tree/tree.html":["!=","!stack.isempty())","\"null\\n\");","&&","'#'","(!queue.isempty())","(!stack.isempty())","(!stack1.isempty())","(!stack2.isempty())","((node.left","(;","(;;)","(;;from","(bst)","(cur","(cur.left","(cur.right","(figur","(first","(from","(int","(node.left","(node.right","(p","(postend","(pre","(pre.right","(prestart","(r","(root","(y","*","*/","*left;","*next;","*right;","+","+\"\\n\");","/","/*","/**","//","0","0,","0;","1","1);","1,","1.","100","105.","106.","117.","15","1:","2","2.","20","2:","2;","3","3.","4","4.","6000.","7","9","99.",";","=","==",">","@lc","@overrid","[1,#,2,3,#,4,5,7,#]","[1,2,3,4,5,null,7]","[1,3,null,null,2]","[105]","[106]","[117]","[2,1,4,null,null,3]","[3,1,4,null,null,2]","[3,1,null,null,2]","[3,9,20,15,7]","[9,15,7,20,3]","[9,3,15,20,7]","\\","_left,","_left;","_next)","_next;","_right,","_right;","_val)","_val,","_val;","a),","abov","app=leetcod","approach","array){","array,","array.length","array.length;","arraydeque<>();","assum","b.","binari","boolean","break;","bst(){","bst(e[]","bst>","build(int","build(postorder.length","buildtree(int[]","chang","class","code","code:","code=end","code=start","connect","connect(nod","constant","constraints:","construct","count","cur","cur)","cur.left);","cur.left;","cur.next;","cur.right;","cur.val)","cur;","current","definit","depth","depth){","depth,","dequ","description:","devis","discuss","dummi","dummy,","dummy.left","duplic","e","e){","e;","each","element","end","exampl","example,","exist","explanation:","extra","figur","fine,","first","first.val","first.val;","follow","for(int","forward.","from,","from.right)","from.right,","function","generateavl(array,","generateavl(e[]","generatebststring(nod","generatebststring(node.left,","generatebststring(node.right,","generatebststring(root,","generatedepthstring(int","given","head","head;","helper(0,","helper(int","here","id=105","id=106","id=117","if(l","if(nod","ii","implicit","import","index","inend)","inend,","inindex","initially,","inord","inorder(root.left);","inorder(root.right);","inorder(treenod","inorder)","inorder);","inorder,","inorder.length","input:","instart","instart,","instart;","int","int[]","isempty(){","java.util.arrays;","l","l)","l,","lang=java","left","left,","left;","less","level","level.","levelorder(treenod","linkedlist<>();","mid","mistake.","morri","morris遍历","new","next","next;","node","node(","node()","node(int","node,","node.","node.left","node.right","node.right)))","node;","node{","note:","null","null)","null){","null,","null.","null;","null;)","number","o(n)","order","output","output:","p","p.left;","p.right;","p.val","p;","point","pointer","pointers,","popul","postend,","postord","postorder(root.left);","postorder(root.right);","postorder(treenod","postorder)","postorder);","pre","pre);","pre.next","pre.right","pre.right;","preorder","preorder(root.left);","preorder(root.right);","preorder(treenod","preorder,","preorder.length","prestart,","pretti","print(pre,","print(treenod","privat","problem.","public","queue","queue.offer(root);","queue.size();","r);","r){","re","recov","recovertree(treenod","recurs","res);","res){","res.append(generatedepthstring(depth)","res.tostring();","return","return;","reverse(cur.left,","reverse(pre,","reverse(treenod","right","right)","right;","root","root)","root,","root;","search","second","second.v","second.val;","serial","set","signifi","size","size(){","size;","solut","solution?","space","space.","stack","stack.peek();","stack.pop();","stack.push(node.left);","stack.push(node.right);","stack.push(p);","stack.push(root);","stack1","stack1.pop();","stack1.push(node.left);","stack1.push(node.right);","stack1.push(root);","stack2","stack2.push(node);","straight","string","stringbuild","stringbuilder();","struct","structure.","swap","sz","this.","this.left","this.right","this.val","tmp","tmp;","to)","tostring(){","travers","tree","tree,","tree.","tree:","treenod","treenode(","treenode()","treenode(array[mid]);","treenode(int","treenode(postorder[postend]);","treenode(preorder[prestart]);","two","up:","us","val","val)","val,","val;","void","without","write","x","x)","x.right","x;","y","y.right","y.right;","y;","z","z;","z=","{","{}","|","||","}","};","中序遍历：","删除线索","刷题先刷二叉树","前序遍历：","参考","后序遍历：","寻找前驱结点","层序遍历：","常用操作","建树、调试","树","生成以node为根节点，深度为depth的描述二叉树的字符串","第一种双栈","第二种pre","递归遍历","非递归遍历","题目"],"01-data-structrue/basic/05-set/set.html":["1.","2.","3.","4.","5.","6.","7.","ad","add","add(","addal","addall(collect","alreadi","boolean","c","c)","call","chang","check","collect","contain","contains(object","containsal","containsall(collect","e","e)","element","hashset","hashset、linkedhashset、treeset","jdk11","linkedhashset","o","o)","object","parameters:","presenc","present","public","remov","remove(object","removeal","removeall(collect","result","retain","retainal","retainall(collect","returns:","set","set,","specifi","test","treeset","true","whose","不包含重复元素。","参考","如果无排序要求可以选用hashset；如果想取出元素的顺序和放入元素的顺序相同，那么可以选用linkedhashset。如果想插入、删除立即排序或者按照一定规则排序可以选用treeset。","集","集合","题目"],"01-data-structrue/basic/06-map/map.html":["(a","(map.entri","1.","2.","3.","4.","5.","6.","7.","8.","9.","associ","boolean","collect","contain","containskey","containskey(object","containsvalu","containsvalue(object","coursesmap.entryset())","entry:","entryset","entryset()","get(object","hashmap、linkedhashmap、treemap","indic","key","key)","key,","key.","key.)","keyset","keyset()","m","m)","map","mapped,","more","null","nullpointerexcept","on","parameters:","presenc","previou","previous","public","put","put(k","putal","putall(map","remov","remove(object","return","returns:","set","set>","specifi","store","system.out.println(entry.getkey());","system.out.println(entry.getvalue());","test","throws:","true","v","valu","value)","values()","view","void","whose","{","}","哈希表","存储键值对映射","映射","题目"],"01-data-structrue/basic/07-heap/heap.html":["java中priorityqueue默认实现最小堆。","堆"],"01-data-structrue/advanced/01-union-find/union-find.html":["!=","(!uf.union(edge[0],","(int","(int[]","(map.containskey(x))","(parent[x]","(rank[x]","(the","(with","*","*/","+",",",".","...,","/","/*","//","0;","1","1);","1,","1000.","128.","1:","1;","1];","2","2,","200,","2:","2]","2d","3","3,","4","4,","4.","4].","5","684.","685.",":","=","==",">3","@lc","[1,","[1,3],","[1,4]","[1,4],","[1,5]]","[100,","[2,3]","[2,3],","[2,3]]","[3,4],","[4,1]","[4,1],","[684]","[685]","[[1,2],","[u,","\\","^","ad","added.","addit","algorithm","alreadi","an","ans;","answer","answers,","app=leetcod","array","array.","between","boolean","child","chosen","class","code:","code=end","code=start","complexity.","connect","consecut","cycles.","descend","description:","differ","direct","discuss","distinct","dsu","each","edg","edge;","edge[1]))","edgecycl","edgeremov","edges)","edges.","edges.length,","element","exactli","exampl","example:","except","existed.","explanation:","find","find(int","find(map.get(x)));","find(num","find(parent[x]);","find(x)","find(y);","findredundantconnection(int[][]","findredundantdirectedconnection(int[][]","format,","given","graph","hashmap<>();","id=684","id=685","ii","illegalargumentexception();","input","input:","int","int[]","int[n","int[n];","integ","integers,","lang=java","last","length","longest","longestconsecutive(int[]","map","map.get(x);","map.put(num,","map.put(x,","map;","math.max(ans,","multipl","n","n)","n),","n,","new","node","node,","nodes.","note:","num","num);","nums)","o(n)","occur","on","output:","pair","parent","parent,","parent;","parent[x]","parent[x];","parent[y]","parents.","plu","privat","problem,","public","rank","rank;","rank[y])","rank[y]++;","redud","redund","remov","repres","result","ret","return","root","root)","run","same","same(int","sequenc","sequence.","size","solut","start","such","that,","therefor","this:","throw","tree","true;","two","u","uand","uf","undirect","unionfind","unionfind(edges.length","unionfind(int","unsort","v","v,","v.","v]","valu","vertic","x)","x,","x;","y)","y;","{","|","}","参考","及","合并","合并（union）：将两个子集合并成一个集合。","它支持两种操作：","并查集","并查集是一种树形的数据结构，顾名思义，它用于处理一些不交集的","朋友的朋友就是朋友。","查找（find）：确定某个元素处于哪个子集；","查询","模板","问题。","题目"],"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":["&","(","()","(1).","(2","(i","(int","(o1.val","(x",")","*","*/","+","++tag;","+=","/*","//","0","0;","1","1).","1);","1,","1.","1;","1]","1],","1];","2","2)","2,","2,5,","2.","3","3,","3.","307.","315.","327.","5","5]","6","8","9",":","=","==",">","@lc","[","[0,0],","[0,2]","[1,","[2,1,1,0]","[2,2],","[307]","[315]","[5,2,6,1]","[lower,","add)","algorithm","ans)","ans[i","app=leetcod","are:","array","array)","array.","array.length","array.length;","arraylist<>();","assum","better","between","binaryindexedtree(int[]","binaryindexedtree{","call","class","code:","code=start","compare(nod","count","counts[i]","countsmaller(int[]","defin","description:","discuss","distribut","element","element.","evenly.","example:","explanation:","find","function","function.","given","id=307","id=315","import","inclusive.","index","indic","init()","input:","int","int[]","int[n","integ","j","j)","j),","java.util.arraylist;","java.util.arrays;","java.util.comparator;","java.util.list;","lang=java","lie","list","long[]","long[n","lowbit(i))","lowbit(int","lowbit(j))","lower","modifi","mutabl","n","n;","naiv","new","node","node(int","node[]","node[n","note:","num","numarray","numarray(int[]","number","nums)","nums,","nums.length;","nums;","nums[i].","o(n)建树","o(n2)","o1,","o1.po","o1.val","o2)","o2.po","o2.pos;","o2.val)","o2.val;","output:","pos,","pos;","privat","properti","public","queri","query(ref[i]);","rang","re","ref","res.add(num);","res;","reset()","respect","ret","ret;","return","right","s(i,","self","smaller","solut","sum","sumrang","sumrange(0,","sums1","sums1;","sums2","sums2;","sums;","sums[i][j];","tag;","that.","this.po","this.val","three","trivial.","updat","update(1,","update(i,","update(int","update(ref[i],","upper","upper]","val)","val.","val;","void","x","x)","x);","x,","x,int","x;","y,int","y;","{","|","}","});","“高级”数据结构——树状数组！","≤","二维树状","传入的是差分数组","区间修改、区间查询","区间修改、单点查询","单点修改、区间查询","参考","可解决此题小于等于的情况","建树","技巧","数组array下标从1开始","时间戳优化","树状数组","树状数组是一个查询和修改复杂度都为$log(n)$的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在log(n)的复杂度下进行范围修改，但是这时只能查询其中一个元素的值。","树状数组是一种用于高效处理对一个存储数字的列表进行更新及求前缀和的数据结构。","树状数组详细解析","树状数组黑科技讲义","模板","题目"],"01-data-structrue/advanced/03-segment-tree/segment-tree.html":["线段树"],"01-data-structrue/advanced/04-trie/trie.html":["!search(word))","(int","(prefix","(word","*","*/","/*","/**","//","0;","208.","26;","=","==","@lc","[208]","app=leetcod","assum","boolean","class","code:","code=start","consist","cur","data","description:","discuss","empti","end","end;","example:","fals","false;","final","given","guarante","here.","id=208","implement","index","initi","input","insert","insert(str","insert,","int","lang=java","letter","lowercas","max","methods.","new","next","next;","non","note:","null","null)","path","path;","prefix","prefix)","prefix.","prefixnum(str","privat","public","remove(str","return","return;","root","root;","search,","solut","start","startswith","startswith(str","static","strings.","structur","tree","tree)","trie","trie()","trie();","trie.","trie.insert(\"app\");","trie.insert(\"apple\");","trie.search(\"app\");","trie.search(\"apple\");","trie.startswith(\"app\");","trienod","trienode()","trienode();","trienode[26];","trienode[]","trienode[max];","true","void","word","word)","z.","{","|","||","}","上时，我们可以快速得到某些字符串的公共前缀。","从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串；","任意节点的所有子节点所包含的字符都不相同；","作为其他数据结构和算法的辅助结构：如后缀树，ac自动机等。","利用多个字符串的公共前缀来节省存储空间，反之，当我们把大量字符串存储到一棵","字典树","字典树的性质","字典树，又称单词查找树，trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来节约存储空间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。","字符串最长公共前缀：trie","字符串检索：事先将已知的一些字符串（字典）的有关信息保存到","排序：trie","树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串，便是按字典序排序的结果。","根节点（root）不包含字符，除根节点外的每一个节点都仅包含一个字符；","模板","的应用","里，查找另外一些未知字符串是否出现过或者出现频率。","题目"],"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":["!stack.isempty()","\"0\"","\"0\";","\"10\",","\"10200\",","\"1111\"","\"1219\"","\"1432219\",","\"200\"","&&","'0')","(!stack.isempty()","(!stack.isempty())","(blue","(height","(i","(int","(k","(sb.length()","(stack.isempty()","(stack.isempty())","(也可以自定义从小到大)",")","*","*/","/*","/**","//","//construct","//remov","0","0)","0.","0;","1","1,","10","10002","1219","1:","1;","2","200.","2:","3","3,","3:","4,","402.","42.","6","84.",":",";","=","==",">",">=","?","@lc","[0,1,0,2,1,0,1,3,2,1,2,1]","[0,1,0,2,1,0,1,3,2,1,2,1].","[2,1,5,6,2,3]","[2,1,5,6,2,3].","[402]","abov","an","ans;","app=leetcod","area","area,","arr)","arr.length;","arr[i]","arr[stack.peek()])","array","arraydeque<>();","bar","be","case","case,","class","code:","code=end","code=start","comput","contain","contribut","corner","dequ","description:","digit","discuss","each","elev","exampl","example:","explanation:","find","form","given","head","height","height)","height.length","heights)","heights.length","heights.length;","heights[stack.peek()])","heights[top]","histogram","histogram'","histogram.","i++;","id=402","image!","input:","int","int[]","int[n];","integ","k","k)","k.","l","l[top]","lang=java","largest","largestrectanglearea(int[]","lead","left","length","less","map","marco","math.max(ans,","monotonestack(int[]","much","n","n)","neg","new","non","note","note:","noth","null","num","num,","num.charat(i))","num.length();","number","output","output:","possible.","public","r","r[top]","rain","raining.","rectangl","remov","removekdigits(str","repres","return","sb","sb.append(stack.pop());","sb.charat(0)","sb.deletecharat(0);","sb.reverse();","sb.tostring();","section)","shade","shown","smallest","smallest.","solut","stack","stack.peek()","stack.peek()));","stack.peek();","stack.pop();","stack.push(i);","stack.push(num.charat(i));","string","string,","stringbuild","stringbuilder();","thank","three","top","trap","trap(int[]","trapped.","unit","unit.","void","water","width","zero.","zeroes.","{","|","||","}","≥","单调增栈：用于定位左右小于自己的最近元素","单调栈","单调栈:","单调栈即满足单调性的栈结构。","寻找数组中的每一个元素","左右两边离它arr[i]最近的比它大的数","栈底到栈顶:","模板","用途：用来快速寻找一个数组中的每一个元素，左右两边离它最近的比它大（小）的数。","由大到小","题目"],"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":["\"单调\"","\"规律\"——递增（或递减）","\"队列\"","(int","*","*/","/**","0;","1)","=","arr,","arr.length;","arraylise<>();","dequ","int","k","k)","linkedlist<>();","list","monotonequeue(int[]","n","new","re","res.add(arr[deque.peekfirst()]);","void","{","}","单调队列","单调队列:","指的是元素只能从队头和队尾进行操作","指的是元素的的","模板","用来求出在数组的某个区间范围内的最值","用途：用来求出数组的某个区间范围内的最大值。","题目"],"02-algorithm/01-basic/01-sort/sort.html":["!=","\"a","%","&&","((long)nums[i","((long)t","();","(1).","(2","(3,6)","(6,9)","(arr","(arr[i]","(cnt","(cur","(cur.next","(cur.val","(each","(head","(i","(i,","(int","(int)(math.random()","(issort)","(k","(l","(maxidx","(maxindex","(mid","(n","(num","(one","(p1","(pre.next","(r","(size","(zero,","*","*/","+","++j;","+=","......,","/","/*","/**","/*****************heapfiy优化*****************/","/*****************二分插入排序*****************/","/*****************链表*****************/","//","//从arr[i]","/=","0","0's,","0)","0,","0.","0;","1","1'","1's,","1)","1)));","1).","1)/2","1);","1)]","1)的数组b，其中b中index元素记录的值是a中index出现的次数，累加数组b(其中b[index]存储小于等于index的元素个数)，最后从后往前遍历序列a，将其放到辅助数组aux相应位置。","1,","1.","10,","10.","10;","10]]","148.","164.","1:","1;","1]","1])","1]:2","1];","1次建堆，完成排序。","2","2's,","2's.","2)","2);","2*nums[j].","2,","2.","21.","215.","220.","274.","2:","2;","2])","3","3,","3.","315.","32","3:","4","4.","493.","5","5.","50,000.","6","6,","6.","7.","75.","8.","9.",":",";","=","==",">",">=","?","@lc","@param","@return","[0,","[0,0,1,1,2,2]","[1,0,1,1],","[1,2,3,1],","[1,3,2,3,1]","[1,3,6,9],","[1,5,9,1,5,9],","[10]","[164]","[2,0,2,1,1,0]","[2,1,1,0]","[2,4,3,5,1]","[215]","[220]","[274]","[3,0,6,1,5]","[3,2,1,5,6,4]","[3,2,3,1,2,4,5,5,6]","[3,6,9,1]","[315]","[493]","[5,2,6,1]","[75]","[two,","absolut","accord","adjacent,","algorithm","alway","app=leetcod","arr","arr)","arr,","arr.length","arr.length;","arr;","arr[(i","arr[0],","arr[0];","arr[])","arr[i","arr[i]","arr[i];","arr[index++]","arr[j","arr[j]","arr[j])","arr[j].val)","arr[j];","arr[l]","arr[l];","arr[maxidx])","arr[maxindex]","array","array'","array,","array.","array315.","arraylist<>();","arr}.","assum","aux","aux;","aux[","between","bit","blue","blue,","blue.","boolean","break;","bubblesort(int[]","bubblesort(listnod","bucketcount","bucketcount)","buckets.","buckets[idx].add(arr[i]);","bucketsort(int[]","call","citat","citations)","citations.length;","class","cnt","cnt;","code:","code=end","code=start","color","colors215.","come","comput","constant","contain","containsnearbyalmostduplicate(int[]","count","count[(nums[i]","count[arr[i]","count[i]","counts[i]","counts[i];","counts[n]++;","counts[num]++;","countsmaller(int[]","countsort1(int[]","countsort2(int[]","cur","cur);","cur++;","cur.next","cur.next.v","cur.next.val)","cur.next.val;","cur.next;","cur.val","cur.val;","cur;","definit","description:","differ","discuss","distinct","duplic","each","each,","each.\"","element","element.","elements,","elements.","end","end,","end};","exampl","example:","exce","exp","exp)","explanation:","fals","false;","final","find","findkthlargest(int[]","first,","fit","follow","for(int","form","form.","forward","function","gap","gap)","gap220.","gap;","gap]","given","h","h,","hashmap<>();","head)","head,","head;","heapsize)","heapsize);","heapsort(int[]","helper","helper.next;","helper;","here,","hindex(int[]","his/her","i)","i,","i;","id=164","id=215","id=220","id=274","id=315","id=493","id=75","idx","if(l","iii","import","index","index,","index.","index;","indic","input","input:","insertionsort(int[]","insertionsort(listnod","int","int[]","int[]{start","int[n","int[n];","int[nums.length];","int[r","int[r];","integ","integer)","integer.","integer.min_value)","integers,","issort","iter","j","j)","java.util.arraylist;","java.util.arrays;","java.util.hashmap;","java.util.list;","java.util.map;","java.util.random;","k","k)","k);","k){","k,","k.","k]","kth","l","l)","l,","l;","lang=java","largest","lastbucket","len","len)","length","length.","less","library'","linear","list","list912.","listnod","listnode(0);","lists23.","lists88.","long","map","map.put(bucket,","map.remove(lastbucket);","max","maxidx","maxidx);","maxidx,","maximum","maximumgap(int[]","maxindex","maxindex);","maxindex;","mean","merg","merge(arr,","merge(int[]","merge(pair[]","mergesort(arr,","mergesort(int[]","mergesort(nums,","mid","mid)","mid);","mid,","min","min)","min;","min]]","more","n","n)","n);","n;","need","neg","new","next","next;","non","note","note:","null","null)","null;","num","number","nums)","nums,","nums.length","nums.length;","nums[i]","nums[i].","nums[i];","nums[j]","object","on","one]:1","order","order,","out","output:","overwrit","p","p1","p2","p[0]);","p[1],","pair","pair(int","pair[]","pair[nums.length];","pair[r","paper","papers至少h","partition(arr,","partition(int[]","pass","pivot","place","possibl","pre","pre.next","pre.next.val)","pre.next;","privat","problem.","properti","public","quciksort(int[]","quickselect(int[]","quickselect(nums,","quicksort(arr,","quicksort(int[]","r","r)","r);","r){","r,","r;","random","random();","rang","range.","re","receiv","red,","redixsort(int[]","remain","remappednum);","repres","res;","research","researcher'","researcher,","respectively.","return","return;","revers","reversepairs(int[]","right","same","scientist","selectsort(int[]","self","self493.","sever","shellsort(int[]","shuffle(int","shuffle(nums);","siftdown(arr,","siftdown(int[]","siftdown2(arr,","siftup(int[]","sign","size);","smaller","smaller);","smaller[arr[i].index]","solut","solv","sort","sort.","sortcolors(int[]","space?","start","start);","straight","success","such","suppos","swap(arr,","swap(int[]","t","t)","t_2,","t_k$，按增量序列个数k对序列进行k趟排序，最后$t_k=1$将整个序列作为一个表来处理。","tail","tail)","taken","temp","temp;","therefor","this.index","this.val","time/space.","tmp","tmp;","total","tri","true","true;","two","unsort","up","up:","us","val","val)","val;","valid,","valu","void","whether","white","white,","wikipedia:","write","zero","zero]:0","{","{@code","|","||","}","−","≤","三路快排","上浮","下一个要插入的结点","下图是排序算法的性能及稳定性总结。","下次遍历的尾结点是当前结点，每次减少访问最后结点","下沉","下表是排序算法思想相应leetcode的题目索引（持续更新）。","交换导致的不稳定性","从前往后比较相邻元素，如果第一个比第二个大，就交换。重复前面的步骤，每次都从最后累积减少一个元素。","假设数组中有n个元素，最大值为max，最小值为min，则在排序数组中相邻元素最大间隔不超过ceiling[(max","先给出排序经常会用到的swap函数，用于交换数组中两个位置的值。","先获取序列a中最小值min和最大值max，再开辟长度为(max","先设置固定数量的空桶，再把数据放到对应的桶中，对每个不为空的桶中数据进行排序，最后拼接不为空的桶中数据，输出结果。","内部排序","冒泡","冒泡、选择、插入","冒泡排序","十大排序算法","参考","双指针","在序列中选一个元素为基准值(pivot)，将所有元素比pivot小的放在前面，比pivot大的放在后面，pivot放中间(partit","在归并过程中统计逆序数","在未排序序列中找到最小(大)元素放到排序序列起始位置，再从剩余未排序元素中继续寻找最小(大)元素放到已排序序列的末尾，重复步骤直到排序完毕。","基数排序","基数排序要求数据可以分割出独立的“位”来比较，而且位之间有递进的关系，即若数据a的高位比数据b的高位大，那剩下的低位就不用比较了。","基数排序要求每一位数据范围不能太大，要可以用线性算法来排序。","堆排序","增量序列每次减半","大顶堆，每个结点的值都大于等于其左右孩子结点的值","如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。","对出现的引用次数进行计数，返回结果至多为数组长度n","对每个序列做插入排序","将序列分为已排序区间和未排序区间，取未排序区间中的元素，在已排序区间中找到合适的位置将其插入，保证已排序区间一直有序。","将待排序序列构造成一个大顶堆，每次移走堆顶，重复n","将待比较元素补齐为统一长度，从最低位开始依次进行一次排序，当最高位排序完成后，序列就成了有序序列。","希尔排序","常用","开始往下调整","归并、快排","归并排序","归并过程中统计","当前结点为i，父亲结点为(i","当前要被插入的结点","快速排序","思想","找到正确插入的位置","排序","控制h","控制映射到同一个桶中不同元素的差值不超过t，同时桶的数量不超过k(移除最早进桶元素)","提前结束","插入位置在pre和pre.next之间","插入排序","插入操作","操作)，递归地进行排序。","数据移动","数据结构可视化","最大最小值","桶排序","桶排序对排序的数据要求非常苛刻。需要足够均匀，否则桶内排序就不是常量了。","桶排序适用于外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。","模板","每次保证堆的性质","注意这儿是n，因为还没有swap","父亲结点为i，左孩子结点为2*i+1，右孩子结点为2*i+2","用arr[l]作为划分点","算法","绑定最初索引","计数、桶、基数","计数排序","计数排序是桶排序的一种特殊情况，适用于将要排序的n个数据的数据范围不大的情形，且不适用于有负数的情形。","返回下次开始的位置，一左一右","选择一个增量序列$t_1,","选择排序","随机选择pivot，防止退化为o(n²)","题号","题目"],"02-algorithm/01-basic/02-binary-search/binary-search.html":["&&","(2","(arr[mid]","(c1","(i.e.,","(int","(l","(l1","(m+n)).","(matrix","(matrix[i][j]","(mid","(n1","(r","(right","(true)","(val","(x","*","*/","+",",","...;","...标记的部分就是可能出现细节问题的地方。","/","/*","//","0","0)","0,","0;","1","1)","1))","1,","1.","11,","12,","13","13,","14,","153.","154.","15],","16,","17,","19],","1:","1;","1]","1].","1};","2","2.","2.0","2.0;","2.5","2.82842...,","20,","20],","21,","22],","23,","240.","24],","26,","2:","2;","2]","2d","3","3)/2","3,","3.","30,","30]","33.","34,","34.","35.","3:","3]","4","4,","4.","4:","4]","5","5,","5.","50]","6","6,","6.","69.","7","7,","7.","719.","74.","7],","8","8,","81.","9,",":",";","=","==",">",">=",">中值",">右中值","?","@lc","[","[0,0,1,2,2,5,6]","[0,1,2,4,5,6,7]","[1,","[1,3,5,6],","[10,","[18,","[2,","[2,5,6,0,0,1,2]).","[2,5,6,0,0,1,2],","[23,","[240]","[2]","[3,","[3,4]","[33]","[34]","[35]","[4,5,6,7,0,1,2]).","[4,5,6,7,0,1,2],","[4]","[5,7,7,8,8,10],","[69]","[74]","[81]","]","affect","algorithm","algorithm'","although","app=leetcod","arr,","arr.length","arr[r]","array","array,","array.","arrays.","ascend","assum","basic","becom","beforehand.","binari","binarysearch(int[]","boolean","both","bottom.","c2)","class","code:","code=end","code=start","column","compar","complex","complexity?","comput","consid","contain","d","decim","description:","detail","digit","discuss","distanc","doubl","duplic","duplicates.","each","effici","element","empty.","end","exampl","example:","exist","explanation:","fals","false.","false;","find","findmediansortedarrays(int[]","findmediansortedarrays(nums2,","first","firstequal(int[]","firstlarge(int[]","firstlargeequal(int[]","follow","found","found.","given","greater","guarante","https://www.bilibili.com/video/bv1wj411n7u8?from=search&seid=15996420867699793986","id=240","id=33","id=34","id=35","id=4","id=69","id=74","id=81","idea","if(matrix","if写清楚，这样就可以清楚地展现所有细节。","ii","implement","index","index,","input:","insert","int","int[]","integ","integer,","integer.","integer.max_valu","integer.max_value;","j","k","key)","key){","l","l)","l1","l;","lang=java","last","lastequal(int[]","lastequalsmall(int[]","lastsmall(int[]","left","left)","logn","m","matrix","matrix,","matrix.","matrix.length","matrix.length,","matrix:","matrix[0].length;","median","mid","mid)","mid,","mid1,","mid2","mid2;","mid;","minimum","mysqrt(int","n","n).","n1","n2","n2)","neg","non","not,","null","num","nums,","nums.length","nums1","nums1);","nums1,","nums1.length,","nums1[mid1]","nums2","nums2)","nums2.length;","nums2[mid2]);","nums[r2]","o(log","order","order,","order.","otherwis","output:","overal","pair","part","pivot","posit","previou","problem","properties:","public","r","r1","r2;","r;","re","res;","res[1]","respectively.","result","return","returned.","right","right.","root","rotat","row","row.","run","runtim","search","search(int[]","search.","searchinsert(int[]","searchmatrix(int[][]","searchrange(int[]","size","smallest","solut","sort","sqrt","sqrt(int","sqrt(x)","squar","start","straightforward,th","suppos","surprisingli","target","target)","th","time","top","tricky...","true","true,","true.","truncat","truncated,","two","type","unknown","up","up:","val;","valu","value,","value.","while(...){","why?","write","x","x)","x).","x,","{","|","||","}","二分查找","二分查找相关题目索引(持续更新)","二分查找难度极大的一道题","从此，图书馆丢了","偶数","先讲个笑话乐呵一下：","分析二分查找技巧：不要出现else，而是把所有情况用els","可以把问题转化为查找两个数组中第(n1+n2+1)/2大的数","奇数","思路很简单，细节是魔鬼。","最基本的二分查找","最终，检测了","有一天阿东到图书馆借了","本书。","本书，出图书馆的时候，警报响了，于是保安把阿东拦下，要检查一下哪本书没有登记出借。阿东正准备把每一本书在报警器下过一下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第一堆过一下报警器，报警器响；于是再把这堆书分成两堆……","查找最后一个小于key","查找最后一个小于等于key","查找最后一个等于key","查找第一个大于key","查找第一个大于等于key","查找第一个等于key","框架","模板","次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。","注意判断条件","防整形溢出","题目"],"02-algorithm/01-basic/03-two-pointer/two-pointer.html":["!=","&&","(0","(assum","(blue","(both","(head","(i","(i,","(i.e.","(inclusive),","(int","(integ","(l","(left)，最右侧的定义为右指针","(next","(num","(nums.length","(p1","(p2","(pre","(right)，然后从两头向中间进行数组遍历。","(size","(slow","*","*/","+",",","...,","/","/*","/**","//","0","0'","0)","0).","0,","0;","1","1)","1);","1,","1.","11.","147.","148.","167.","18.","1:","1;","2","2.","209.","283.","287.","2:","2x","3","3.","344.","349.","350.","3:","3sum","3sum16.","49","49.","4],","4sum167.","7","7,","88.","9","9.",":","=","==",">=","?","@lc","[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","[\"h\",\"e\",\"l\",\"l\",\"o\"]","[\"o\",\"l\",\"l\",\"e\",\"h\"]","[0,1,0,3,12]","[1,2,2,1],","[1,2,2,3,5,6]","[1,2,3,0,0,0],","[1,2]","[1,2],","[1,3,12,0,0]","[1,3,4,2,2]","[1,8,6,2,5,4,8,3,7]","[1,8,6,2,5,4,8,3,7].","[11]","[141]","[142]","[167]","[1],","[2,2]","[2,3,1,2,4,3]","[2,5,6],","[2,7,11,15],","[209]","[283]","[287]","[2]","[3,1,3,4,2]","[3,2,0,","[344]","[349]","[350]","[4,3]","[4,9,5],","[4,9]","[88]","[9,4,9,8,4]","[9,4]","]","];","a1,","a2,","abov","add","addit","ai)","ai).","algorithm","algorithm?","alloc","alreadi","anoth","answer","app=leetcod","appear","area","array","array,","array.","array141.","arraylist<>();","arrays,","arrays.","arrays.sort(nums1);","arrays.sort(nums2);","arrays350.","ascend","ascii","assum","axi","based.","begins.","better?","between","boolean","both","case,","char[].","charact","characters.","characters88.","class","closest","code","code:","code=end","code=start","compar","complex","comput","connect","consist","constant)","constant,","constraint.","contain","container,","contigu","coordin","copi","cycl","cycle,","cycle142.","definit","description:","detectcycle(listnod","determin","discuss","disk,","drawn","duplic","each","element","elements.","end","endpoint","enough","equal","exactli","exampl","example:","exist.","explanation:","extra","fals","false;","fast","fast)","figur","find","findduplicate(int[]","first","follow","form","function","given","greater","hascycle(listnod","hashset<>();","head","head)","head.next","head.next.next;","head.next;","head;","height)","height.length","hold","i++;","id=11","id=141","id=142","id=167","id=209","id=283","id=287","id=344","id=349","id=350","id=88","ii","ii209.","import","index","index1","index2","index2)","index2.","indexed)","indic","initi","input","input:","instead.","int","int[]","int[list.size()];","int[set.size()];","integ","intersect","intersect(int[]","intersection(int[]","intersection.","isn't","it.","j","j++;","java.util.arraylist;","java.util.arrays;","java.util.hashset;","java.util.list;","java.util.set;","k","kn","l","lang=java","length","less","limit","line","lines,","link","list","list)","list,","list.","list.add(nums1[i]);","listnod","listnode(int","load","log","longest","m","m,","maintain","make","mani","math.min(res,","max","maxarea(int[]","memori","memory.","memory?","merg","merge(int[]","minim","minimum","minsubarraylen(int","modifi","more","move","movezeroes(int[]","n","n)","n).","neg","new","next","next)","next.next","next.next.next;","next.next;","next;","node","node.","non","note:","null","null)","null.","null;","num","num;","number","number,","number.","numbers,","numbers.length","nums)","nums,","nums.length","nums1","nums1'","nums1,","nums1[p","nums1[p1","nums1[p1]","nums2","nums2'","nums2)","nums2,","nums2.","nums2[j])","nums2[p2","nums2[p2]","nums[0];","nums[fast];","nums[nums[0]];","nums[nums[fast]];","nums[slow];","o(1)","o(n","o(n)","o(n²).","on","once.","once?","one,","one.","only).","operations.","optim","order","order,","order.","out","output:","p","p1","p2","place","po","point","posit","pre","pre.next;","printabl","problem","prove","public","r","re","read","rel","repeat","repres","res;","respectively.","result","result;","result[k++]","return","revers","reversestring(char[]","runtim","s","s)","s,","s.","s.length","same","second","section)","set","set)","set.add(nums1[i]);","show","singli","size","size?","slant","slow","slow;","small","solut","solution,","solv","sort","sorted344.","sorted?","space","space.","space?","specif","store","string","string.","subarray","substr","such","sum","sum283.","tail","target","target)","target,","therefor","time","to.","togeth","total","tri","true","true;","twice.","two","twosum","twosum(int[]","under","unique.","up","up:","us","val","val;","vertic","void","water","water.","water15.","without","write","x","x)","x;","zero","zeroes287.","{","|","||","}","≥","再走l步回到起点","分离双指针","判断是否存在环","判断是否存在环，若存在找出环入口","前向双指针","双指针","双指针滑动窗口","双指针类型","同前向型","对撞指针","对撞指针是指在有序数组中，将指向最左侧的索引定义为左指针","快慢指针","快慢指针也是双指针，但是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如","快慢指针找环入口","快慢指针类似，不同的是快慢指针从后往前，用于合并和替换类型题，防止之前的数据被覆盖。","所谓双指针算法，就是指的是在遍历的过程中，不是普通的使用单个指针进行循环访问，而是使用两个相同方向或者相反方向的指针进行扫描，从而达到相应的目的。双指针法充分使用了数组有序这一特征，从而在某些情况下能够简化一些运算，降低时间复杂度。","每次增长一个。","每次增长两个，slow","类型","输入是两个数组","链表，两个指针分别在两个容器中移动；根据问题的不同，初始位置可能都在头部，或者都在尾部，或一头一尾。","题目","题目索引(持续更新)"],"02-algorithm/01-basic/04-sliding-window/sliding-window.html":["\"\".","\"aababba\",","\"aabbbba\".","\"ab\"","\"ab\",","\"ab\".","\"abab\"","\"abab\",","\"abc\"","\"abc\",","\"abc\".","\"abcabcbb\"","\"adobecodebanc\",","\"b\",","\"ba\",","\"bac\",","\"banc\"","\"bbbb\"","\"bbbbb\"","\"cba\",","\"cbaebabacd\"","\"pwke\"","\"pwwkew\"","\"wke\",","'a'","'a']","'b'","(char","(int","(r","(right","(s","(s.length()","*","*/","+","/*","//","0","0)","0,","0;","0，把索引闭区间","1","1)","1);","1,","1.","104.","1:","1、我们在字符串","2","20,100.","239.","2:","2]","2、我们先不断地增加","3","3.","3:","3、此时，我们停止增加","4","4.","424.","438.","4、重复第","6","6]","76.",":",";","=","==","@lc","[0,","[3]","[424]","[438]","[76]","[left,","abov","alway","anagram","answer","app=leetcod","arraylist<>();","both","c","chang","char","charact","character.","characterreplacement(str","characters.","choos","class","code:","code=end","code=start","complex","consist","contain","count","count++;","count[s.charat(l)","cover","description:","discuss","empti","english","exampl","example:","exce","explanation:","find","findanagrams(str","form","given","guarante","hashmap<>();","head","id=3","id=424","id=438","id=76","import","index","indic","input:","int","int[26];","int[]","integer.max_value;","java.util.arraylist;","java.util.hashmap;","java.util.list;","java.util.map;","k","k)","l","l);","l++;","lang=java","larger","lc","left","left，我们都要更新一轮结果。","len","length","lengthoflongestsubstring(str","letter","letters,","list","longest","lowercas","map","map.get(lc)","map.getordefault(c,","map.put(c,","map.put(lc,","map.size();","match","math.max(maxlen,","math.max(res,","matter.","maxcount","maximum","maxlen","maxlen;","middl","minimum","minwindow(str","needl","needle.getordefault(c,","needle.put(c,","new","non","note","note:","null","o(n).","on","oper","operation,","operations.","order","output","output:","p","p'","p)","p,","p.tochararray())","p:","perform","public","r","re","repeat","replac","res;","return","right","right]","right]，直到窗口中的字符串不再符合要求（不包含","right]，直到窗口中的字符串符合要求（包含了","right，转而不断增加","s","s)","s,","s.","s.charat(l);","s.length()","s:","slide","solut","start","string","string'","string,","string.","sub","subsequ","substr","substring,","substring.","such","t","t)","t,","t.tochararray())","two","uniqu","uppercas","versa.","vice","window","window,","without","{","|","||","}","中使用双指针中的左右指针技巧，初始化","中的所有字符了）。同时，每次增加","中的所有字符）。","到达字符串","和第","思想","指针扩大窗口","指针缩小窗口","更新","步在优化这个「可行解」，最终找到最优解。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。","步相当于在寻找一个「可行解」，然后第","步，直到","滑动窗口","滑动窗口相应题目索引(持续更新)","滑动窗口算法可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。","滑动窗口算法的思路是这样：","的尽头。","称为一个「窗口」。","记录最短子串的开始位置和长度","这个思路其实也不难，第","题目"],"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":["\"2","\"2*3","'","'*'","'+'","(((2*3)","((2","((2*(3","((2*3)","();","(1","(2","(2*((3","(2*(3","(4*5))","(4*5)))","(binari","(c)","(int","(l","(n","(res.size()","(treenod","*","*.","*/","+","+,","...","/","/*","/**","//","0","0)","0;","1","1\"","1)","1))","1));","1);","1,","10","10,","10]","14","14,","1:","2","241.","2:","2]","3","34","34,","4))*5)","4)*5)","4)*5))","4*5\"","5","95.",":","=","==",">","@lc","[","[0,","[1,null,2,null,3]","[1,null,3,2],","[2,1,3],","[241]","[3,1,null,null,2],","[3,2,null,1],","[95]","\\","]","abov","add","app=leetcod","arraylist<>();","below:","binari","break;","bst'","case","class","code:","code=end","code=start","comput","correspond","definit","description:","differ","diffwaystocompute(input.substring(0,","diffwaystocompute(input.substring(i","diffwaystocompute(str","discuss","exampl","example:","explanation:","gener","generatesubtree(1,","generatesubtree(i","generatesubtree(int","generatesubtree(l,","generatetrees(int","given","group","i));","id=241","id=95","ii","import","input)","input:","int","integ","java.util.arraylist;","java.util.linkedlist;","java.util.list;","l,","l;","lang=java","left","left)","left;","leftnod","leftnode;","leftval","linkedlist<>();","list","n)","n);","n,","n.","new","node","node.","node.left","node.right","number","oper","operators,","operators.","output","output:","parenthes","possibl","public","r)","r);","re","res.add(integer.valueof(input));","res.add(leftv","res.add(node);","res.add(null);","res;","result","return","right","right)","right;","rightnod","rightnode;","rightval","rightval);","search","shown","solut","store","string","structur","switch","tree","treenod","treenode(i);","treenode(int","trees)","uniqu","val","val;","valid","valu","way","x)","x;","{","|","}","分治","分治算法可以分三步走：分解","分治算法相应题目索引（持续更新）","分解到某个容易求解的边界之后，进行递归求解。","分解原问题为结构相同的子问题。","合并","将一个规模为n的问题分解为k个规模较小的子问题，这些子问题相互独立且与原问题性质相同。","将子问题的解合并成原问题的解。","思想","解决","题目"],"02-algorithm/01-basic/06-backtracking/backtracking.html":["!visited[i","\"\",","\"((()))\",","\"(()())\",","\"(())()\",","\"()(())\",","\"()()()\"","\"...q\",","\"..q.\"],","\".q..\"]","\"abcb\",","\"abcced\",","\"adjacent\"","\"q...\",","\"see\",","&&","'.'","'.');","'.'.","'q'","());","(board","(char[]","(int","(k","(l","(n","(r","(stack.size()","(str.length()","(the","(word","*","*/","...","...and","/*","//","0","0)","0);","0,","0;","0},","1","1,","1.","1]","1]))","1];","1},","1}};","1、路径：也就是已经做出的选择。","2","2.","216.","22.","2d","2、选择列表：也就是你当前可以做的选择。","3","3,","3.","37.","39.","3x3","3、结束条件：也就是到达决策树底层，无法再做选择的条件。","4","4,","4.","40.","46.","47.","51.","77.","78.","79.","9","90.","9x9.",":","=","=0","==","@lc","[","[\"..q.\",","[\".q..\",","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","[1,1,2]","[1,1,2],","[1,2,1],","[1,2,2]","[1,2,2],","[1,2,3]","[1,2,3],","[1,2],","[1,3,2],","[1,3],","[1,4],","[1..n]","[1],","[2,1,1]","[2,1,3],","[2,2],","[2,3,1],","[2,3],","[2,4],","[22]","[2],","[3,1,2],","[3,2,1]","[3,4],","[37]","[3],","[46]","[47]","[51]","[77]","[78]","[79]","[90]","[]","]","above.","adjac","alway","an","ans.add(new","ans;","app=leetcod","arraydeque<>());","arraylist<>();","arraylist<>(stack));","arrays.fill(row,","arrays.sort(nums);","assum","attack","backtrack(路径,","board","board)","board,","board.length","board.length;","board;","board[0].length","board[0].length;","boolean","boolean[9][10];","boolean[]","boolean[][]","boolean[n","boolean[n];","boolean[n][m];","boolean[nums.length];","both","box","boxes;","c","cell","cell,","cells.","char[][]","char[n][n];","charact","chessboard","class","code:","code=end","code=start","col","collect","cols,","column.","combin","combine(int","configur","construct","contain","continue;","convert(char[][]","cor","d1","d1,","d2","d2;","def","dequ","description:","dfs(0);","dfs(int","dfs(int[]","dfs(n,","digit","discuss","distinct","duplic","duplicates,","each","empti","exactli","example,","example:","exist","exist(char[][]","explanation:","false.","false;","fill","find","findpermute(int[]","findpermute(nums,","findpermuteunique(int[]","findpermuteunique(nums,","follow","for(int","form","function","gener","generateparenthesis(int","given","grid.","horizont","id=22","id=37","id=46","id=47","id=51","id=77","id=78","id=79","id=90","if(stack.size()","ii","iii","import","index,","index;","indic","input:","int","int[][]","integ","integers,","is:","java.util.arraydeque;","java.util.arraylist;","java.util.arrays;","java.util.deque;","java.util.list;","k","k)","k,","k，算法输出","l,","lang=java","len)","len,","letter","list","list>","m","m;","mark","more","n","n)","n,","n.","n;","neighboring.","new","note:","null","num","number","nums)","nums,","nums.length){","nums[i","nums[i]","nums，返回这些数字的全部排列。","n×n","occur","onc","once.","other.","out","output:","pair","parenthes","parentheses,","parentheses.","parenthesi","permut","permutations.","permute(int[]","permuteunique(int[]","place","placement,","possibl","power","privat","problem","program","public","puzzl","puzzle.","puzzle...","queen","queens'","r)","re","red.","res.add(convert(board));","res.add(new","res.add(str);","res;","respectively.","result","result.add(路径)","return","return;","row","row.","rows,","rules:","same","satisfi","search","sequenti","set","set).","shown","singl","size","solut","solution.","solv","solvenqueens(int","solver","solvesudoku(char[][]","space","stack)","stack);","stack){","stack.pop();","stack.push(nums[i]);","str,","string","string(row));","sub","subset","subsets(int[]","subsets.","subsetswithdup(int[]","such","sudoku","sum","those","true.","true;","two","uniqu","us","vertic","visit","visited;","visited[i]","void","well","word","word)","word,","word.length()","write","x","y","{","{0,","{1,","{{","|","||","}","个数字的所有组合。","个问题：","中","二维","代码方面，回溯算法的框架：","使用一个数组来表示方向位移的技巧。","做选择","其核心就是","初始化","回溯","回溯算法对应题目索引(持续更新)","子集","循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」，特别简单。","排列","撤销选择","满足结束条件:","类型","组合","解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考","输入一个可能包含重复数字的数组","输入两个数字","选择","选择列表)","选择列表):","选择列表:","问题很简单，输入一个可能包含重复数字的数组，要求算法输出这些数字的所有子集。","题目"],"02-algorithm/01-basic/07-depth-first-search/dfs.html":["!=","\"atlant","\"pacif","'0'","'0')","'0';","'1'","'o'","'o')","'t';","'x'","'x'.","(4)","(5)","(6)","(7)","(board","(grid","(horizont","(if","(int","(int[]","(int[][]","(land)","(matrix","(posit","(repres","(the","(up,","(water),","(还原标记)；","*","*/","+","+=","...","/*","//","//如果加上（还原标记）就是","0'","0)","0.","0.)","00000","00011","00100","0;","0],","0]]","0th","0},","0}};","1","1'","1's,","1);","1,","1.","11,","11000","11010","11110","130.","150.","1:","1],","1st","1},","1}};","2","2.","200.","2:","2],","2d","2nd","3","3],","4","417.","4],","5","50.","547.","5x5","6.","695.",":",";","=","==",">","@lc","[0,0,0,0,0,0,0,0,0,0,1,0,0],","[0,0,0,0,0,0,0,1,1,0,0,0,0]]","[0,0,0,0,0,0,0,1,1,1,0,0,0],","[0,0,1]]","[0,1,0,0,1,1,0,0,1,0,1,0,0],","[0,1,0,0,1,1,0,0,1,1,1,0,0],","[0,1,1,0,1,0,0,0,0,0,0,0,0],","[0,1,1]]","[1,","[1,1,0],","[1,1,1],","[1,200].","[130]","[2,","[200]","[3,","[4,","[417]","[547]","[695]","[[0,","[[0,0,0,0,0,0,0,0]]","[[0,0,1,0,0,0,0,1,0,0,0,0,0],","[[1,1,0],","abov","adjac","an","anoth","answer","app=leetcod","area","area;","array","array.","arraylist<>();","assum","atlant","b","b,","be:","between","bf","board","board)","board.length","board.length;","board[0].length;","board[r][c]","boolean[]","boolean[][]","boolean[m][n];","boolean[n];","border","border,","both","bottom","c","c,","c.","canreach);","canreacha","canreachp","captur","cell","circl","circle,","circle.","class","class.","code:","code=end","code=start","connect","contain","continent,","continue;","coordin","count","d","d[0],","d[1]);","d[1],","defin","description:","dfs()","dfs(board,","dfs(grid,","dfs(nextrow,","dfs（深度优先搜索）","dfs（）；","dimens","dir","dir)","direct","direction","directionally.","discuss","down,","each","edg","edges.","empti","equal","exampl","example,","example:","exce","explanation:","explanation:th","find","findcirclenum(int[][]","flip","flow","follow","for(扩展方式)","form","four","friend","friends,","friends.","friendship","function,","given","grid","grid)","grid,","grid.length","grid.length;","grid[0].length;","grid[i][j]","group","height","himself","horizont","id=130","id=200","id=417","id=547","id=695","if(到达终点状态)","if(扩展方式所达到状态合法)","if(特殊状态)","if(越界或者是不合法状态)","import","indirect","input:","int","int[][]","integ","island","island,","islands.","ith","j","java.util.arraylist;","java.util.arrays;","java.util.list;","jth","land","land)","lang=java","left","left,","length","less","letter","list","list>","lower.","m","m)","m,","m.length;","m[i][i]","m[i][j]","m[j][i]","map","matrix","matrix)","matrix).","matrix.length","matrix.length;","matrix:","matrix;","matrix[0].length;","matrix[nextrow][nextcol])","matrix[r][c]","matter.","max","maxareaofisland(int[][]","maximum","mean","n","n*n","n;","nature.","neg","new","nextcol","nextcol,","non","not.","note","note:","null","number","numislands(char[][]","o","o),","ocean\"","ocean.","on","order","other,","otherwis","output","output:","pacif","pacificatlant","parenthes","privat","public","r","rang","re","region","region.","relationship","repres","res;","return","return:","return;","right","right)","run","same","shouldn’t","solut","solve(char[][]","student","students.","surround","this.matrix","top","total","touch","transit","two","unit","vertical.)","vertically.","visit","visited;","void","water","water.","x","{","{0,","{1,","{{","{{0,","|","||","}","~","一样同样需要对已经遍历过的节点进行标记。","两个要点：","修改操作;","剪枝","参数用来表示状态","回溯法","常用来解决可达性的问题。","是否还原标记根据题意","标记：和","标记；","栈：用栈来保存当前节点信息，当遍历新节点返回时能够继续遍历当前节点。可以使用递归栈。","根据题意来添加","根据题意添加","模板","深度优先搜索","深度优先搜索相应题目索引(持续更新)","题目"],"02-algorithm/01-basic/08-breadth-first-search/bfs.html":["\"cog\"","\"cog\",","\"dog\"","\"dot\"","\"hit\"","\"hit\",","\"hot\"","(!queue.isempty())","();","(0)","(0,","(1).","(beginword","(end","(for","(ie.","(ie.,","(int","(marked[next])","(n","(next","(q","(r,","(size","(squar","*","*/","+","...)","...,","/*","//","0","0)","0));","0).","0;","0},","1","1)","1,","1.","1091.","12","127.","13","16,","1:","1;","1])","1];","1][n","1},","1}};","2","279.","2:","3","3;","4","4,","4.","5","5.","8","9,","9.",":","=","==",">","@lc","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","[1091]","[127]","[279]","[[0,0,0],[1,1,0],[1,1,0]]","[[0,1],[1,0]]","[]","adjac","alphabet","an","ans++;","app=leetcod","arraydeque<>();","arraylist<>();","assum","beginword","beginword,","bf","bfs(node","binari","block","boolean[]","boolean[graphic.length];","boolean[n","bottom","buildgraphic(list","buildgraphic(wordlist);","c),","c_1","c_1,","c_2,","c_i","c_k","c_{i+1}","cell","chang","characters.","class","clear","code:","code=end","code=start","compos","connect","contain","continue;","corner)","cur","description:","df","dictionary'","diff","differ","dir","direction","discuss","duplic","each","edg","empti","empty)","end","end)","end);","endword","endword),","endword,","exampl","example,","exist","exist,","explanation:","find","generatesquares(int","generatesquares(n);","getshortestpath(graphic,","given","graphic","graphic,","graphic[cur])","grid)","grid,","grid.length;","grid[0].length;","grid[0][0])","grid[n","grid[r][c]","id=1091","id=127","id=279","import","input:","int","int[][]","integ","j","java.util.arraydeque;","java.util.arraylist;","java.util.linkedlist;","java.util.list;","java.util.queue;","k","ladder","ladderlength(str","lang=java","left","length","length.","letter","level","level++;","linkedlist<>();","list","list,","list.","list[]","list[n];","locat","lowercas","m","mark","marked[next]","marked[start]","matrix","n","n)","n,","n.","new","next","node","node(0,","node(int","node(xx,","non","note:","number","numsquares(int","on","output:","path","path++;","path;","perfect","posit","possibl","privat","public","q.offer(start);","q.size();","q;","queue","queue.add(n);","queue.add(next);","queue.add(start);","queue.offer(new","queue.poll();","queue.size();","return","right","right.","same","same.","sequenc","sequence.","set","share","shortest","shortestpathbinarymatrix(int[][]","size","solut","squar","start","start,","step","string","such","sum","sz","target","target)","that:","therefor","this.i","this.x","time.","top","transform","transformation.","true;","two","valu","visit","visited.add(start);","visited;","visited[n]","word","wordlist","wordlist)","wordlist,","wordlist.add(beginword);","wordlist.size();","x,","x;","y)","y;","yy","yy));","{","{0,","{1,","{{","|","||","}","到终点","参考","双向bfs优化","可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。","在程序实现","大很多。","宽度优先搜索","宽度优先搜索相应题目索引(持续更新)","将当前队列中的所有节点向四周扩散","将起点加入队列","建图","找到的路径一定是最短的，但代价就是空间复杂度比","时需要考虑以下问题：","标记：对于遍历过的节点，应该将它标记，防止重复遍历。","核心数据结构","模板","的最主要的区别是：bf","的最近距离","的核心思想应该不难理解的，就是把一些问题抽象成图，从一个点开始，向四周开始扩散。一般来说，我们写","相对","算法都是用「队列」这种数据结构，每次将一个节点周围的所有节点加入队列。","计算从起点","记录扩散的步数","避免走回头路","队列：用来存储每一轮遍历得到的节点；","题目"],"02-algorithm/01-basic/08-greedy/greedy.html":["贪心"],"02-algorithm/02-advanced/01-dp/01-线性/linear.html":["!=","\"*\"","\"*a*b\"","\"?a\"","\"a\"","\"a*c?b\"","\"aa\"","\"aa\".","\"abc\"","\"abc\",","\"abcde\"","\"abcde\",","\"acdcb\"","\"ace\"","\"adceb\"","\"aec\"","\"cb\"","\"dce\".","\"def\"","\"execution\"","\"horse\",","\"intention\",","\"ros\"","'*'","'*')","'*'.","'?'","'a',","'b'.","'c')","'c',","'e')","'h'","'i'","'n'","'r')","'t')","'u')","'x')","(eg,","(includ","(insert","(int","(not","(nums[i]","(p),","(p.charat(j)","(remov","(replac","(s","(s)",")","*.","+","//","0","0.","0;","1","1);","1143.","1:","1;","1];","1][j","1][j]","1][n","2:","3","3.","300.","3:","4","4.","44.","4:","5","5:","72.","=","==",">",">=","?","[10,9,2,5,3,7,101,18]","[2,3,7,101],","algorithm","array","boolean","boolean[][]","boolean[m","both","break;","chang","charact","character.","characters(can","characters.","class","code:","combination,","common","complexity.","complexity?","consist","constraints:","contain","convert","cover","delet","description:","distanc","dp","dp[0][0];","dp[i","dp[i]","dp[i]);","dp[i][j","dp[i][j]","dp[i][j]:","dp[j]","dp[m][j]=true;","dp[m][n]","edit","empti","enent","english","entir","exampl","example:","exect","execut","exent","explanation:","fals","false;","find","first","follow","gener","given","hors","implement","improv","increas","inent","input","input:","insert","int","int[]","int[][]","int[m","int[n];","integers,","intent","ismatch(str","j","length","length.","lengthoflis(int[]","letter","li","log","longest","longestcommonsubsequence(str","lowercas","m","match","math.max(dp[i],","math.max(res,","mindistance(str","minimum","more","n","n)","necessari","new","none)","not).","note:","null","null)","number","nums)","nums.length;","nums[j])","o(n","o(n2)","on","only.","oper","order","origin","output:","p","p)","p.charat(j))","p.length();","partial).","pattern","permit","public","re","rel","remain","replac","requir","res;","result","return","ro","rors","rose","run","s","s,","s.charat(i)","s.length(),","second","sequenc","sequence).","sequence,","sequence.","singl","solut","string","strings.","subsequ","subsequence,","subsequence.","substr","such","support","text1","text1,","text1.length(),","text2","text2)","text2,","text2.length();","therefor","time","true","true;","two","unsort","up:","wildcard","without","word","word1","word1,","word1.length(),","word2","word2)","word2,","word2.","word2.length();","word:","z,","z.","{","||","}","个字符与","个字符最长公共子串","单串li","双串lc","字符串匹配","的前","线性","线性dp","问题是指递推方程具有明显的线性关系，有一维线性和二维线性。"],"02-algorithm/02-advanced/01-dp/02-区间/interval.html":["!=","\"aaa\"","\"aaabbb\"","\"aba\"","\"abcde\",","\"at\",","\"b\"","\"bb\".","\"bbb\".","\"bbbab\"","\"bbbb\".","\"caebd\"","\"cbbd\"","\"eat\"","\"gr\"","\"great\",","\"great\".","\"great\":","\"rgeat\"","\"rgeat\".","\"rgtae\"","\"rgtae\".","'a'.","(int","(s","(s1.length()","(x",")","*","+","...,","/","//","0","0)","0;","1","1*1*1","1*1*3","1*1*4","1*1*5","1*3*8","1*8*1","1.","100","100.","1000.","1039.","13","13.","144","144.","167","1:","1;","1]","1];","2","245,","2:","2];","3","3*1*5","3*4*5","3*4*7","3*5*8","3*7*5","312.","3:","3;","4","4*5*7","500,","516.","6","6.","664.","87.",":","=","==",">",">=","[1,2,3]","[1,3,1,4,1,5]","[3,1,5,8]","[3,5,8]","[3,7,4,5]","[3,8]","[8]","[]","[l,r],","\\","a)","a.length;","a[0],","a[i],","a[n","achiev","adjac","adjacent.","alreadi","array","ask","assum","balloon","balloons,","balloons.","becom","below","binari","boolean","boolean[][][]","boolean[n][n][n","burst","burst,","charact","characters.","children","children,","children.","choos","class","clockwis","code:","coin","coins.","collect","consid","consist","continu","convex","count","cover","description:","determin","dp","dp[i][i]","e","each","eat","empti","end","english","exampl","example,","example:","exce","exist","explanation:","fals","false;","find","first","follow","g","given","gr","great","here","hint:","i.","imagin","index","indic","input:","int","int[]","int[][]","int[a.length","int[n][n];","isscramble(str","it.","j","job","k","label","leaf","left","len","length","length,","letter","longest","longestpalindromesubseq(str","lower","maxcoins(int[]","maximum","minimum","minscoretriangulation(int[]","n","n,","need","new","node","non","note:","null","num","number","nums.","nums[","nums[0]","nums[i]","nums[left]","nums[n++]","nums[n]","nums[right]","on","only,","order","order.","origin","output:","over","paint","palindrom","partit","place","places,","polygon","polygon.","possibl","print","printer","produc","product","public","r","real","recursively.","repres","represent","requirements:","return","rg","rgeat","rgtae","right","s","s)","s,","s.","s.length()","s.length();","s1","s1,","s1.","s1.length();","s2","s2)","s2.length())","same","score","scores:","scrambl","second","sequenc","side","similarly,","smallest","solut","special","start","strang","strangeprinter(str","string","string,","subsequ","subsequence'","substr","sum","suppos","swap","t","ta","tae","them.","therefor","time.","total","tree","triangl","triangle,","triangles.","triangul","triangulated,","triangulation.","triangulations,","true","turn","turn,","two","valu","vertic","vertices,","wisely.","x","x;","{","||","}","≤","划分区间求极值","区间","区间dp","区间dp，顾名思义，就是需要在一个区间上去进行状态转移，先在小区间进行dp得到最优解，然后再利用小区间的最优解合并求大区间的最优解。","取点","合并","模板","求解","特征","状态$dp[i][j]$表示将下标位置$i$到$j$的所有元素合并能获得的价值的最大值，那么","的区间","的特点：","长度为","题目","，$f(i,j)=max{f(i,k)+f(k+1,j)+cost}$为将这两组元素合并起来的代价。","：即将两个或多个部分进行整合，当然也可以反过来；","：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。","：能将问题分解为能两两合并的形式；"],"02-algorithm/02-advanced/02-graph/01-connected/connected.html":["!=","!tokenizer.hasmoretokens())","$，表示牛$a$认为牛$b$受欢迎。这种关系是具有传递性的，如果$a$认为$b$受欢迎，$b$认为$c$受欢迎，那么牛$a$也认为牛$c$受欢迎。你的任务是求出有多少头牛被除自己之外的所有牛认为是受欢迎的。","&&","(!stack.isempty()","();","(;","(fa","(int","(ioexcept","(low[v]","(token","(v",")","*","*/","+","/","/**","//","0;","1","1)","1;","1];","2","2)","32768);",";","=","==",">",">=","@author","[]","acm","actual","args)","arraydeque<>();","arraylist<>();","arraylist[n","bcc","bcc.add(tmp);","bcc;","bcccnt","bcccnt++;","bcccnt;","boolean[]","boolean[v];","break;","bridgecnt","bridgecnt++;","bridgecnt;","bufferedread","bufferedreader(new","built","catch","chelper","class","coer","construct","dequ","dfn","dfn;","dfn[u])","dfn[u]：深度优先搜索遍历时结点u被搜索的次序","dfn[v]","dfscnt","dfscnt;","e)","false;","father","father;","findbcce()","findbccve()","findscc()","findve()","g","g,","g;","import","in,","in.nextint();","inputread","inputreader(inputstream","inputreader(inputstream);","inputstream","inputstreamreader(stream),","instack","instack;","instack[v]","int","int[]","int[v];","integer.parseint(next());","isbridg","isbridge;","isbridge[v]","ispoint","ispoint;","ispoint[u]","java.io.bufferedreader;","java.io.inputstream;","java.io.inputstreamreader;","java.io.ioexception;","java.io.outputstream;","java.io.printwriter;","java.util.arraydeque;","java.util.arraylist;","java.util.deque;","java.util.list;","java.util.stringtokenizer;","list","list>","list[]","low","low(v)$，说明u是一个割点，同时把边从栈顶一个个取出，直到遇到了边$(u,v)$，取出的这些边与其关联的点，组成一个点双连通分支。割点可以属于多个点双连通分支，其余点和每条边只属于且属于一个点双连通分支。","low;","low;;","low[u]：以u为根的子树中的结点的dfn的最小值","low[v]","m","main","main(string[]","n","new","next()","nextint()","null","null;","oi","out","out)","out);","out.close();","outputstream","plug","pointcnt","pointcnt++;","pointcnt;","printwrit","printwriter(outputstream);","privat","public","re","reader","reader;","res.add(tmp);","res;","return","road","runtimeexception(e);","sccbelong","sccbelong;","sccbelong[v]","scccnt","scccnt++;","scccnt;","sccsz","sccsz;","sccsz[scccnt]++;","solut","solve(int","solver","solver.solve(1,","stack","stack.peek()","stack.pop();","stack;","static","stream)","string","stringtoken","stringtokenizer(reader.readline());","system.in;","system.out;","tarjan","tarjan(list[]","task","task();","testnumber,","this.g","this.v","throw","tmp","tmp.add(stack.pop());","tmp.add(u);","tmp.add(v);","token","tokenizer.nexttoken();","tokenizer;","top","tri","true;","u)","us","v","v)","v;","void","x)为桥。","{","||","}","。","从下标索引1开始","代码：","割点","割点与桥：","参考","双连通分量","双连通分量、割点与桥","双连通分量：","受欢迎的牛","图的连通性","在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪个点（只能删去一个，且不能删$u$和$v$自己）都不能使它们不连通，我们就说$u$和$v$点双连通","在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪条边（只能删去一条）都不能使它们不连通，我们就说$u$和$v$边双连通","在图$g$中，两个不同的结点$u$和结点$v$之间若存在一条路，则称结点u和结点v是连通的。","对于一个无向图，如果删掉一条边后图中的连通分量数增加了，则称这条边为桥或者割边。","对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。","对于点双连通分支，实际上在求割点的过程中就能顺便把每个点双连通分支求出。建立一个栈，存储当前双连通分支，在搜索图时，每找到一条树$dfn$枝边或后向边(非横叉边)，就把这条边加入栈中。如果遇到某时满足$dfn(u)\\leq","对于边双连通分支，求法更为简单。只需在求出所有的桥以后，把桥边删除，原图变成了多个连通块，则每个连通块就是一个边双连通分支。桥不属于任何一个边双连通分支，其余的边和每个顶点都属于且只属于一个边双连通分支。","应用场合：有向图、有两两可达条件、通过把每个强连通分量缩点从而把原图化简成一棵树。","强连通分量","当isbridge[x]为真时，(father[x],","当ispoint[x]为真时，x为割点。","思想：","把图中所有的边双连通分量缩成一个点，原图就缩成了一棵树，要加的边数就是(所有度为1的点的个数","模板","每一头牛的愿望就是变成一头最受欢迎的牛。现在有$n$头牛，给你$m$对整数$(a,b)","爆栈了！！！","直接tarjan缩点，然后如果出度为0的点只有一个，输出这个点包含的原先的点的个数，否则为0；","给出一个没有重边的无向图，求至少加入几条边使整个图成为一个边双连通分量。","视频","连通性","针对于无向图：点双连通分量和边的连联通分量。","针对于有向图，在这儿先明确两个定义：强连通和强连通分量。强连通是指有向图$g$中任意两个结点连通。强连通分量是极大的强连通子图。","题意：","题目"],"02-algorithm/02-advanced/02-graph/02-topological/topological.html":["!=","!dfs(v)))","&&","(","();","(cnt","(int","(int[]","(vis[v]","*","*/",",",".","/*","//","0","0)","0,","0.","0:未访问","0;","1","1)","1,","1.","1:","1:已访问","1;","2","2,","2.","207.","210.","2:","2:访问中","2;","3","4","4,",":","=","==","@lc","[0,1,2,3]","[0,1,2,3].","[0,1]","[0,2,1,3]","[207]","[210]","[[1,0],[0,1]]","[[1,0],[2,0],[3,1],[3,2]]","[[1,0]]","[]","adjac","anoth","app=leetcod","array.","arraylist[]","arraylist[n];","assum","bf","boolean","both","canfinish(int","class","code:","code=end","code=start","correct","cours","courses,","courses.","courses?","cur;","deg","deg;","deg[next]","deg[t[0]]++;","description:","dfs(int","discuss","duplic","edg","edges,","empti","exampl","explanation:","express","fals","false;","findorder(int","finish","first","g","g;","g[cur])","g[t[1]].add(t[0]);","g[u])","given","graph","id=207","id=210","ii","import","imposs","impossible.","input","input:","int","int[0];","int[]","int[][]","int[n];","java.util.arraylist;","java.util.linkedlist;","java.util.list;","java.util.queue;","label","lang=java","linkedlist<>();","list","list[]","m;","matrices.","more","multipl","n","n)","n,","need","new","next","note:","number","on","order","orders,","output:","p)","pair:","pairs,","possibl","possible.","prerequisit","prerequisites,","prerequisites.","privat","public","queue","queue.offer(next);","read","repres","represented.","res;","res[cnt]","return","schedul","solut","t","take","take,","take.","taken","them.","topologysort{","toposort()","total","true","true;","u)","v","vis;","vis[u]","void","{","|","||","}","入度数组","在一个有向无环图中，我们将图中的顶点以线性方式进行排序，使得对于任何的顶点$u$到$v$的有向边","拓扑排序","模板","都可以有$u$在$v$的前面。","顶点数、边数","题目"],"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":["!=","&&","(int","(j","(p.charat(j)","//","0","0,","0;","1,","1];","=","==","an","ans++;","ans;","getnext(p);","getnext(str","i++;","i,","i;","int","int[]","int[m];","j","j++;","j;","kmp","kmp(string","kmp算法用于解决模式串匹配问题。","m","m)","n","new","next","next[0]","next[i","next[j","next[j]","next[j]表示字符串前j+1位最长公共前后缀长度","p)","p.charat(i))","p.charat(j)","p.length();","privat","public","return","s,","s.charat(i))","s.length();","string","{","}","原理","参考","模板","此处j=0处理不可重叠情形，可重叠直接注释掉即可","返回匹配串出现次数","题目"],"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":["\"aba\"","\"bab\"","\"babad\"","\"bb\"","\"cbbd\"","(i","(int","(mx","(sb.charat(i","*","*/","+","/*","//","0)","0;","1000.","1:","1;","2:","5.",":","=","==","?","@lc","[5]","answer.","app=leetcod","assum","break;","class","code:","code=start","description:","discuss","exampl","find","given","i)","i],","id","id=5","input:","int","lang=java","length","longest","longestpalindrome(str","manach","manacher(str","math.min(p[2","maximum","mx","n","new","note:","output:","p[i]","p[i])","p[i]))","p[i]++;","palindrom","public","s","s)","s,","s.","s.length();","sb","sb.append(\"#\");","sb.append(\"$\");","sb.charat(i","solut","string","stringbuild","stringbuilder();","substr","valid","{","|","}","以o(n)时间复杂度解决回文子串问题","原理","参考","模板","题目","马拉车"],"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":["!=","%","%=","'0'));","(a[maxl]","(c[i]","(i","(int",")","+","+=","/","//","0)","0;","10)","10;","1;","1]","1];","2;","=",">=","a.abs();","a.add(b);","a.compareto(b);","a.divide(b);","a.equals(b);","a.gcd(b);","a.intvalue();","a.max(b);","a.min(b);","a.mod(b);","a.multiply(b);","a.negate();","a.pow(b);","a.subtract(b);","a[i","a[i]","add(str","api","b","b[i];","bigdecim","bigfactorial(int","biginteg","biginteger(\"123\");","biginteger(string.valueof(0));","biginteger.vauleof(123);","break;","c","c[i","c[i]","char[]","d","digit","doubl","factorialdigit(int","for(;","i;","int","int[100001];","int[]","int[maxl","int[n1","int[n1];","int[n2];","java","math.max(n1,","maxl","mul(str","n)","n1","n2","n2);","n2];","new","privat","public","re","res[0]","return","s1","s1.length,","s2","s2.length;","sb","sb.append((char)(a[i]","sb.append((char)(a[maxl]","sb.append((char)(c[i]","sb.append((char)(res[i]","sb.tostring();","str1,","str1.tochararray();","str2)","str2){","str2.tochararray();","string","stringbuild","stringbuilder();","string，其它类型可转换为","sum","tmp","{","}","中的高精度运算可以直接调用","四则运算","在","大数","大数乘法","大数加法","大数计算阶乘位数","大数阶乘","实现，其中","尽管已经有了如此方便的操作，下面还是给出具体实现细节，也可作为模板使用。","常用方法","构造对象最好使用","模板","比较大小","用于大整数运算，","用于高浮点型数据运算。","类似","转换","进行构造，保证精度","题目","高精度运算"],"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":["!=","%","&","((b","((k","((n","(a","(a^n)","(b","(int","(n","(re","*","+","//","0)","0;","1)","10000;","1;","=",">",">=",">>=","a)","a);","a,","b)","b.col);","c","class","col)","col;","final","int","int[][]","int[row][col];","k","long","m","m;","matrix","matrix(a.row,","matrix(int","mod","mod)","mod;","mul","mul(a,","mul(matrix","mul(res,","mulmod(a,","mulmod(long","mulmod(res,","n","n,","new","powmod(long","public","re","res;","return","row,","row;","static","this.col","this.row","{","}","乘法快速幂","快速幂","注意这里","矩阵快速幂","计算","配合"],"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":["!=","%","(b","(int","(n","*","/","//","0","0)","1)","1));","1],","2;",":","=","==","?","a,","a;","arr[0];","arr[],","arraylist","arraylist<>();","arrays.fill(isprime,","b","b)","b);","b;","boolean","false;","flag;","gcd(a,","gcd(arr[n","gcd(b,","gcd(int","int","isprime,","isprime[0]","isprime[1]","lcm(arr[n","lcm(int","list","n","n)","new","ngcd(arr,","ngcd(int","nlcm(arr,","nlcm(int","primary(boolean[]","prime","public","r","r;","return","sieve(boolean[]","sieve2(boolean[]","true);","{","}","数论","数论是纯粹数学的分支之一，主要研究整数的性质。","最大公约数、最小公倍数","素数筛法","经典筛法","非递归"]},"length":32},"tokenStore":{"root":{"0":{"0":{"0":{"0":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"1":{"1":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"docs":{}},"1":{"0":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"docs":{}},"docs":{}},"2":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005909389363099146},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.012219959266802444},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007134363852556481},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.03636363636363636},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.057692307692307696},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.016697588126159554},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.008719778042013475},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.007330482590103849},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.007407407407407408},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.011857707509881422},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.007128309572301426},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.04201680672268908},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.021739130434782608},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.010071942446043165},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.014814814814814815},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},"'":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},"，":{"docs":{},"把":{"docs":{},"索":{"docs":{},"引":{"docs":{},"闭":{"docs":{},"区":{"docs":{},"间":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"}":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},"}":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},":":{"docs":{},"未":{"docs":{},"访":{"docs":{},"问":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}},"1":{"0":{"0":{"0":{"0":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"2":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"3":{"9":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{}},"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"5":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"6":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"8":{"9":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"docs":{}},"9":{"1":{"docs":{},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}},"docs":{}},"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.012422360248447204}}},"]":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},")":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}},"1":{"0":{"0":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}},"docs":{}},"1":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"docs":{}},"1":{"1":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"docs":{}},"4":{"3":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"docs":{}},"7":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"2":{"1":{"9":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},"docs":{}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}},"8":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"3":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"4":{"1":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"2":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"4":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"5":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"5":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"6":{"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}}}},"7":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"7":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"9":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005909389363099146},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.017114914425427872},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.007905138339920948},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037}},")":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}}},"/":{"2":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"b":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"b":{"docs":{},"中":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"元":{"docs":{},"素":{"docs":{},"记":{"docs":{},"录":{"docs":{},"的":{"docs":{},"值":{"docs":{},"是":{"docs":{},"a":{"docs":{},"中":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"，":{"docs":{},"累":{"docs":{},"加":{"docs":{},"数":{"docs":{},"组":{"docs":{},"b":{"docs":{},"(":{"docs":{},"其":{"docs":{},"中":{"docs":{},"b":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},"存":{"docs":{},"储":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"序":{"docs":{},"列":{"docs":{},"a":{"docs":{},"，":{"docs":{},"将":{"docs":{},"其":{"docs":{},"放":{"docs":{},"到":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"数":{"docs":{},"组":{"docs":{},"a":{"docs":{},"u":{"docs":{},"x":{"docs":{},"相":{"docs":{},"应":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"5":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"6":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222}}},":":{"5":{"5":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"已":{"docs":{},"访":{"docs":{},"问":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007927070947284977},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.02014388489208633},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.009164969450101833},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.015527950310559006},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.02727272727272727}}},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.014084507042253521},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},":":{"2":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"[":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}}},"j":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.006993006993006993},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},"'":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"次":{"docs":{},"建":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"完":{"docs":{},"成":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"}":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.006993006993006993}}},"}":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"、":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"路":{"docs":{},"径":{"docs":{},"：":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"已":{"docs":{},"经":{"docs":{},"做":{"docs":{},"出":{"docs":{},"的":{"docs":{},"选":{"docs":{},"择":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}},"\"":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},"*":{"1":{"docs":{},"*":{"1":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"3":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"4":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"5":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"3":{"docs":{},"*":{"8":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"8":{"docs":{},"*":{"1":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"docs":{}}},"2":{"0":{"0":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"2":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}},"7":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"8":{"docs":{},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},",":{"1":{"0":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"docs":{}},"docs":{}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"1":{"0":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"6":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"2":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"5":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"3":{"2":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"4":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"4":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"1":{"docs":{},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}}},"5":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"5":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"6":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"7":{"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}},"docs":{}},"8":{"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.014669926650366748},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037}},".":{"0":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"5":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"8":{"2":{"8":{"4":{"2":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"访":{"docs":{},"问":{"docs":{},"中":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}},",":{"5":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222}}},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},";":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.010958904109589041},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474}}},"'":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"*":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"x":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"、":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"不":{"docs":{},"断":{"docs":{},"地":{"docs":{},"增":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"列":{"docs":{},"表":{"docs":{},"：":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"你":{"docs":{},"当":{"docs":{},"前":{"docs":{},"可":{"docs":{},"以":{"docs":{},"做":{"docs":{},"的":{"docs":{},"选":{"docs":{},"择":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}}},"3":{"0":{"0":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"7":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"1":{"2":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"5":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"2":{"7":{"6":{"8":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},"docs":{}},"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"4":{"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"5":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.014669926650366748},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"/":{"2":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"docs":{}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"s":{"docs":{},"u":{"docs":{},"m":{"1":{"6":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"、":{"docs":{},"此":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"停":{"docs":{},"止":{"docs":{},"增":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}},"结":{"docs":{},"束":{"docs":{},"条":{"docs":{},"件":{"docs":{},"：":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"到":{"docs":{},"达":{"docs":{},"决":{"docs":{},"策":{"docs":{},"树":{"docs":{},"底":{"docs":{},"层":{"docs":{},"，":{"docs":{},"无":{"docs":{},"法":{"docs":{},"再":{"docs":{},"做":{"docs":{},"选":{"docs":{},"择":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"x":{"3":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"docs":{}},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}},"*":{"1":{"docs":{},"*":{"5":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"4":{"docs":{},"*":{"5":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"7":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"5":{"docs":{},"*":{"8":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"7":{"docs":{},"*":{"5":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"docs":{}}},"4":{"0":{"2":{"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"1":{"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"docs":{}},"2":{"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"3":{"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"docs":{}},"4":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"6":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"9":{"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},":":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"s":{"docs":{},"u":{"docs":{},"m":{"1":{"6":{"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{}}}},"、":{"docs":{},"重":{"docs":{},"复":{"docs":{},"第":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},")":{"docs":{},")":{"docs":{},"*":{"5":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{}}},"*":{"5":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"docs":{}}},"*":{"5":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"*":{"7":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"docs":{}}},"docs":{}}},"5":{"0":{"0":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{},",":{"0":{"0":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"1":{"6":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"4":{"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"docs":{}},"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188}}},"x":{"5":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},":":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"6":{"0":{"0":{"0":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}},"docs":{}},"6":{"4":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{}},"8":{"4":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"5":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"docs":{}},"9":{"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"7":{"0":{"7":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"docs":{}},"1":{"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}},"2":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"6":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"8":{"1":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"4":{"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"7":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"9":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}},"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}}},"9":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"x":{"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{}}},"docs":{},"c":{"2":{"docs":{},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02877697841726619},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.040372670807453416},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"s":{"docs":{"./":{"ref":"./","tf":0.125}}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02877697841726619}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}},"s":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374}},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"a":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"p":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.012422360248447204}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.013333333333333334},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},"e":{"docs":{},"r":{"docs":{},"s":{"8":{"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}},"s":{"docs":{},"s":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007879185817465528},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006002400960384154},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01056338028169014},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.01282051282051282},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.00794135613927917},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.009164969450101833},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686}}}}}}}}}}}},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"=":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}},"l":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.03597122302158273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"o":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932}},"s":{"2":{"1":{"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},")":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.010158013544018058},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}},"o":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"s":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"?":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}},"u":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0125}}}}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.014672686230248307},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.06474820143884892},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.026455026455026454},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.005497861942577886},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},"s":{"docs":{},"(":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"e":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"n":{"docs":{},"u":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"e":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"d":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}},"x":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"p":{"docs":{},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}}},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"n":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"1":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"docs":{}}}}},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}},"r":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.06720977596741344}},"e":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"?":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"c":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}}},"i":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"s":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007879185817465528},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.013805522208883553},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}}},"v":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006602641056422569}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006602641056422569}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006002400960384154},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.011162179908076166},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.010995723885155772}},"e":{"1":{"4":{"2":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}},"e":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"_":{"1":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"2":{"docs":{},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{},"i":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},"k":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},"{":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"}":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{}}}}},"[":{"docs":{},"i":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.014672686230248307},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.011404561824729893},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.015068493150684932},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.022887323943661973},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.035256410256410256},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.027829313543599257},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.044444444444444446},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.03210463733650416},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.033093525179856115},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.015271838729383017},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.013333333333333334},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00905349794238683},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.010869565217391304},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.03636363636363636},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.012949640287769784},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.03054989816700611},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.05042016806722689},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.024844720496894408},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.08284023668639054}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10}}}}}}}},"e":{"docs":{},"g":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.005497861942577886},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.009192383453709783}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}},"1":{"0":{"0":{"0":{"0":{"1":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"6":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"docs":{}},"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01232394366197183},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.008323424494649227},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.005497861942577886},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.018329938900203666},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.025210084033613446},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.018633540372670808}},"{":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}},"n":{"1":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"2":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"]":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547}}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}},"m":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"v":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.018329938900203666}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}}},"2":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.01580135440180587},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007879185817465528},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.007407407407407408},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"{":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}},"o":{"docs":{},"f":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}}}}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}}},"i":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005909389363099146},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.010071942446043165},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.011606597434331093},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0171875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}}}}},",":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"t":{"docs":{},"i":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}},"c":{"docs":{},"k":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.005402160864345739}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}}}}}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}}}}}}}},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}}}}}}},"d":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},"=":{"1":{"0":{"5":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"6":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"8":{"9":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"docs":{}},"9":{"1":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"docs":{}},"docs":{}},"1":{"7":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"2":{"7":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"docs":{}},"3":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"4":{"1":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"2":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{}},"5":{"5":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"docs":{}},"6":{"4":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},"7":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{}},"docs":{}},"2":{"0":{"0":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"7":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"8":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}},"9":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{}},"1":{"0":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"5":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}},"2":{"0":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"5":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"3":{"2":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"4":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}},"4":{"0":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"1":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{}},"7":{"4":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"9":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"docs":{}},"8":{"3":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"7":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{}},"docs":{}},"3":{"0":{"7":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"docs":{}},"1":{"5":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}},"3":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"4":{"4":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"9":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"5":{"0":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"7":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"4":{"0":{"2":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},"docs":{}},"1":{"7":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"2":{"4":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"docs":{}},"3":{"8":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"docs":{}},"6":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"7":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"9":{"3":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"5":{"1":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"4":{"7":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{}},"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"6":{"8":{"4":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"5":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"docs":{}},"9":{"5":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"docs":{}},"7":{"0":{"7":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}},"4":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"5":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"6":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"7":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"8":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"9":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"docs":{}},"8":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"8":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{}},"9":{"0":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"5":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{}},"docs":{}},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},"e":{"docs":{},"a":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"v":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}}},"到":{"docs":{},"达":{"docs":{},"终":{"docs":{},"点":{"docs":{},"状":{"docs":{},"态":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}},"扩":{"docs":{},"展":{"docs":{},"方":{"docs":{},"式":{"docs":{},"所":{"docs":{},"达":{"docs":{},"到":{"docs":{},"状":{"docs":{},"态":{"docs":{},"合":{"docs":{},"法":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}},"特":{"docs":{},"殊":{"docs":{},"状":{"docs":{},"态":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"越":{"docs":{},"界":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"不":{"docs":{},"合":{"docs":{},"法":{"docs":{},"状":{"docs":{},"态":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}},"写":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"地":{"docs":{},"展":{"docs":{},"现":{"docs":{},"所":{"docs":{},"有":{"docs":{},"细":{"docs":{},"节":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"r":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"[":{"docs":{},"u":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}},"[":{"0":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}},"1":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}},"docs":{}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},":":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.009881422924901186}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"e":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}},"i":{"2":{"0":{"9":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00966183574879227},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00966183574879227},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.022222222222222223},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.024439918533604887},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.016293279022403257}}}},"s":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"!":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"i":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"t":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}},"n":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}}},"2":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.012987012987012988},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007134363852556481},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.010699588477366255},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.012845849802371542},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.012587412587412588},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.017266187050359712},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.125},"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}},"h":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},")":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"d":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.021667760998030205},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.013205282112845138},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.010958904109589041},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},"(":{"0":{"docs":{},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"x":{"docs":{},"x":{"docs":{},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"n":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}}}},"w":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"n":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"e":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}}}},"i":{"docs":{},"v":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"e":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.007900677200902935},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.006565988181221274},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.014492753623188406},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.010958904109589041},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.01855287569573284},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.044444444444444446},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005548949663099485},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.008888888888888889},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.01646090534979424},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.009790209790209791},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.011510791366906475},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.045824847250509164},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.018329938900203666},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.031055900621118012},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}},"e":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"l":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006602641056422569},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}},"docs":{},"i":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},"j":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}},"]":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}},"表":{"docs":{},"示":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"前":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"位":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"长":{"docs":{},"度":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"g":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007879185817465528},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006002400960384154},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.042328042328042326},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0075307173999207295},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}}}}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.018607442977190875},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.01282051282051282},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093}}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.012004801920768308},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}}}},"m":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01232394366197183},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006108735491753207},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"s":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.005497861942577886}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}}}},"p":{"1":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"'":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"2":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566}},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}},"docs":{}}}},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"p":{"2":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"'":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},")":{"docs":{},"{":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"[":{"0":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"i":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"j":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"r":{"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}}},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"些":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"全":{"docs":{},"部":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.029585798816568046}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.013636363636363636}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}}},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"×":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"*":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"g":{"docs":{},"c":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}},"l":{"docs":{},"c":{"docs":{},"m":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}},"个":{"docs":{},"人":{"docs":{},"博":{"docs":{},"客":{"docs":{},"：":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"组":{"docs":{},"合":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"字":{"docs":{},"符":{"docs":{},"与":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"串":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}},"仓":{"docs":{},"库":{"docs":{},"：":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"给":{"docs":{},"出":{"docs":{},"干":{"docs":{},"货":{"docs":{},"，":{"docs":{},"个":{"docs":{},"人":{"docs":{},"总":{"docs":{},"结":{"docs":{},"出":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"常":{"docs":{},"用":{"docs":{},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{},"板":{"docs":{},"子":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}},"刷":{"docs":{},"题":{"docs":{},"调":{"docs":{},"试":{"docs":{},"用":{"docs":{},"链":{"docs":{},"表":{"docs":{},"结":{"docs":{},"构":{"docs":{},"：":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{},"经":{"docs":{},"常":{"docs":{},"会":{"docs":{},"用":{"docs":{},"到":{"docs":{},"的":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"用":{"docs":{},"于":{"docs":{},"交":{"docs":{},"换":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"获":{"docs":{},"取":{"docs":{},"序":{"docs":{},"列":{"docs":{},"a":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"和":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"，":{"docs":{},"再":{"docs":{},"开":{"docs":{},"辟":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"固":{"docs":{},"定":{"docs":{},"数":{"docs":{},"量":{"docs":{},"的":{"docs":{},"空":{"docs":{},"桶":{"docs":{},"，":{"docs":{},"再":{"docs":{},"把":{"docs":{},"数":{"docs":{},"据":{"docs":{},"放":{"docs":{},"到":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"，":{"docs":{},"对":{"docs":{},"每":{"docs":{},"个":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"数":{"docs":{},"据":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"讲":{"docs":{},"个":{"docs":{},"笑":{"docs":{},"话":{"docs":{},"乐":{"docs":{},"呵":{"docs":{},"一":{"docs":{},"下":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}},"在":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"此":{"docs":{},"系":{"docs":{},"统":{"docs":{},"整":{"docs":{},"理":{"docs":{},"下":{"docs":{},"自":{"docs":{},"己":{"docs":{},"杂":{"docs":{},"乱":{"docs":{},"无":{"docs":{},"章":{"docs":{},"的":{"docs":{},"笔":{"docs":{},"记":{"docs":{},"，":{"docs":{},"希":{"docs":{},"望":{"docs":{},"能":{"docs":{},"够":{"docs":{},"自":{"docs":{},"成":{"docs":{},"体":{"docs":{},"系":{"docs":{},"，":{"docs":{},"以":{"docs":{},"供":{"docs":{},"日":{"docs":{},"后":{"docs":{},"温":{"docs":{},"习":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"阅":{"docs":{},"读":{"docs":{},"：":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"./":{"ref":"./","tf":0.125}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"索":{"docs":{},"引":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"插":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"前":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"j":{"docs":{},"d":{"docs":{},"k":{"1":{"1":{"docs":{},"相":{"docs":{},"关":{"docs":{},"的":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"接":{"docs":{},"口":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"已":{"docs":{},"经":{"docs":{},"不":{"docs":{},"被":{"docs":{},"推":{"docs":{},"荐":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"继":{"docs":{},"承":{"docs":{},"自":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{},"是":{"docs":{},"j":{"docs":{},"d":{"docs":{},"k":{"1":{"docs":{},".":{"0":{"docs":{},"的":{"docs":{},"产":{"docs":{},"物":{"docs":{},"，":{"docs":{},"设":{"docs":{},"计":{"docs":{},"不":{"docs":{},"够":{"docs":{},"合":{"docs":{},"理":{"docs":{},"且":{"docs":{},"性":{"docs":{},"能":{"docs":{},"低":{"docs":{},"效":{"docs":{},"。":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"选":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"值":{"docs":{},"(":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},"，":{"docs":{},"将":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"比":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"小":{"docs":{},"的":{"docs":{},"放":{"docs":{},"在":{"docs":{},"前":{"docs":{},"面":{"docs":{},"，":{"docs":{},"比":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"大":{"docs":{},"的":{"docs":{},"放":{"docs":{},"在":{"docs":{},"后":{"docs":{},"面":{"docs":{},"，":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"放":{"docs":{},"中":{"docs":{},"间":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"归":{"docs":{},"并":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"统":{"docs":{},"计":{"docs":{},"逆":{"docs":{},"序":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"(":{"docs":{},"大":{"docs":{},")":{"docs":{},"元":{"docs":{},"素":{"docs":{},"放":{"docs":{},"到":{"docs":{},"排":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"起":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"再":{"docs":{},"从":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"元":{"docs":{},"素":{"docs":{},"中":{"docs":{},"继":{"docs":{},"续":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"最":{"docs":{},"小":{"docs":{},"(":{"docs":{},"大":{"docs":{},")":{"docs":{},"元":{"docs":{},"素":{"docs":{},"放":{"docs":{},"到":{"docs":{},"已":{"docs":{},"排":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"直":{"docs":{},"到":{"docs":{},"排":{"docs":{},"序":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"实":{"docs":{},"现":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"一":{"docs":{},"张":{"docs":{},"连":{"docs":{},"通":{"docs":{},"的":{"docs":{},"无":{"docs":{},"向":{"docs":{},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"和":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"无":{"docs":{},"论":{"docs":{},"删":{"docs":{},"去":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"点":{"docs":{},"（":{"docs":{},"只":{"docs":{},"能":{"docs":{},"删":{"docs":{},"去":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"且":{"docs":{},"不":{"docs":{},"能":{"docs":{},"删":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"和":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"自":{"docs":{},"己":{"docs":{},"）":{"docs":{},"都":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"它":{"docs":{},"们":{"docs":{},"不":{"docs":{},"连":{"docs":{},"通":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"说":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"和":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"条":{"docs":{},"边":{"docs":{},"（":{"docs":{},"只":{"docs":{},"能":{"docs":{},"删":{"docs":{},"去":{"docs":{},"一":{"docs":{},"条":{"docs":{},"）":{"docs":{},"都":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"它":{"docs":{},"们":{"docs":{},"不":{"docs":{},"连":{"docs":{},"通":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"说":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"和":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"有":{"docs":{},"向":{"docs":{},"无":{"docs":{},"环":{"docs":{},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"图":{"docs":{},"中":{"docs":{},"的":{"docs":{},"顶":{"docs":{},"点":{"docs":{},"以":{"docs":{},"线":{"docs":{},"性":{"docs":{},"方":{"docs":{},"式":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"对":{"docs":{},"于":{"docs":{},"任":{"docs":{},"何":{"docs":{},"的":{"docs":{},"顶":{"docs":{},"点":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"到":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"的":{"docs":{},"有":{"docs":{},"向":{"docs":{},"边":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"图":{"docs":{},"$":{"docs":{},"g":{"docs":{},"$":{"docs":{},"中":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"和":{"docs":{},"结":{"docs":{},"点":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"之":{"docs":{},"间":{"docs":{},"若":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"条":{"docs":{},"路":{"docs":{},"，":{"docs":{},"则":{"docs":{},"称":{"docs":{},"结":{"docs":{},"点":{"docs":{},"u":{"docs":{},"和":{"docs":{},"结":{"docs":{},"点":{"docs":{},"v":{"docs":{},"是":{"docs":{},"连":{"docs":{},"通":{"docs":{},"的":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"关":{"docs":{},"链":{"docs":{},"接":{"docs":{"./":{"ref":"./","tf":0.125}}}}},"对":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"!":{"docs":{},"=":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.006565988181221274},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.021608643457382955},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}},"\"":{"0":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"1":{"0":{"2":{"0":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"1":{"1":{"1":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{}},"docs":{}},"2":{"1":{"9":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{}},"docs":{}},"4":{"3":{"2":{"2":{"1":{"9":{"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"0":{"0":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{}},"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"*":{"3":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{}}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{},"y":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"e":{"docs":{},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"d":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"b":{"docs":{},"d":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}}}},"a":{"docs":{},"e":{"docs":{},"b":{"docs":{},"d":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"m":{"docs":{},"o":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}},"单":{"docs":{},"调":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}},"规":{"docs":{},"律":{"docs":{},"\"":{"docs":{},"—":{"docs":{},"—":{"docs":{},"递":{"docs":{},"增":{"docs":{},"（":{"docs":{},"或":{"docs":{},"递":{"docs":{},"减":{"docs":{},"）":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}},"队":{"docs":{},"列":{"docs":{},"\"":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}},"a":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"a":{"docs":{},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"a":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"b":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444}}}},"a":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}},"c":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"\"":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},"*":{"docs":{},"c":{"docs":{},"?":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"e":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}}}}},"e":{"docs":{},"c":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"\"":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"b":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"\"":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"a":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"\"":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"p":{"docs":{},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"w":{"docs":{},"k":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}},"(":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},")":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},")":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"q":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"t":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}},"*":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"a":{"docs":{},"*":{"docs":{},"b":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"?":{"docs":{},"a":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"g":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"t":{"docs":{},"a":{"docs":{},"e":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"\"":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}},":":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"%":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.03636363636363636},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"=":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"(":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"1":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"2":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"*":{"docs":{},"(":{"3":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{},"(":{"3":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{}}}}},"3":{"docs":{},",":{"6":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"4":{"docs":{},"*":{"5":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}},"docs":{}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"5":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},"6":{"docs":{},",":{"9":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"7":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"a":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}},"r":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005152596115735236}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"[":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}}}}},"c":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"g":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}},"a":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}}}},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"d":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007927070947284977},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.011510791366906475},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.010183299389002037},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.014256619144602852},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.015527950310559006},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},")":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}}},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}},"f":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"o":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}},"n":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},"u":{"docs":{},"m":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}}}},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"o":{"1":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"e":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},"p":{"1":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"2":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492}},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004801920768307323}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}}}}}},")":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}}}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}},"!":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}}}}}}}}}}}}}}}},"u":{"docs":{},"f":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},"docs":{}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}},"x":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"(":{"2":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"*":{"3":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{},"(":{"3":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"docs":{}}}},"docs":{},"n":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"(":{"2":{"docs":{},"*":{"3":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{}}},"docs":{}},"b":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}},"k":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"b":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004801920768307323}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},")":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"从":{"docs":{},"两":{"docs":{},"头":{"docs":{},"向":{"docs":{},"中":{"docs":{},"间":{"docs":{},"进":{"docs":{},"行":{"docs":{},"数":{"docs":{},"组":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}}}}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"y":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964}}}},"+":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"x":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}}},"k":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"s":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}},"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"b":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"自":{"docs":{},"定":{"docs":{},"义":{"docs":{},"从":{"docs":{},"小":{"docs":{},"到":{"docs":{},"大":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}},"l":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.00935251798561151},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"右":{"docs":{},"侧":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"o":{"docs":{},"w":{"docs":{},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"v":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"i":{"docs":{},"s":{"docs":{},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}},"u":{"docs":{},"p":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"还":{"docs":{},"原":{"docs":{},"标":{"docs":{},"记":{"docs":{},")":{"docs":{},"；":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"q":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"j":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.012422360248447204}}},"*":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.026920551543007223},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.024154589371980676},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.025210084033613446},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01056338028169014},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.035275465715418154},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.02158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.042150274893097125},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.017777777777777778},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.034229828850855744},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.024691358024691357},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.024703557312252964},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.02097902097902098},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.010183299389002037},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.012219959266802444},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.031446540880503145},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.013636363636363636},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"/":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.006565988181221274},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.01932367149758454},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.01282051282051282},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007134363852556481},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.00794135613927917},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"+":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.014084507042253521},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.015457788347205707},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.01079136690647482},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0171875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.015827338129496403},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.025157232704402517},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.034161490683229816},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"+":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"j":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},"\"":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"=":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}}},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"/":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.006602641056422569},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.004316546762589928},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.012224938875305624},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.017266187050359712},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"*":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"*":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.014492753623188406},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"f":{"docs":{},"i":{"docs":{},"y":{"docs":{},"优":{"docs":{},"化":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"/":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"分":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"/":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"/":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.014672686230248307},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.011818778726198293},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02254428341384863},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.013805522208883553},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01056338028169014},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.017043202536662704},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.01079136690647482},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.011606597434331093},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.011522633744855968},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.01383399209486166},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.013238289205702648},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.016293279022403257},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.025210084033613446},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.031055900621118012},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}},"从":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"加":{"docs":{},"上":{"docs":{},"（":{"docs":{},"还":{"docs":{},"原":{"docs":{},"标":{"docs":{},"记":{"docs":{},"）":{"docs":{},"就":{"docs":{},"是":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}},"=":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.017114914425427872},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"=":{"0":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.023702031602708805},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0551543007222587},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02254428341384863},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.07983193277310924},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.03424657534246575},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.056338028169014086},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.08012820512820513},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.07792207792207792},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.1111111111111111},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.05866032500990884},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0618705035971223},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.05192425167990226},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.057777777777777775},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.04645476772616137},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.03621399176954732},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.040513833992094864},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.06853146853146853},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0703125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.051798561151079135},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.10488798370672098},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.032586558044806514},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.12605042016806722},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.050314465408805034},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.14285714285714285},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.07727272727272727},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.08875739644970414}},"=":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.012004801920768308},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.016025641025641024},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.013476020610384463},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.01316872427983539},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.009881422924901186},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.025210084033613446},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}},">":{"1":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"2":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093}}},"3":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.006993006993006993},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0140625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.013636363636363636}},"=":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"中":{"docs":{},"值":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"右":{"docs":{},"中":{"docs":{},"值":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},">":{"docs":{},"=":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.013636363636363636}}}}},"@":{"docs":{},"l":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.011272141706924315},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007134363852556481},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0177153329260843},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.014814814814814815},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.014669926650366748},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.01646090534979424},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.01383399209486166},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.011188811188811189},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489}}}}}}}}},"[":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}}}},"2":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},",":{"1":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}},"docs":{}}},"docs":{}}},"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"1":{"0":{"0":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"5":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"6":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"8":{"9":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"docs":{}},"9":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"9":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},",":{"1":{"0":{"1":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964}}}},"1":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"2":{"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{}},"3":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{}},"4":{"1":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"2":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"5":{"5":{"docs":{},"]":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"docs":{}},"6":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"8":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"docs":{}}},"2":{"0":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}},"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"3":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"3":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"docs":{}}},"docs":{}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}}},"3":{"docs":{},",":{"1":{"2":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{}}},"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"4":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188}}}}},"docs":{}}},"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}}}}}}}}}}},"]":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}},"4":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"5":{"docs":{},"]":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}},",":{"9":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"8":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}},"#":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"#":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"7":{"docs":{},",":{"docs":{},"#":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{}}}}}}}},"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"docs":{}}},"docs":{}}}}}}},"]":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},".":{"docs":{},".":{"docs":{},"n":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"2":{"0":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"8":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}},"9":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"1":{"0":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"5":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"2":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"5":{"docs":{},"]":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"3":{"2":{"docs":{},"]":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"4":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}},"4":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{}},"7":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"9":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"docs":{}},"8":{"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}}}}}}}}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"3":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"7":{"docs":{},",":{"1":{"0":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"docs":{}}},"7":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}},"3":{"0":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{}},"1":{"5":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"4":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"9":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"5":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{},",":{"0":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}}}}}}}}}}}},"5":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"docs":{}}}}}}}}}}}}},"2":{"docs":{},",":{"0":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"1":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"docs":{}}}}}}}},"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"5":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{}}},"6":{"docs":{},",":{"9":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"4":{"0":{"2":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{}},"1":{"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{}},"2":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"docs":{}},"3":{"8":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"docs":{}},"6":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"9":{"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{},",":{"1":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},"3":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"5":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"4":{"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{}},"docs":{},",":{"2":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}},"6":{"8":{"4":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"5":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"docs":{}},"9":{"5":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}},"7":{"0":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"docs":{}},"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"5":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"6":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"7":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"8":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"9":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{}},"8":{"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"8":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"9":{"0":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"5":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},",":{"2":{"0":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"3":{"docs":{},",":{"1":{"5":{"docs":{},",":{"2":{"0":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"4":{"docs":{},",":{"9":{"docs":{},",":{"8":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}}},"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695}},"\"":{"docs":{},"m":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},".":{"docs":{},"q":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"q":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"[":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"docs":{}}},"docs":{}}}}},"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"docs":{}}},"2":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}},"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}},"docs":{}}},"2":{"docs":{},"]":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}}}}},"docs":{}}},"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444}}}}}},",":{"docs":{},"r":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}},"s":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"s":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"a":{"1":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"2":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.02727272727272727},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},";":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}},"g":{"docs":{},"c":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"v":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.014388489208633094},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374}},"(":{"0":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}},"i":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"'":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"?":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}},"n":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},"s":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"s":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}},".":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"[":{"docs":{},"i":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.013333333333333334}}}}}}}},"p":{"docs":{},"p":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}},"a":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"i":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"r":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.004359889021006738}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.004359889021006738}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005152596115735236},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.004359889021006738}}}}}}}}}},"a":{"docs":{},"y":{"1":{"4":{"1":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"3":{"1":{"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.03611738148984198},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.019817677368212445},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.015107913669064749},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.012217470983506415},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856}}}}}}}}}}}}},"[":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"e":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}},"s":{"3":{"5":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"a":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761}},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"'":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}},"docs":{},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}}},"j":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}},"l":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"r":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},",":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005152596115735236},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007927070947284977}}},"}":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007927070947284977}}}}},"e":{"docs":{},":":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"a":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711}},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"(":{"docs":{},"t":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}},"o":{"docs":{},"c":{"docs":{},"i":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.037037037037037035}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"i":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"k":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}}}}}}},"c":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"m":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}},"u":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"[":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"i":{"docs":{},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"x":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"docs":{},"i":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},";":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}},"b":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"路":{"docs":{},"径":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"为":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"位":{"docs":{},"置":{"docs":{},"添":{"docs":{},"加":{"docs":{},"新":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"i":{"docs":{},"c":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"r":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375}},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"e":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"?":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},":":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}},":":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"i":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.012422360248447204}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"\"":{"1":{"2":{"3":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"docs":{}},"docs":{}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"docs":{}}}}}}}}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"2":{"3":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}}}}}}}},"{":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}}}}}}}}}}}}}}},"i":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.00900360144057623},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.007900677200902935},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.050359712230215826},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"[":{"9":{"docs":{},"]":{"docs":{},"[":{"1":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}}},"docs":{}},"docs":{}}}},"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"n":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}}}},"m":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}},"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}}}}},"x":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"y":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.009192383453709783}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},">":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"'":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"f":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}},"c":{"docs":{},"c":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}},")":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.023668639053254437}},";":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}},";":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}},"d":{"1":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"2":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"[":{"docs":{},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"]":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"i":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.01932367149758454},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.044444444444444446},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}},"e":{"docs":{},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},")":{"docs":{},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},"g":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}},"docs":{}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"k":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"f":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{},"i":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.007905138339920948}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}}}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764}},"e":{"docs":{},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}},"i":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}},"w":{"docs":{},"n":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"s":{"docs":{},"u":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"f":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},"s":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}},"n":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}},"（":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"）":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}},"）":{"docs":{},"；":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}}}}}},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}},"[":{"docs":{},"u":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}}},"：":{"docs":{},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"时":{"docs":{},"结":{"docs":{},"点":{"docs":{},"u":{"docs":{},"被":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"的":{"docs":{},"次":{"docs":{},"序":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"docs":{}},"p":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.012949640287769784}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"docs":{}}}},"docs":{},"i":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"[":{"docs":{},"j":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}},":":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"j":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"m":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}},"n":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.006772009029345372},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.010505581089954037},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}},"{":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},".":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.024830699774266364},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02576489533011272},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.06474820143884892},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01232394366197183},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245}},"s":{"docs":{},"'":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}}}},"v":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}}}}},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"}":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594}},")":{"docs":{},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},":":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}},"i":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"s":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.011510791366906475},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.00855222968845449},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01037037037037037},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.012949640287769784},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.012219959266802444},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"p":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}},"p":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01037037037037037},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.008633093525179856},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},"u":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.011272141706924315},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"y":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}},"d":{"docs":{},"g":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.019178082191780823},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"e":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}},"docs":{}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}},"s":{"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}},"i":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093}}}}}}},"l":{"docs":{},"s":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01037037037037037},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}}}}}}}}},"x":{"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}},"y":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"c":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.018329938900203666}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}},"扩":{"docs":{},"展":{"docs":{},"方":{"docs":{},"式":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"m":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"a":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"r":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.012845849802371542}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}}},"o":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}}}},"a":{"docs":{},"g":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}},"g":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"l":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}}}},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},"docs":{},"i":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"l":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"n":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.015068493150684932},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.00855222968845449},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.012345679012345678},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.009881422924901186},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.010071942446043165},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.01643835616438356},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}},"i":{"docs":{},"c":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}},"i":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.00691699604743083}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"docs":{}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474}}}}}}},"n":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"a":{"docs":{},"p":{"2":{"2":{"0":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.012219959266802444},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}},"t":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}},"docs":{}}}}}}}}}}},"docs":{}}},"u":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}},"c":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}},"b":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}}}}}}}},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}},"'":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}},"/":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"t":{"docs":{},":":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"m":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"、":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"、":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"、":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"、":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"p":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"(":{"0":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}},"s":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"o":{"docs":{},"/":{"docs":{},"b":{"docs":{},"v":{"1":{"docs":{},"w":{"docs":{},"j":{"4":{"1":{"1":{"docs":{},"n":{"7":{"docs":{},"u":{"8":{"docs":{},"?":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"=":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"&":{"docs":{},"s":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{},"=":{"1":{"5":{"9":{"9":{"6":{"4":{"2":{"0":{"8":{"6":{"7":{"6":{"9":{"9":{"7":{"9":{"3":{"9":{"8":{"6":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}},"s":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"j":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.03361344537815126}},"d":{"docs":{},"k":{"1":{"1":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964}}},"docs":{}},"docs":{}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},".":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"s":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}},"中":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"默":{"docs":{},"认":{"docs":{},"实":{"docs":{},"现":{"docs":{},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"。":{"docs":{"01-data-structrue/basic/07-heap/heap.html":{"ref":"01-data-structrue/basic/07-heap/heap.html","tf":0.5}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444}},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"o":{"docs":{},"b":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},";":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}},"k":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.014842300556586271},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"e":{"docs":{},"y":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.06878306878306878}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.010071942446043165}},"{":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872}}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872}},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"{":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426}}}},"n":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"输":{"docs":{},"出":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"m":{"docs":{},"p":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":10.016806722689076}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"用":{"docs":{},"于":{"docs":{},"解":{"docs":{},"决":{"docs":{},"模":{"docs":{},"式":{"docs":{},"串":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}},"l":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005548949663099485},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.008888888888888889}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"=":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0031708283789139914},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}}},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.008633093525179856}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01037037037037037},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"s":{"docs":{},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"都":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"一":{"docs":{},"轮":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"e":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}}}}}},"a":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514}}},"f":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"i":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"s":{"docs":{},"t":{"9":{"1":{"2":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.02144469525959368},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.015758371634931056},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.017114914425427872},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.011818778726198293},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.011818778726198293},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"docs":{}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.01247537754432042},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.005497861942577886}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}},"s":{"2":{"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"8":{"8":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},">":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.009876543209876543},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.007128309572301426}}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"'":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"n":{"docs":{},"k":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.030203545633617858},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.014050091631032376}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764}},"(":{"docs":{},")":{"docs":{},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"docs":{}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"docs":{}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"docs":{}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"docs":{}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}},"docs":{}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.006109979633401222}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}},"e":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},"a":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"u":{"docs":{},"j":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"o":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"j":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875}}}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"(":{"docs":{},"v":{"docs":{},")":{"docs":{},"$":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"u":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"割":{"docs":{},"点":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"把":{"docs":{},"边":{"docs":{},"从":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"一":{"docs":{},"个":{"docs":{},"个":{"docs":{},"取":{"docs":{},"出":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"了":{"docs":{},"边":{"docs":{},"$":{"docs":{},"(":{"docs":{},"u":{"docs":{},",":{"docs":{},"v":{"docs":{},")":{"docs":{},"$":{"docs":{},"，":{"docs":{},"取":{"docs":{},"出":{"docs":{},"的":{"docs":{},"这":{"docs":{},"些":{"docs":{},"边":{"docs":{},"与":{"docs":{},"其":{"docs":{},"关":{"docs":{},"联":{"docs":{},"的":{"docs":{},"点":{"docs":{},"，":{"docs":{},"组":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"。":{"docs":{},"割":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"属":{"docs":{},"于":{"docs":{},"多":{"docs":{},"个":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"点":{"docs":{},"和":{"docs":{},"每":{"docs":{},"条":{"docs":{},"边":{"docs":{},"只":{"docs":{},"属":{"docs":{},"于":{"docs":{},"且":{"docs":{},"属":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}},"[":{"docs":{},"u":{"docs":{},"]":{"docs":{},"：":{"docs":{},"以":{"docs":{},"u":{"docs":{},"为":{"docs":{},"根":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"d":{"docs":{},"f":{"docs":{},"n":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}},"n":{"docs":{},"g":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.05454545454545454}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.013333333333333334},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0109375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.018867924528301886}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}},"n":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}}}},"g":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"n":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"a":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}}}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.009512485136741973},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"[":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356}}}}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}}},"c":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},"m":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}},"m":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.010869565217391304},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"o":{"docs":{},"d":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818}},"i":{"docs":{},"f":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}}}}},")":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.022727272727272728}}},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.022727272727272728}}}},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"r":{"docs":{},"i":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"s":{"docs":{},"遍":{"docs":{},"历":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"v":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}}}},"l":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"a":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"p":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.1111111111111111},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},"l":{"docs":{},"c":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}},"x":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"l":{"docs":{},"c":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}},"n":{"1":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"docs":{}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"p":{"docs":{},"[":{"2":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}},"docs":{}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},":":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},"(":{"docs":{},"a":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}},"c":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0171875}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"x":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}},"l":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},"e":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"k":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"n":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":10}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},"?":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"i":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}},"a":{"docs":{},"n":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}},"r":{"docs":{},"g":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.004316546762589928}}}}}}},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}},"i":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},"u":{"docs":{},"m":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.007407407407407408},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"]":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}}}},"d":{"1":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"2":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.005152596115735236},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.01223021582733813}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"d":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474}}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"j":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}},"j":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"x":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}},"o":{"1":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"(":{"docs":{},"o":{"2":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},"docs":{}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"2":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"s":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.014388489208633094},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}},"(":{"1":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622}},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"在":{"docs":{},"个":{"docs":{},"别":{"docs":{},"时":{"docs":{},"刻":{"docs":{},"才":{"docs":{},"会":{"docs":{},"退":{"docs":{},"化":{"docs":{},"为":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}},"docs":{},"n":{"2":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"。":{"docs":{},"在":{"docs":{},"平":{"docs":{},"时":{"docs":{},"的":{"docs":{},"业":{"docs":{},"务":{"docs":{},"开":{"docs":{},"发":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"编":{"docs":{},"程":{"docs":{},"语":{"docs":{},"言":{"docs":{},"提":{"docs":{},"供":{"docs":{},"的":{"docs":{},"容":{"docs":{},"器":{"docs":{},"类":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"特":{"docs":{},"别":{"docs":{},"底":{"docs":{},"层":{"docs":{},"的":{"docs":{},"开":{"docs":{},"发":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"使":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"更":{"docs":{},"合":{"docs":{},"适":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"把":{"docs":{},"耗":{"docs":{},"时":{"docs":{},"多":{"docs":{},"的":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"均":{"docs":{},"摊":{"docs":{},"到":{"docs":{},"其":{"docs":{},"他":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"上":{"docs":{},"，":{"docs":{},"平":{"docs":{},"均":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"的":{"docs":{},"耗":{"docs":{},"时":{"docs":{},"就":{"docs":{},"接":{"docs":{},"近":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"建":{"docs":{},"树":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"²":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964}}}}}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.014388489208633094}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"b":{"docs":{},"j":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.006772009029345372},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"]":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"t":{"docs":{},"o":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}}},"e":{"docs":{},"]":{"docs":{},":":{"1":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"c":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"?":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"l":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"u":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005909389363099146},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0047562425683709865},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.010071942446043165},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.011606597434331093},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0171875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},"(":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.01932367149758454},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"i":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}},"p":{"1":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"2":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0109375}},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.022573363431151242},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.050359712230215826},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.031746031746031744}}}}}}}},"_":{"2":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"3":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"4":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"docs":{}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178}},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}},"y":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"i":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}},"i":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.018867924528301886}},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0023781212841854932},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},":":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.009790209790209791}},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}},"s":{"docs":{},"至":{"docs":{},"少":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"s":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"u":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}},"g":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}},"o":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.006565988181221274},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006108735491753207}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"s":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}},"l":{"docs":{},"l":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"y":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"p":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225}}}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"u":{"docs":{},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.005035971223021582},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}}}}}}}}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"e":{"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.011404561824729893},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581}}},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}}},"v":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},"s":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581}}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}}}}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.007222586999343401},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.005402160864345739},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.028169014084507043},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.01282051282051282},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.018930041152263374},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.010869565217391304},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.05295315682281059},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.010183299389002037},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.010071942446043165}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}}}}}}},"e":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.01775147928994083}}}}},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.03837471783295711},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.026920551543007223},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02254428341384863},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.02100840336134454},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.047619047619047616},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.015068493150684932},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01936619718309859},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.028846153846153848},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.00794135613927917},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.023421588594704685},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.022727272727272728},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.03550295857988166}}}}}},"r":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"s":{"docs":{},"h":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.014492753623188406}},"(":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}}}},"x":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}}}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"t":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"(":{"docs":{},"k":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}},"l":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},".":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"/":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}}}},"r":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0049382716049382715}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"m":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"i":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}}}}}}}}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},")":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},")":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}},"'":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},":":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"r":{"1":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"2":{"docs":{},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01037037037037037},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01056338028169014},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"k":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"i":{"docs":{},"n":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.03636363636363636}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"o":{"docs":{},"v":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}}}}}}}}},"k":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.013333333333333334}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.007407407407407408},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"e":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.00411522633744856}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"v":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02158273381294964},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},"[":{"docs":{},"k":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"路":{"docs":{},"径":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.012345679012345678},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818}}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"e":{"docs":{},"r":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"1":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"docs":{},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.009029345372460496},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.015101772816808929},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02576489533011272},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.023287671232876714},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01232394366197183},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.022435897435897436},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.019024970273483946},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.017985611510791366},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.010384850335980453},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.012224938875305624},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.01728395061728395},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.010869565217391304},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.011188811188811189},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.016293279022403257},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.04142011834319527}},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.01580135440180587},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.006565988181221274},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.050359712230215826},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.042328042328042326}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}},":":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}}}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514}}}}}}},"e":{"docs":{},"i":{"docs":{},"v":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"d":{"docs":{},"u":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"n":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}},"i":{"docs":{},"x":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"f":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"a":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"e":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"l":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"中":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"不":{"docs":{},"再":{"docs":{},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{},"（":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{},"（":{"docs":{},"包":{"docs":{},"含":{"docs":{},"了":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"转":{"docs":{},"而":{"docs":{},"不":{"docs":{},"断":{"docs":{},"增":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"e":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.007334963325183374}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"o":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"o":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0078031212484993995},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004201680672268907},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.022435897435897436}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.007913669064748202}}}}},"w":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},",":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}},";":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.00909090909090909}}}},"r":{"docs":{},"s":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}},"s":{"docs":{},"e":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}},"a":{"docs":{},"d":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},"[":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356}}}}}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}},"g":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"t":{"docs":{},"a":{"docs":{},"e":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"s":{"1":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},",":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}}}}}},"2":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},")":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}}}}}},"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.016296296296296295},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.009375},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}}}}},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.006772009029345372},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.013669064748201438},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}},",":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.09352517985611511},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},",":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}},">":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"docs":{}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{},"v":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"e":{"docs":{},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},")":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"t":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"l":{"docs":{},"f":{"4":{"9":{"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"h":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"r":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"o":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"n":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}},"g":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"i":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}},"z":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892}},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444}}}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"(":{"docs":{},")":{"docs":{},"{":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}},"?":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}},"g":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"f":{"docs":{},"t":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"2":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"e":{"docs":{},"v":{"docs":{},"e":{"2":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}}}}},"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004801920768307323},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00684931506849315},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.006341656757827983},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.011510791366906475},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.014660965180207697},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.023045267489711935},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.009881422924901186},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.008391608391608392},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"?":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"v":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"e":{"docs":{},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}},"r":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}},"docs":{}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.013079667063020214},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.017266187050359712},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004276114844227245}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.004359889021006738}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},"e":{"docs":{},"d":{"3":{"4":{"4":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{},"?":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"i":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.013544018058690745},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.011162179908076166},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.02877697841726619},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.031746031746031744}}}},"a":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"?":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.009029345372460496},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}},"c":{"docs":{},"k":{"1":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}},"2":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.027375201288244767},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.011131725417439703},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"{":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.011272141706924315}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356}}},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.012987012987012988},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}},"p":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818}}}}}}},"r":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.008888888888888889},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}}}},"o":{"docs":{},"o":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"d":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"r":{"1":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}},"2":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"{":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.023703703703703703},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.01875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.017266187050359712},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.018867924528301886},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.018633540372670808}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},",":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"'":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"其":{"docs":{},"它":{"docs":{},"类":{"docs":{},"型":{"docs":{},"可":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"e":{"docs":{},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.008893280632411068}},"s":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}}}},"e":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"u":{"docs":{},"b":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01925925925925926},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.018867924528301886}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0140625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},"'":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.006993006993006993},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},":":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"s":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"m":{"2":{"8":{"3":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01936619718309859},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}},"docs":{}}}}}}},"s":{"1":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"2":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.007042253521126761}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.008893280632411068}}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.005761316872427984}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}}}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}},"z":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}},"i":{"docs":{},"n":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.01232394366197183},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0035671819262782403}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"[":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}},"b":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.006211180124223602}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}},"\"":{"docs":{},"#":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}},"$":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},")":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}},"c":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"docs":{},"i":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"docs":{}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.010071942446043165}},"s":{"docs":{},":":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.010071942446043165}}}}}}},"c":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}}}}}},"s":{"docs":{},"z":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"[":{"docs":{},"s":{"docs":{},"c":{"docs":{},"c":{"docs":{},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"x":{"docs":{},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.011188811188811189}}}}}},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0044444444444444444},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},";":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"i":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},")":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}}}}}}}}}}},":":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.003386004514672686}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581}},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"t":{"1":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0078125}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}},"2":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}},"docs":{}}}},"h":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},"i":{"docs":{},"s":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}},"docs":{}},"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}},"e":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547}}}}}},"v":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}},"o":{"docs":{},"w":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}},"p":{"docs":{},"o":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"i":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"x":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"g":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},":":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.004514672686230248},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"s":{"docs":{},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}},"e":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"a":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},":":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}},"n":{"docs":{},"k":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"m":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"o":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077}}},":":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"(":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"{":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}},"p":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00966183574879227},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.00927643784786642},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}}},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"y":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"{":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.016293279022403257}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.050359712230215826},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0013131976362442547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.011834319526627219}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003601440576230492}}}}}},"p":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.005594405594405594}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0078031212484993995},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},".":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0024009603841536613}}},":":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.021608643457382955},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499}},"e":{"docs":{},"(":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}},")":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"e":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.035256410256410256}},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}}}},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.028846153846153848}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}}}},"[":{"2":{"6":{"docs":{},"]":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}},"docs":{}},"docs":{},"]":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"y":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.004316546762589928}},"e":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"s":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"u":{"docs":{},"l":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.007194244604316547}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0035971223021582736},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.009773976786805132},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.008633093525179856}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.007900677200902935},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"a":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"i":{"docs":{},"l":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.004886988393402566}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},"g":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}}},"k":{"docs":{},"e":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.020366598778004074}},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},",":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}},".":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.008146639511201629}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.011510791366906475},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.007913669064748202},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},",":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"j":{"docs":{},"a":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222}}}}}}}}}}}}},"e":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"s":{"docs":{},"k":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.004073319755600814}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},"/":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.009316770186335404}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}}}}},"u":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},"v":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}}}}}}}}},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},"_":{"2":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{},"k":{"docs":{},"$":{"docs":{},"，":{"docs":{},"按":{"docs":{},"增":{"docs":{},"量":{"docs":{},"序":{"docs":{},"列":{"docs":{},"个":{"docs":{},"数":{"docs":{},"k":{"docs":{},"对":{"docs":{},"序":{"docs":{},"列":{"docs":{},"进":{"docs":{},"行":{"docs":{},"k":{"docs":{},"趟":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"$":{"docs":{},"t":{"docs":{},"_":{"docs":{},"k":{"docs":{},"=":{"1":{"docs":{},"$":{"docs":{},"将":{"docs":{},"整":{"docs":{},"个":{"docs":{},"序":{"docs":{},"列":{"docs":{},"作":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"表":{"docs":{},"来":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}},"u":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}},"s":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.01932367149758454},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0036652412950519244},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"p":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},":":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"docs":{},"i":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"]":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}},"f":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521}}}}}}},"e":{"docs":{},"r":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}},"(":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}}}}}}}}}}},"t":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}},"q":{"docs":{},"u":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.012224938875305624},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}},"e":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094}}}}}}}},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"v":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.021164021164021163},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}},"a":{"docs":{},"l":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.005252790544977019},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},")":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}},"u":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.0056433408577878106},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003939592908732764},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.06349206349206349},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}},"e":{"docs":{},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.010582010582010581}}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}},",":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},",":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.004596191726854892},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.005402160864345739},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}},"i":{"docs":{},"d":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},".":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},".":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.015873015873015872}}}},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124}}}}}},"c":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"e":{"docs":{},"d":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0024691358024691358},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}},"n":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}},"[":{"docs":{},"u":{"docs":{},"]":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.010158013544018058},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.00900360144057623},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.008802816901408451},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.004359889021006738},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603}}},"]":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"s":{"docs":{},"a":{"docs":{},".":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.007128309572301426}}},";":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.010183299389002037}}}},"w":{"docs":{},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.021164021164021163}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{},"{":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}},"t":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"y":{"docs":{},"?":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},":":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.011851851851851851}},",":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.007202881152460984},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"t":{"docs":{},"e":{"docs":{},"r":{"1":{"5":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0055658627087198514},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711}},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}}}},"y":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.009779951100244499}}}},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}},"2":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}},"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.00641025641025641},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}},")":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.009615384615384616},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},",":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}}}}}}}}}}}},":":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"z":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.002257336343115124},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.002443494196701283}},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},"e":{"docs":{},"s":{"2":{"8":{"7":{"docs":{},".":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}},"]":{"docs":{},":":{"0":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}}}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},"=":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},".":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"{":{"0":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.005928853754940711},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}}},"1":{"docs":{},",":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.003952569169960474},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}},"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.016930022573363433},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.023637557452396585},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.02254428341384863},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.06182472989195678},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.04794520547945205},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.03873239436619718},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.057692307692307696},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.055658627087198514},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.044444444444444446},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.03963535473642489},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.03525179856115108},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.028100183262064753},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.01925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.034229828850855744},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.02962962962962963},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0266798418972332},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.032167832167832165},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0296875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.02158273381294964},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.04378818737270876},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.028513238289205704},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.058823529411764705},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.05660377358490566},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.037267080745341616},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.06363636363636363},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.0650887573964497}},"}":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007927070947284977}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}}}},"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"|":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0026263952724885093},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00821917808219178},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.00528169014084507},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0027744748315497426},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0057553956834532375},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.006719609040928528},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.005925925925925926},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}},"|":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.003282994090610637},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.003001200480192077},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0037105751391465678},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.007134363852556481},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0030543677458766036},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.011857707509881422},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0046875},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}},"}":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.014672686230248307},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.03545633617859488},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.01610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.06362545018007203},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.049315068493150684},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.02112676056338028},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.04487179487179487},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0575139146567718},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.06666666666666667},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.038446294094332145},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.03237410071942446},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.02504581551618815},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.017777777777777778},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.044009779951100246},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.023045267489711935},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.023715415019762844},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.022377622377622378},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.025},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.04073319755600815},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.03054989816700611},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.07563025210084033},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.03773584905660377},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.043478260869565216},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.06363636363636363},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.047337278106508875}},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"从":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"删":{"docs":{},"除":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},",":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"删":{"docs":{},"除":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}}}}}}}}}}}},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"某":{"docs":{},"一":{"docs":{},"节":{"docs":{},"点":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"所":{"docs":{},"经":{"docs":{},"过":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"连":{"docs":{},"接":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"即":{"docs":{},"为":{"docs":{},"该":{"docs":{},"节":{"docs":{},"点":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"；":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"往":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"比":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"大":{"docs":{},"，":{"docs":{},"就":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{},"重":{"docs":{},"复":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"都":{"docs":{},"从":{"docs":{},"最":{"docs":{},"后":{"docs":{},"累":{"docs":{},"积":{"docs":{},"减":{"docs":{},"少":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"，":{"docs":{},"图":{"docs":{},"书":{"docs":{},"馆":{"docs":{},"丢":{"docs":{},"了":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}},"下":{"docs":{},"标":{"docs":{},"索":{"docs":{},"引":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0050916496945010185}}}}},"docs":{}}}}}},"优":{"docs":{},"化":{"docs":{},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"没":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"只":{"docs":{},"是":{"docs":{},"被":{"docs":{},"当":{"docs":{},"作":{"docs":{},"一":{"docs":{},"个":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"集":{"docs":{},"合":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"将":{"docs":{},"某":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"则":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"第":{"docs":{},"k":{"docs":{},"位":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"搬":{"docs":{},"移":{"docs":{},"到":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"，":{"docs":{},"把":{"docs":{},"新":{"docs":{},"元":{"docs":{},"素":{"docs":{},"直":{"docs":{},"接":{"docs":{},"放":{"docs":{},"入":{"docs":{},"到":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"的":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"真":{"docs":{},"正":{"docs":{},"地":{"docs":{},"搬":{"docs":{},"移":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"记":{"docs":{},"录":{"docs":{},"数":{"docs":{},"据":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"删":{"docs":{},"除":{"docs":{},"。":{"docs":{},"当":{"docs":{},"数":{"docs":{},"组":{"docs":{},"没":{"docs":{},"有":{"docs":{},"更":{"docs":{},"多":{"docs":{},"空":{"docs":{},"间":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"据":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"再":{"docs":{},"触":{"docs":{},"发":{"docs":{},"执":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"真":{"docs":{},"正":{"docs":{},"地":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"大":{"docs":{},"大":{"docs":{},"减":{"docs":{},"少":{"docs":{},"了":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"导":{"docs":{},"致":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"搬":{"docs":{},"移":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"修":{"docs":{},"改":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"索":{"docs":{},"引":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"为":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"删":{"docs":{},"除":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}},"线":{"docs":{},"索":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"动":{"docs":{},"态":{"docs":{},"数":{"docs":{},"组":{"docs":{},"：":{"docs":{},"均":{"docs":{},"摊":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"等":{"docs":{},"于":{"docs":{},"最":{"docs":{},"好":{"docs":{},"情":{"docs":{},"况":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"在":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"地":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"从":{"docs":{},"后":{"docs":{},"先":{"docs":{},"前":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},"理":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}},"参":{"docs":{},"考":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}},"数":{"docs":{},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"状":{"docs":{},"态":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}},"向":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"后":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}},"基":{"docs":{},"本":{"docs":{},"构":{"docs":{},"造":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"数":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}},"要":{"docs":{},"求":{"docs":{},"数":{"docs":{},"据":{"docs":{},"可":{"docs":{},"以":{"docs":{},"分":{"docs":{},"割":{"docs":{},"出":{"docs":{},"独":{"docs":{},"立":{"docs":{},"的":{"docs":{},"“":{"docs":{},"位":{"docs":{},"”":{"docs":{},"来":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{},"位":{"docs":{},"之":{"docs":{},"间":{"docs":{},"有":{"docs":{},"递":{"docs":{},"进":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"即":{"docs":{},"若":{"docs":{},"数":{"docs":{},"据":{"docs":{},"a":{"docs":{},"的":{"docs":{},"高":{"docs":{},"位":{"docs":{},"比":{"docs":{},"数":{"docs":{},"据":{"docs":{},"b":{"docs":{},"的":{"docs":{},"高":{"docs":{},"位":{"docs":{},"大":{"docs":{},"，":{"docs":{},"那":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"低":{"docs":{},"位":{"docs":{},"就":{"docs":{},"不":{"docs":{},"用":{"docs":{},"比":{"docs":{},"较":{"docs":{},"了":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"一":{"docs":{},"位":{"docs":{},"数":{"docs":{},"据":{"docs":{},"范":{"docs":{},"围":{"docs":{},"不":{"docs":{},"能":{"docs":{},"太":{"docs":{},"大":{"docs":{},"，":{"docs":{},"要":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"线":{"docs":{},"性":{"docs":{},"算":{"docs":{},"法":{"docs":{},"来":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"增":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}},"量":{"docs":{},"序":{"docs":{},"列":{"docs":{},"每":{"docs":{},"次":{"docs":{},"减":{"docs":{},"半":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"你":{"docs":{},"了":{"docs":{},"解":{"docs":{},"j":{"docs":{},"v":{"docs":{},"m":{"docs":{},"，":{"docs":{},"你":{"docs":{},"会":{"docs":{},"发":{"docs":{},"现":{"docs":{},"这":{"docs":{},"就":{"docs":{},"是":{"docs":{},"j":{"docs":{},"v":{"docs":{},"m":{"docs":{},"标":{"docs":{},"记":{"docs":{},"清":{"docs":{},"除":{"docs":{},"垃":{"docs":{},"圾":{"docs":{},"回":{"docs":{},"收":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"核":{"docs":{},"心":{"docs":{},"思":{"docs":{},"想":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"为":{"docs":{},"空":{"docs":{},"时":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"正":{"docs":{},"常":{"docs":{},"工":{"docs":{},"作":{"docs":{},"？":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"时":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"正":{"docs":{},"常":{"docs":{},"工":{"docs":{},"作":{"docs":{},"？":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"时":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"正":{"docs":{},"常":{"docs":{},"工":{"docs":{},"作":{"docs":{},"？":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"排":{"docs":{},"序":{"docs":{},"要":{"docs":{},"求":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"；":{"docs":{},"如":{"docs":{},"果":{"docs":{},"想":{"docs":{},"取":{"docs":{},"出":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"和":{"docs":{},"放":{"docs":{},"入":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"用":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"想":{"docs":{},"插":{"docs":{},"入":{"docs":{},"、":{"docs":{},"删":{"docs":{},"除":{"docs":{},"立":{"docs":{},"即":{"docs":{},"排":{"docs":{},"序":{"docs":{},"或":{"docs":{},"者":{"docs":{},"按":{"docs":{},"照":{"docs":{},"一":{"docs":{},"定":{"docs":{},"规":{"docs":{},"则":{"docs":{},"排":{"docs":{},"序":{"docs":{},"可":{"docs":{},"以":{"docs":{},"选":{"docs":{},"用":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"。":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"排":{"docs":{},"序":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"把":{"docs":{},"数":{"docs":{},"组":{"docs":{},"从":{"docs":{},"中":{"docs":{},"间":{"docs":{},"分":{"docs":{},"成":{"docs":{},"前":{"docs":{},"后":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"对":{"docs":{},"前":{"docs":{},"后":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"分":{"docs":{},"别":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"再":{"docs":{},"将":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"合":{"docs":{},"并":{"docs":{},"在":{"docs":{},"一":{"docs":{},"起":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"整":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"就":{"docs":{},"都":{"docs":{},"有":{"docs":{},"序":{"docs":{},"了":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}},"数":{"docs":{},"组":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":10.001128668171557}},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"线":{"docs":{},"性":{"docs":{},"表":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"。":{"docs":{},"它":{"docs":{},"用":{"docs":{},"一":{"docs":{},"组":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"内":{"docs":{},"存":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"一":{"docs":{},"组":{"docs":{},"具":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"一":{"docs":{},"块":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"内":{"docs":{},"存":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"相":{"docs":{},"同":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"一":{"docs":{},"组":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"特":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"支":{"docs":{},"持":{"docs":{},"随":{"docs":{},"机":{"docs":{},"访":{"docs":{},"问":{"docs":{},"，":{"docs":{},"但":{"docs":{},"插":{"docs":{},"入":{"docs":{},"、":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"也":{"docs":{},"因":{"docs":{},"此":{"docs":{},"变":{"docs":{},"得":{"docs":{},"比":{"docs":{},"较":{"docs":{},"低":{"docs":{},"效":{"docs":{},"，":{"docs":{},"平":{"docs":{},"均":{"docs":{},"情":{"docs":{},"况":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"下":{"docs":{},"标":{"docs":{},"从":{"1":{"docs":{},"开":{"docs":{},"始":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"docs":{}}}}}}}}}},"据":{"docs":{},"移":{"docs":{},"动":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"结":{"docs":{},"构":{"docs":{},"可":{"docs":{},"视":{"docs":{},"化":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"论":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":10.005917159763314}},"是":{"docs":{},"纯":{"docs":{},"粹":{"docs":{},"数":{"docs":{},"学":{"docs":{},"的":{"docs":{},"分":{"docs":{},"支":{"docs":{},"之":{"docs":{},"一":{"docs":{},"，":{"docs":{},"主":{"docs":{},"要":{"docs":{},"研":{"docs":{},"究":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"参":{"docs":{},"数":{"docs":{},"的":{"docs":{},"构":{"docs":{},"造":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"默":{"docs":{},"认":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"容":{"docs":{},"量":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"=":{"1":{"0":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"构":{"docs":{},"造":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"传":{"docs":{},"入":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"容":{"docs":{},"量":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"构":{"docs":{},"造":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"象":{"docs":{},"最":{"docs":{},"好":{"docs":{},"使":{"docs":{},"用":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}},"查":{"docs":{},"找":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"e":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}},"（":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"）":{"docs":{},"：":{"docs":{},"确":{"docs":{},"定":{"docs":{},"某":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"处":{"docs":{},"于":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"子":{"docs":{},"集":{"docs":{},"；":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"等":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}},"等":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}},"等":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}},"等":{"docs":{},"于":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}},"询":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"获":{"docs":{},"取":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"索":{"docs":{},"引":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"的":{"docs":{},"容":{"docs":{},"量":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}},"得":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"第":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"0":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}},"docs":{}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"删":{"docs":{},"除":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}}}}}}},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}},"下":{"docs":{},"次":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"一":{"docs":{},"左":{"docs":{},"一":{"docs":{},"右":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},"匹":{"docs":{},"配":{"docs":{},"串":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}}}},"都":{"docs":{},"是":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562}}},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"$":{"docs":{},"u":{"docs":{},"$":{"docs":{},"在":{"docs":{},"$":{"docs":{},"v":{"docs":{},"$":{"docs":{},"的":{"docs":{},"前":{"docs":{},"面":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}}}}}}}},"题":{"docs":{},"目":{"docs":{"01-data-structrue/basic/01-array/array.html":{"ref":"01-data-structrue/basic/01-array/array.html","tf":0.001128668171557562},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547},"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0019817677368212444},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}},"号":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"意":{"docs":{},"：":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}}},"&":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.01818181818181818}},"&":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004801920768307323},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0074211502782931356},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0032921810699588477},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.006109979633401222},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.01680672268907563}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.027375201288244767},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.009790209790209791},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.012219959266802444}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00644122383252818}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"2":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}},"docs":{}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.004195804195804196}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}},")":{"docs":{},",":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.00322061191626409}}},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}},";":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}},"s":{"docs":{},".":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}},"r":{"docs":{},"i":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804}}},"y":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.007407407407407408}},"s":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"c":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"x":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.008051529790660225},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.004316546762589928},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.02766798418972332},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},")":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.004830917874396135},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.009589041095890411},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},";":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}},".":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"为":{"docs":{},"桥":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}},";":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.001969796454366382},"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.005479452054794521},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}},"不":{"docs":{},"要":{"docs":{},"吝":{"docs":{},"啬":{"docs":{},"使":{"docs":{},"用":{"docs":{},"指":{"docs":{},"针":{"docs":{},"记":{"docs":{},"录":{"docs":{},"。":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"在":{"docs":{},"处":{"docs":{},"理":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"和":{"docs":{},"尾":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"正":{"docs":{},"常":{"docs":{},"工":{"docs":{},"作":{"docs":{},"？":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"面":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"框":{"docs":{},"架":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}},"：":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"实":{"docs":{},"现":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"点":{"docs":{},"修":{"docs":{},"改":{"docs":{},"、":{"docs":{},"区":{"docs":{},"间":{"docs":{},"查":{"docs":{},"询":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}},"调":{"docs":{},"增":{"docs":{},"栈":{"docs":{},"：":{"docs":{},"用":{"docs":{},"于":{"docs":{},"定":{"docs":{},"位":{"docs":{},"左":{"docs":{},"右":{"docs":{},"小":{"docs":{},"于":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":10.001855287569573}},":":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}},"即":{"docs":{},"满":{"docs":{},"足":{"docs":{},"单":{"docs":{},"调":{"docs":{},"性":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"结":{"docs":{},"构":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}},"队":{"docs":{},"列":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":10.022222222222222}},":":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}},"串":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"双":{"docs":{},"链":{"docs":{},"表":{"docs":{},"实":{"docs":{},"现":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":10.000610873549176}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"类":{"docs":{},"型":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"向":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"优":{"docs":{},"化":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"串":{"docs":{},"l":{"docs":{},"c":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"、":{"docs":{},"割":{"docs":{},"点":{"docs":{},"与":{"docs":{},"桥":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"：":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"以":{"docs":{},"下":{"docs":{},"几":{"docs":{},"个":{"docs":{},"边":{"docs":{},"界":{"docs":{},"条":{"docs":{},"件":{"docs":{},"来":{"docs":{},"检":{"docs":{},"查":{"docs":{},"链":{"docs":{},"表":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"否":{"docs":{},"正":{"docs":{},"确":{"docs":{},"：":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":10.001313197636245}},"代":{"docs":{},"码":{"docs":{},"写":{"docs":{},"得":{"docs":{},"好":{"docs":{},"坏":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"人":{"docs":{},"写":{"docs":{},"代":{"docs":{},"码":{"docs":{},"是":{"docs":{},"否":{"docs":{},"够":{"docs":{},"细":{"docs":{},"心":{"docs":{},"，":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"否":{"docs":{},"全":{"docs":{},"面":{"docs":{},"，":{"docs":{},"思":{"docs":{},"维":{"docs":{},"是":{"docs":{},"否":{"docs":{},"缜":{"docs":{},"密":{"docs":{},"。":{"docs":{"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"ref":"01-data-structrue/basic/02-linkedlist/linkedlist.html","tf":0.0006565988181221273}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"分":{"docs":{},"别":{"docs":{},"在":{"docs":{},"两":{"docs":{},"个":{"docs":{},"容":{"docs":{},"器":{"docs":{},"中":{"docs":{},"移":{"docs":{},"动":{"docs":{},"；":{"docs":{},"根":{"docs":{},"据":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"不":{"docs":{},"同":{"docs":{},"，":{"docs":{},"初":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"可":{"docs":{},"能":{"docs":{},"都":{"docs":{},"在":{"docs":{},"头":{"docs":{},"部":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"都":{"docs":{},"在":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"，":{"docs":{},"或":{"docs":{},"一":{"docs":{},"头":{"docs":{},"一":{"docs":{},"尾":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"此":{"docs":{},"，":{"docs":{},"在":{"docs":{},"使":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"和":{"docs":{},"队":{"docs":{},"列":{"docs":{},"时":{"docs":{},"，":{"docs":{},"个":{"docs":{},"人":{"docs":{},"倾":{"docs":{},"向":{"docs":{},"于":{"docs":{},"使":{"docs":{},"用":{"docs":{},"如":{"docs":{},"下":{"docs":{},"方":{"docs":{},"式":{"docs":{},"：":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"作":{"docs":{},"为":{"docs":{},"栈":{"docs":{},"使":{"docs":{},"用":{"docs":{},"时":{"docs":{},"，":{"docs":{},"性":{"docs":{},"能":{"docs":{},"比":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"好":{"docs":{},"；":{"docs":{},"当":{"docs":{},"作":{"docs":{},"为":{"docs":{},"队":{"docs":{},"列":{"docs":{},"使":{"docs":{},"用":{"docs":{},"时":{"docs":{},"，":{"docs":{},"性":{"docs":{},"能":{"docs":{},"比":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"好":{"docs":{},"。":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"i":{"docs":{},"，":{"docs":{},"父":{"docs":{},"亲":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"(":{"docs":{},"i":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},"要":{"docs":{},"被":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"为":{"docs":{},"真":{"docs":{},"时":{"docs":{},"，":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},",":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"为":{"docs":{},"真":{"docs":{},"时":{"docs":{},"，":{"docs":{},"x":{"docs":{},"为":{"docs":{},"割":{"docs":{},"点":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{},"和":{"docs":{},"队":{"docs":{},"列":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":10.001610305958131}}}}},"：":{"docs":{},"后":{"docs":{},"进":{"docs":{},"先":{"docs":{},"出":{"docs":{},"；":{"docs":{},"队":{"docs":{},"列":{"docs":{},"：":{"docs":{},"先":{"docs":{},"进":{"docs":{},"先":{"docs":{},"出":{"docs":{"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"ref":"01-data-structrue/basic/03-stack-queue/stack-queue.html","tf":0.001610305958132045}}}}}}}}}}}}}},"用":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"信":{"docs":{},"息":{"docs":{},"，":{"docs":{},"当":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"新":{"docs":{},"节":{"docs":{},"点":{"docs":{},"返":{"docs":{},"回":{"docs":{},"时":{"docs":{},"能":{"docs":{},"够":{"docs":{},"继":{"docs":{},"续":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"栈":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"底":{"docs":{},"到":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},":":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},")":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},")":{"docs":{},";":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.012422360248447204}}}}},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"1":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.004889975550122249}},"#":{"docs":{},"'":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"a":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}},"]":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}},"b":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.002962962962962963}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"*":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},".":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"+":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}},".":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},".":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0016460905349794238}}}}},"q":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"o":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.004940711462450593}},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"t":{"docs":{},"'":{"docs":{},";":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"x":{"docs":{},"'":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.001976284584980237}},".":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0029644268774703555}}},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"?":{"docs":{},"'":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.00625}}}},"c":{"docs":{},"'":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}},",":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}},"h":{"docs":{},"'":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"i":{"docs":{},"'":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}},"n":{"docs":{},"'":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}},"r":{"docs":{},"'":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}}}},"u":{"docs":{},"'":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"\\":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.004801920768307323},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.012224938875305624},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.017266187050359712}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},",":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306}}}}}}},"y":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0012004801920768306},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},";":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153},"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.002797202797202797}}},")":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.00410958904109589},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"y":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}},")":{"docs":{},")":{"docs":{},";":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}},"中":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}},"使":{"docs":{},"用":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"中":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"，":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"字":{"docs":{},"符":{"docs":{},"了":{"docs":{},"）":{"docs":{},"。":{"docs":{},"同":{"docs":{},"时":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"增":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}},"）":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"高":{"docs":{},"精":{"docs":{},"度":{"docs":{},"运":{"docs":{},"算":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"调":{"docs":{},"用":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}},"刷":{"docs":{},"题":{"docs":{},"先":{"docs":{},"刷":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}},"向":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.001800720288115246}}}}}}},"寻":{"docs":{},"找":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"结":{"docs":{},"点":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"常":{"docs":{},"用":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"操":{"docs":{},"作":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"可":{"docs":{},"达":{"docs":{},"性":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"建":{"docs":{},"树":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}},"、":{"docs":{},"调":{"docs":{},"试":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"图":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}},"树":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":10.000600240096038}},"状":{"docs":{},"数":{"docs":{},"组":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":10.003521126760564}},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"查":{"docs":{},"询":{"docs":{},"和":{"docs":{},"修":{"docs":{},"改":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"都":{"docs":{},"为":{"docs":{},"$":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"$":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"。":{"docs":{},"主":{"docs":{},"要":{"docs":{},"用":{"docs":{},"于":{"docs":{},"查":{"docs":{},"询":{"docs":{},"任":{"docs":{},"意":{"docs":{},"两":{"docs":{},"位":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"之":{"docs":{},"和":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"能":{"docs":{},"修":{"docs":{},"改":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"值":{"docs":{},"；":{"docs":{},"经":{"docs":{},"过":{"docs":{},"简":{"docs":{},"单":{"docs":{},"修":{"docs":{},"改":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"下":{"docs":{},"进":{"docs":{},"行":{"docs":{},"范":{"docs":{},"围":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"时":{"docs":{},"只":{"docs":{},"能":{"docs":{},"查":{"docs":{},"询":{"docs":{},"其":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"种":{"docs":{},"用":{"docs":{},"于":{"docs":{},"高":{"docs":{},"效":{"docs":{},"处":{"docs":{},"理":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"列":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"更":{"docs":{},"新":{"docs":{},"及":{"docs":{},"求":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"详":{"docs":{},"细":{"docs":{},"解":{"docs":{},"析":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"黑":{"docs":{},"科":{"docs":{},"技":{"docs":{},"讲":{"docs":{},"义":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"多":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"整":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"便":{"docs":{},"是":{"docs":{},"按":{"docs":{},"字":{"docs":{},"典":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"生":{"docs":{},"成":{"docs":{},"以":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"为":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"深":{"docs":{},"度":{"docs":{},"为":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"的":{"docs":{},"描":{"docs":{},"述":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"种":{"docs":{},"双":{"docs":{},"栈":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"二":{"docs":{},"种":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}}},"递":{"docs":{},"归":{"docs":{},"遍":{"docs":{},"历":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}},"遍":{"docs":{},"历":{"docs":{"01-data-structrue/basic/04-tree/tree.html":{"ref":"01-data-structrue/basic/04-tree/tree.html","tf":0.0006002400960384153}}}}}}},"集":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":0.007194244604316547}},"合":{"docs":{"01-data-structrue/basic/05-set/set.html":{"ref":"01-data-structrue/basic/05-set/set.html","tf":10}}}},"哈":{"docs":{},"希":{"docs":{},"表":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":10}}}}},"存":{"docs":{},"储":{"docs":{},"键":{"docs":{},"值":{"docs":{},"对":{"docs":{},"映":{"docs":{},"射":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}}}}}}},"映":{"docs":{},"射":{"docs":{"01-data-structrue/basic/06-map/map.html":{"ref":"01-data-structrue/basic/06-map/map.html","tf":0.005291005291005291}}}},"堆":{"docs":{"01-data-structrue/basic/07-heap/heap.html":{"ref":"01-data-structrue/basic/07-heap/heap.html","tf":10.5}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}}},".":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}},".":{"docs":{},".":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}},",":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0027397260273972603},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},";":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0028776978417266188}}},"标":{"docs":{},"记":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"就":{"docs":{},"是":{"docs":{},"可":{"docs":{},"能":{"docs":{},"出":{"docs":{},"现":{"docs":{},"细":{"docs":{},"节":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"^":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"及":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"合":{"docs":{},"并":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"（":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"）":{"docs":{},"：":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"集":{"docs":{},"合":{"docs":{},"并":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"集":{"docs":{},"合":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}}}}}}},"它":{"docs":{},"支":{"docs":{},"持":{"docs":{},"两":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}},"并":{"docs":{},"查":{"docs":{},"集":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":10.001369863013698}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"树":{"docs":{},"形":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"顾":{"docs":{},"名":{"docs":{},"思":{"docs":{},"义":{"docs":{},"，":{"docs":{},"它":{"docs":{},"用":{"docs":{},"于":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"些":{"docs":{},"不":{"docs":{},"交":{"docs":{},"集":{"docs":{},"的":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"朋":{"docs":{},"友":{"docs":{},"的":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"就":{"docs":{},"是":{"docs":{},"朋":{"docs":{},"友":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}}}}}}}}}}},"模":{"docs":{},"板":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902},"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/01-union-find/union-find.html":{"ref":"01-data-structrue/advanced/01-union-find/union-find.html","tf":0.0013698630136986301}}},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"输":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"可":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"要":{"docs":{},"求":{"docs":{},"算":{"docs":{},"法":{"docs":{},"输":{"docs":{},"出":{"docs":{},"这":{"docs":{},"些":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"集":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"指":{"docs":{},"递":{"docs":{},"推":{"docs":{},"方":{"docs":{},"程":{"docs":{},"具":{"docs":{},"有":{"docs":{},"明":{"docs":{},"显":{"docs":{},"的":{"docs":{},"线":{"docs":{},"性":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"有":{"docs":{},"一":{"docs":{},"维":{"docs":{},"线":{"docs":{},"性":{"docs":{},"和":{"docs":{},"二":{"docs":{},"维":{"docs":{},"线":{"docs":{},"性":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"“":{"docs":{},"高":{"docs":{},"级":{"docs":{},"”":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"—":{"docs":{},"—":{"docs":{},"树":{"docs":{},"状":{"docs":{},"数":{"docs":{},"组":{"docs":{},"！":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}}}}}},"≤":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0035211267605633804},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0057553956834532375}}},"二":{"docs":{},"维":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"树":{"docs":{},"状":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":10.000719424460431}},"相":{"docs":{},"关":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}},"难":{"docs":{},"度":{"docs":{},"极":{"docs":{},"大":{"docs":{},"的":{"docs":{},"一":{"docs":{},"道":{"docs":{},"题":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}},"传":{"docs":{},"入":{"docs":{},"的":{"docs":{},"是":{"docs":{},"差":{"docs":{},"分":{"docs":{},"数":{"docs":{},"组":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}},"区":{"docs":{},"间":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":10.00431654676259}},"修":{"docs":{},"改":{"docs":{},"、":{"docs":{},"区":{"docs":{},"间":{"docs":{},"查":{"docs":{},"询":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"单":{"docs":{},"点":{"docs":{},"查":{"docs":{},"询":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}},"d":{"docs":{},"p":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}},"，":{"docs":{},"顾":{"docs":{},"名":{"docs":{},"思":{"docs":{},"义":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"上":{"docs":{},"去":{"docs":{},"进":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"，":{"docs":{},"先":{"docs":{},"在":{"docs":{},"小":{"docs":{},"区":{"docs":{},"间":{"docs":{},"进":{"docs":{},"行":{"docs":{},"d":{"docs":{},"p":{"docs":{},"得":{"docs":{},"到":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"利":{"docs":{},"用":{"docs":{},"小":{"docs":{},"区":{"docs":{},"间":{"docs":{},"的":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"合":{"docs":{},"并":{"docs":{},"求":{"docs":{},"大":{"docs":{},"区":{"docs":{},"间":{"docs":{},"的":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"解":{"docs":{},"决":{"docs":{},"此":{"docs":{},"题":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}}}}}}}}},"以":{"docs":{},"把":{"docs":{},"问":{"docs":{},"题":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"查":{"docs":{},"找":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"第":{"docs":{},"(":{"docs":{},"n":{"1":{"docs":{},"+":{"docs":{},"n":{"2":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}},"将":{"docs":{},"每":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"看":{"docs":{},"成":{"docs":{},"图":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"之":{"docs":{},"差":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"平":{"docs":{},"方":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"所":{"docs":{},"在":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"有":{"docs":{},"一":{"docs":{},"条":{"docs":{},"边":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"技":{"docs":{},"巧":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}},"时":{"docs":{},"间":{"docs":{},"戳":{"docs":{},"优":{"docs":{},"化":{"docs":{"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"ref":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","tf":0.0017605633802816902}}}}}},"需":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"以":{"docs":{},"下":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}},"线":{"docs":{},"段":{"docs":{},"树":{"docs":{"01-data-structrue/advanced/03-segment-tree/segment-tree.html":{"ref":"01-data-structrue/advanced/03-segment-tree/segment-tree.html","tf":10}}}},"性":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":10.0015625}},"d":{"docs":{},"p":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}},"上":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"快":{"docs":{},"速":{"docs":{},"得":{"docs":{},"到":{"docs":{},"某":{"docs":{},"些":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}},"浮":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"任":{"docs":{},"意":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"所":{"docs":{},"包":{"docs":{},"含":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"都":{"docs":{},"不":{"docs":{},"相":{"docs":{},"同":{"docs":{},"；":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}},"作":{"docs":{},"为":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"和":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"结":{"docs":{},"构":{"docs":{},"：":{"docs":{},"如":{"docs":{},"后":{"docs":{},"缀":{"docs":{},"树":{"docs":{},"，":{"docs":{},"a":{"docs":{},"c":{"docs":{},"自":{"docs":{},"动":{"docs":{},"机":{"docs":{},"等":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"多":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"来":{"docs":{},"节":{"docs":{},"省":{"docs":{},"存":{"docs":{},"储":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"，":{"docs":{},"当":{"docs":{},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{},"大":{"docs":{},"量":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"存":{"docs":{},"储":{"docs":{},"到":{"docs":{},"一":{"docs":{},"棵":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"典":{"docs":{},"树":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":10.003205128205128}},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}},"，":{"docs":{},"又":{"docs":{},"称":{"docs":{},"单":{"docs":{},"词":{"docs":{},"查":{"docs":{},"找":{"docs":{},"树":{"docs":{},"，":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"树":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"树":{"docs":{},"形":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"树":{"docs":{},"的":{"docs":{},"变":{"docs":{},"种":{"docs":{},"。":{"docs":{},"典":{"docs":{},"型":{"docs":{},"应":{"docs":{},"用":{"docs":{},"是":{"docs":{},"用":{"docs":{},"于":{"docs":{},"统":{"docs":{},"计":{"docs":{},"，":{"docs":{},"排":{"docs":{},"序":{"docs":{},"和":{"docs":{},"保":{"docs":{},"存":{"docs":{},"大":{"docs":{},"量":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"（":{"docs":{},"但":{"docs":{},"不":{"docs":{},"仅":{"docs":{},"限":{"docs":{},"于":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"）":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"经":{"docs":{},"常":{"docs":{},"被":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"引":{"docs":{},"擎":{"docs":{},"系":{"docs":{},"统":{"docs":{},"用":{"docs":{},"于":{"docs":{},"文":{"docs":{},"本":{"docs":{},"词":{"docs":{},"频":{"docs":{},"统":{"docs":{},"计":{"docs":{},"。":{"docs":{},"它":{"docs":{},"的":{"docs":{},"优":{"docs":{},"点":{"docs":{},"是":{"docs":{},"：":{"docs":{},"利":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"来":{"docs":{},"节":{"docs":{},"约":{"docs":{},"存":{"docs":{},"储":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"限":{"docs":{},"度":{"docs":{},"地":{"docs":{},"减":{"docs":{},"少":{"docs":{},"无":{"docs":{},"谓":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"查":{"docs":{},"询":{"docs":{},"效":{"docs":{},"率":{"docs":{},"比":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"表":{"docs":{},"高":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"符":{"docs":{},"串":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"：":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}},"检":{"docs":{},"索":{"docs":{},"：":{"docs":{},"事":{"docs":{},"先":{"docs":{},"将":{"docs":{},"已":{"docs":{},"知":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"（":{"docs":{},"字":{"docs":{},"典":{"docs":{},"）":{"docs":{},"的":{"docs":{},"有":{"docs":{},"关":{"docs":{},"信":{"docs":{},"息":{"docs":{},"保":{"docs":{},"存":{"docs":{},"到":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}},"匹":{"docs":{},"配":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625}}}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":10.000396353547364}},"：":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}},"列":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"）":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"除":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"外":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"仅":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"；":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"据":{"docs":{},"题":{"docs":{},"意":{"docs":{},"来":{"docs":{},"添":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"添":{"docs":{},"加":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}},"的":{"docs":{},"应":{"docs":{},"用":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}},"尽":{"docs":{},"头":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}},"最":{"docs":{},"主":{"docs":{},"要":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},"是":{"docs":{},"：":{"docs":{},"b":{"docs":{},"f":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}},"近":{"docs":{},"距":{"docs":{},"离":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}},"核":{"docs":{},"心":{"docs":{},"思":{"docs":{},"想":{"docs":{},"应":{"docs":{},"该":{"docs":{},"不":{"docs":{},"难":{"docs":{},"理":{"docs":{},"解":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"把":{"docs":{},"一":{"docs":{},"些":{"docs":{},"问":{"docs":{},"题":{"docs":{},"抽":{"docs":{},"象":{"docs":{},"成":{"docs":{},"图":{"docs":{},"，":{"docs":{},"从":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"向":{"docs":{},"四":{"docs":{},"周":{"docs":{},"开":{"docs":{},"始":{"docs":{},"扩":{"docs":{},"散":{"docs":{},"。":{"docs":{},"一":{"docs":{},"般":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"写":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.003125}}},"区":{"docs":{},"间":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"特":{"docs":{},"点":{"docs":{},"：":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}},"里":{"docs":{},"，":{"docs":{},"查":{"docs":{},"找":{"docs":{},"另":{"docs":{},"外":{"docs":{},"一":{"docs":{},"些":{"docs":{},"未":{"docs":{},"知":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"或":{"docs":{},"者":{"docs":{},"出":{"docs":{},"现":{"docs":{},"频":{"docs":{},"率":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/04-trie/trie.html":{"ref":"01-data-structrue/advanced/04-trie/trie.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}}}}},"?":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0014388489208633094},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"ref":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","tf":0.0015625},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.012578616352201259},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}},"≥":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"离":{"docs":{},"它":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"比":{"docs":{},"它":{"docs":{},"大":{"docs":{},"的":{"docs":{},"数":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"途":{"docs":{},"：":{"docs":{},"用":{"docs":{},"来":{"docs":{},"快":{"docs":{},"速":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"离":{"docs":{},"它":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{},"比":{"docs":{},"它":{"docs":{},"大":{"docs":{},"（":{"docs":{},"小":{"docs":{},"）":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"某":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"求":{"docs":{},"出":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"某":{"docs":{},"个":{"docs":{},"区":{"docs":{},"间":{"docs":{},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"的":{"docs":{},"最":{"docs":{},"值":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"作":{"docs":{},"为":{"docs":{},"划":{"docs":{},"分":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}},"于":{"docs":{},"大":{"docs":{},"整":{"docs":{},"数":{"docs":{},"运":{"docs":{},"算":{"docs":{},"，":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"高":{"docs":{},"浮":{"docs":{},"点":{"docs":{},"型":{"docs":{},"数":{"docs":{},"据":{"docs":{},"运":{"docs":{},"算":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}},"由":{"docs":{},"大":{"docs":{},"到":{"docs":{},"小":{"docs":{"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"ref":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","tf":0.0018552875695732839}}}}}},"指":{"docs":{},"的":{"docs":{},"是":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"能":{"docs":{},"从":{"docs":{},"队":{"docs":{},"头":{"docs":{},"和":{"docs":{},"队":{"docs":{},"尾":{"docs":{},"进":{"docs":{},"行":{"docs":{},"操":{"docs":{},"作":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}}}}}}}},"的":{"docs":{},"的":{"docs":{"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"ref":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","tf":0.022222222222222223}}}}}}}},"针":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"窗":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"缩":{"docs":{},"小":{"docs":{},"窗":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}},"−":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"三":{"docs":{},"路":{"docs":{},"快":{"docs":{},"排":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"要":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}},"图":{"docs":{},"是":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"性":{"docs":{},"能":{"docs":{},"及":{"docs":{},"稳":{"docs":{},"定":{"docs":{},"性":{"docs":{},"总":{"docs":{},"结":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"尾":{"docs":{},"结":{"docs":{},"点":{"docs":{},"是":{"docs":{},"当":{"docs":{},"前":{"docs":{},"结":{"docs":{},"点":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"减":{"docs":{},"少":{"docs":{},"访":{"docs":{},"问":{"docs":{},"最":{"docs":{},"后":{"docs":{},"结":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}},"沉":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"表":{"docs":{},"是":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{},"思":{"docs":{},"想":{"docs":{},"相":{"docs":{},"应":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"（":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},"）":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"导":{"docs":{},"致":{"docs":{},"的":{"docs":{},"不":{"docs":{},"稳":{"docs":{},"定":{"docs":{},"性":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"有":{"docs":{},"n":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"为":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"，":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"，":{"docs":{},"则":{"docs":{},"在":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"元":{"docs":{},"素":{"docs":{},"最":{"docs":{},"大":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"内":{"docs":{},"部":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"冒":{"docs":{},"泡":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"、":{"docs":{},"选":{"docs":{},"择":{"docs":{},"、":{"docs":{},"插":{"docs":{},"入":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"十":{"docs":{},"大":{"docs":{},"排":{"docs":{},"序":{"docs":{},"算":{"docs":{},"法":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"大":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"其":{"docs":{},"左":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"多":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"数":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":10}},"乘":{"docs":{},"法":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"加":{"docs":{},"法":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"计":{"docs":{},"算":{"docs":{},"阶":{"docs":{},"乘":{"docs":{},"位":{"docs":{},"数":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}},"阶":{"docs":{},"乘":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"对":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"引":{"docs":{},"用":{"docs":{},"次":{"docs":{},"数":{"docs":{},"进":{"docs":{},"行":{"docs":{},"计":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"至":{"docs":{},"多":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"序":{"docs":{},"列":{"docs":{},"做":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}},"撞":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},"是":{"docs":{},"指":{"docs":{},"在":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"将":{"docs":{},"指":{"docs":{},"向":{"docs":{},"最":{"docs":{},"左":{"docs":{},"侧":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"左":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"向":{"docs":{},"图":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"删":{"docs":{},"掉":{"docs":{},"一":{"docs":{},"条":{"docs":{},"边":{"docs":{},"后":{"docs":{},"图":{"docs":{},"中":{"docs":{},"的":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"数":{"docs":{},"增":{"docs":{},"加":{"docs":{},"了":{"docs":{},"，":{"docs":{},"则":{"docs":{},"称":{"docs":{},"这":{"docs":{},"条":{"docs":{},"边":{"docs":{},"为":{"docs":{},"桥":{"docs":{},"或":{"docs":{},"者":{"docs":{},"割":{"docs":{},"边":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"把":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"删":{"docs":{},"除":{"docs":{},"后":{"docs":{},"这":{"docs":{},"个":{"docs":{},"图":{"docs":{},"的":{"docs":{},"极":{"docs":{},"大":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"数":{"docs":{},"增":{"docs":{},"加":{"docs":{},"了":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"图":{"docs":{},"的":{"docs":{},"割":{"docs":{},"点":{"docs":{},"（":{"docs":{},"又":{"docs":{},"称":{"docs":{},"割":{"docs":{},"顶":{"docs":{},"）":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"在":{"docs":{},"求":{"docs":{},"割":{"docs":{},"点":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"就":{"docs":{},"能":{"docs":{},"顺":{"docs":{},"便":{"docs":{},"把":{"docs":{},"每":{"docs":{},"个":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"求":{"docs":{},"出":{"docs":{},"。":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"存":{"docs":{},"储":{"docs":{},"当":{"docs":{},"前":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"在":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"图":{"docs":{},"时":{"docs":{},"，":{"docs":{},"每":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"条":{"docs":{},"树":{"docs":{},"$":{"docs":{},"d":{"docs":{},"f":{"docs":{},"n":{"docs":{},"$":{"docs":{},"枝":{"docs":{},"边":{"docs":{},"或":{"docs":{},"后":{"docs":{},"向":{"docs":{},"边":{"docs":{},"(":{"docs":{},"非":{"docs":{},"横":{"docs":{},"叉":{"docs":{},"边":{"docs":{},")":{"docs":{},"，":{"docs":{},"就":{"docs":{},"把":{"docs":{},"这":{"docs":{},"条":{"docs":{},"边":{"docs":{},"加":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"某":{"docs":{},"时":{"docs":{},"满":{"docs":{},"足":{"docs":{},"$":{"docs":{},"d":{"docs":{},"f":{"docs":{},"n":{"docs":{},"(":{"docs":{},"u":{"docs":{},")":{"docs":{},"\\":{"docs":{},"l":{"docs":{},"e":{"docs":{},"q":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"求":{"docs":{},"法":{"docs":{},"更":{"docs":{},"为":{"docs":{},"简":{"docs":{},"单":{"docs":{},"。":{"docs":{},"只":{"docs":{},"需":{"docs":{},"在":{"docs":{},"求":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"桥":{"docs":{},"以":{"docs":{},"后":{"docs":{},"，":{"docs":{},"把":{"docs":{},"桥":{"docs":{},"边":{"docs":{},"删":{"docs":{},"除":{"docs":{},"，":{"docs":{},"原":{"docs":{},"图":{"docs":{},"变":{"docs":{},"成":{"docs":{},"了":{"docs":{},"多":{"docs":{},"个":{"docs":{},"连":{"docs":{},"通":{"docs":{},"块":{"docs":{},"，":{"docs":{},"则":{"docs":{},"每":{"docs":{},"个":{"docs":{},"连":{"docs":{},"通":{"docs":{},"块":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"。":{"docs":{},"桥":{"docs":{},"不":{"docs":{},"属":{"docs":{},"于":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"个":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"的":{"docs":{},"边":{"docs":{},"和":{"docs":{},"每":{"docs":{},"个":{"docs":{},"顶":{"docs":{},"点":{"docs":{},"都":{"docs":{},"属":{"docs":{},"于":{"docs":{},"且":{"docs":{},"只":{"docs":{},"属":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"支":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"序":{"docs":{},"列":{"docs":{},"分":{"docs":{},"为":{"docs":{},"已":{"docs":{},"排":{"docs":{},"序":{"docs":{},"区":{"docs":{},"间":{"docs":{},"和":{"docs":{},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"区":{"docs":{},"间":{"docs":{},"，":{"docs":{},"取":{"docs":{},"未":{"docs":{},"排":{"docs":{},"序":{"docs":{},"区":{"docs":{},"间":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"在":{"docs":{},"已":{"docs":{},"排":{"docs":{},"序":{"docs":{},"区":{"docs":{},"间":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"合":{"docs":{},"适":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"，":{"docs":{},"保":{"docs":{},"证":{"docs":{},"已":{"docs":{},"排":{"docs":{},"序":{"docs":{},"区":{"docs":{},"间":{"docs":{},"一":{"docs":{},"直":{"docs":{},"有":{"docs":{},"序":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"待":{"docs":{},"排":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"构":{"docs":{},"造":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"顶":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"移":{"docs":{},"走":{"docs":{},"堆":{"docs":{},"顶":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"n":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"元":{"docs":{},"素":{"docs":{},"补":{"docs":{},"齐":{"docs":{},"为":{"docs":{},"统":{"docs":{},"一":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"从":{"docs":{},"最":{"docs":{},"低":{"docs":{},"位":{"docs":{},"开":{"docs":{},"始":{"docs":{},"依":{"docs":{},"次":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"当":{"docs":{},"最":{"docs":{},"高":{"docs":{},"位":{"docs":{},"排":{"docs":{},"序":{"docs":{},"完":{"docs":{},"成":{"docs":{},"后":{"docs":{},"，":{"docs":{},"序":{"docs":{},"列":{"docs":{},"就":{"docs":{},"成":{"docs":{},"了":{"docs":{},"有":{"docs":{},"序":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"规":{"docs":{},"模":{"docs":{},"为":{"docs":{},"n":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"分":{"docs":{},"解":{"docs":{},"为":{"docs":{},"k":{"docs":{},"个":{"docs":{},"规":{"docs":{},"模":{"docs":{},"较":{"docs":{},"小":{"docs":{},"的":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"这":{"docs":{},"些":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"相":{"docs":{},"互":{"docs":{},"独":{"docs":{},"立":{"docs":{},"且":{"docs":{},"与":{"docs":{},"原":{"docs":{},"问":{"docs":{},"题":{"docs":{},"性":{"docs":{},"质":{"docs":{},"相":{"docs":{},"同":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"解":{"docs":{},"合":{"docs":{},"并":{"docs":{},"成":{"docs":{},"原":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"解":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"向":{"docs":{},"四":{"docs":{},"周":{"docs":{},"扩":{"docs":{},"散":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}},"起":{"docs":{},"点":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}},"希":{"docs":{},"尔":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"开":{"docs":{},"始":{"docs":{},"往":{"docs":{},"下":{"docs":{},"调":{"docs":{},"整":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"归":{"docs":{},"并":{"docs":{},"、":{"docs":{},"快":{"docs":{},"排":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"统":{"docs":{},"计":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"快":{"docs":{},"速":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}}}},"幂":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":10.004545454545454}}}},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}},"也":{"docs":{},"是":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"同":{"docs":{},"一":{"docs":{},"侧":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"将":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"分":{"docs":{},"别":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"（":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"）":{"docs":{},"和":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"（":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"）":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"以":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"策":{"docs":{},"略":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"的":{"docs":{},"值":{"docs":{},"相":{"docs":{},"等":{"docs":{},"（":{"docs":{},"或":{"docs":{},"其":{"docs":{},"他":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"条":{"docs":{},"件":{"docs":{},"）":{"docs":{},"为":{"docs":{},"止":{"docs":{},"，":{"docs":{},"如":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"环":{"docs":{},"入":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"是":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"后":{"docs":{},"往":{"docs":{},"前":{"docs":{},"，":{"docs":{},"用":{"docs":{},"于":{"docs":{},"合":{"docs":{},"并":{"docs":{},"和":{"docs":{},"替":{"docs":{},"换":{"docs":{},"类":{"docs":{},"型":{"docs":{},"题":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"被":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"思":{"docs":{},"想":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.003963535473642489},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"：":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}},"路":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"细":{"docs":{},"节":{"docs":{},"是":{"docs":{},"魔":{"docs":{},"鬼":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"正":{"docs":{},"确":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"最":{"docs":{},"短":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"代":{"docs":{},"价":{"docs":{},"就":{"docs":{},"是":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"比":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}},"控":{"docs":{},"制":{"docs":{},"h":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"映":{"docs":{},"射":{"docs":{},"到":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"桶":{"docs":{},"中":{"docs":{},"不":{"docs":{},"同":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"差":{"docs":{},"值":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{},"t":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"桶":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{},"k":{"docs":{},"(":{"docs":{},"移":{"docs":{},"除":{"docs":{},"最":{"docs":{},"早":{"docs":{},"进":{"docs":{},"桶":{"docs":{},"元":{"docs":{},"素":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"提":{"docs":{},"前":{"docs":{},"结":{"docs":{},"束":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"插":{"docs":{},"入":{"docs":{},"位":{"docs":{},"置":{"docs":{},"在":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"和":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"之":{"docs":{},"间":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"操":{"docs":{},"作":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}},"操":{"docs":{},"作":{"docs":{},")":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"地":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0011890606420927466}}}}},"公":{"docs":{},"约":{"docs":{},"数":{"docs":{},"、":{"docs":{},"最":{"docs":{},"小":{"docs":{},"公":{"docs":{},"倍":{"docs":{},"数":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}}}}}}},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}},"终":{"docs":{},"，":{"docs":{},"检":{"docs":{},"测":{"docs":{},"了":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0007927070947284979}},"对":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"要":{"docs":{},"求":{"docs":{},"非":{"docs":{},"常":{"docs":{},"苛":{"docs":{},"刻":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{},"足":{"docs":{},"够":{"docs":{},"均":{"docs":{},"匀":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"桶":{"docs":{},"内":{"docs":{},"排":{"docs":{},"序":{"docs":{},"就":{"docs":{},"不":{"docs":{},"是":{"docs":{},"常":{"docs":{},"量":{"docs":{},"了":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"外":{"docs":{},"部":{"docs":{},"排":{"docs":{},"序":{"docs":{},"中":{"docs":{},"。":{"docs":{},"所":{"docs":{},"谓":{"docs":{},"的":{"docs":{},"外":{"docs":{},"部":{"docs":{},"排":{"docs":{},"序":{"docs":{},"就":{"docs":{},"是":{"docs":{},"数":{"docs":{},"据":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"外":{"docs":{},"部":{"docs":{},"磁":{"docs":{},"盘":{"docs":{},"中":{"docs":{},"，":{"docs":{},"数":{"docs":{},"据":{"docs":{},"量":{"docs":{},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"，":{"docs":{},"内":{"docs":{},"存":{"docs":{},"有":{"docs":{},"限":{"docs":{},"，":{"docs":{},"无":{"docs":{},"法":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{},"全":{"docs":{},"部":{"docs":{},"加":{"docs":{},"载":{"docs":{},"到":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"保":{"docs":{},"证":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"增":{"docs":{},"长":{"docs":{},"一":{"docs":{},"个":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}},"两":{"docs":{},"个":{"docs":{},"，":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}},"一":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"的":{"docs":{},"愿":{"docs":{},"望":{"docs":{},"就":{"docs":{},"是":{"docs":{},"变":{"docs":{},"成":{"docs":{},"一":{"docs":{},"头":{"docs":{},"最":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"的":{"docs":{},"牛":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"有":{"docs":{},"$":{"docs":{},"n":{"docs":{},"$":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"，":{"docs":{},"给":{"docs":{},"你":{"docs":{},"$":{"docs":{},"m":{"docs":{},"$":{"docs":{},"对":{"docs":{},"整":{"docs":{},"数":{"docs":{},"$":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"是":{"docs":{},"n":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"还":{"docs":{},"没":{"docs":{},"有":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}},"里":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"判":{"docs":{},"断":{"docs":{},"条":{"docs":{},"件":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}},"父":{"docs":{},"亲":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"i":{"docs":{},"，":{"docs":{},"左":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"2":{"docs":{},"*":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"，":{"docs":{},"右":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"2":{"docs":{},"*":{"docs":{},"i":{"docs":{},"+":{"2":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}},"docs":{}}}}},"docs":{}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}},"都":{"docs":{},"是":{"docs":{},"用":{"docs":{},"「":{"docs":{},"队":{"docs":{},"列":{"docs":{},"」":{"docs":{},"这":{"docs":{},"种":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"周":{"docs":{},"围":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"加":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"绑":{"docs":{},"定":{"docs":{},"最":{"docs":{},"初":{"docs":{},"索":{"docs":{},"引":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}},"计":{"docs":{},"数":{"docs":{},"、":{"docs":{},"桶":{"docs":{},"、":{"docs":{},"基":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.0015854141894569957}},"是":{"docs":{},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"一":{"docs":{},"种":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"将":{"docs":{},"要":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"n":{"docs":{},"个":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"范":{"docs":{},"围":{"docs":{},"不":{"docs":{},"大":{"docs":{},"的":{"docs":{},"情":{"docs":{},"形":{"docs":{},"，":{"docs":{},"且":{"docs":{},"不":{"docs":{},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"有":{"docs":{},"负":{"docs":{},"数":{"docs":{},"的":{"docs":{},"情":{"docs":{},"形":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.013636363636363636}},"从":{"docs":{},"起":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}},"选":{"docs":{},"择":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},"一":{"docs":{},"个":{"docs":{},"增":{"docs":{},"量":{"docs":{},"序":{"docs":{},"列":{"docs":{},"$":{"docs":{},"t":{"docs":{},"_":{"1":{"docs":{},",":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"docs":{}}}}}}}}}},"排":{"docs":{},"序":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}},"列":{"docs":{},"表":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}},":":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},":":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"随":{"docs":{},"机":{"docs":{},"选":{"docs":{},"择":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"退":{"docs":{},"化":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"²":{"docs":{},")":{"docs":{"02-algorithm/01-basic/01-sort/sort.html":{"ref":"02-algorithm/01-basic/01-sort/sort.html","tf":0.00039635354736424893}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.002158273381294964},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0018326206475259622},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.006584362139917695}},";":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}},"偶":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"分":{"docs":{},"析":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"：":{"docs":{},"不":{"docs":{},"要":{"docs":{},"出":{"docs":{},"现":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"把":{"docs":{},"所":{"docs":{},"有":{"docs":{},"情":{"docs":{},"况":{"docs":{},"用":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"离":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0012217470983506415}}}}}},"治":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":10.00244498777506}},"算":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"分":{"docs":{},"三":{"docs":{},"步":{"docs":{},"走":{"docs":{},"：":{"docs":{},"分":{"docs":{},"解":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}},"相":{"docs":{},"应":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"（":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},"）":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}},"解":{"docs":{},"到":{"docs":{},"某":{"docs":{},"个":{"docs":{},"容":{"docs":{},"易":{"docs":{},"求":{"docs":{},"解":{"docs":{},"的":{"docs":{},"边":{"docs":{},"界":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"递":{"docs":{},"归":{"docs":{},"求":{"docs":{},"解":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"问":{"docs":{},"题":{"docs":{},"为":{"docs":{},"结":{"docs":{},"构":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}}}}}}}}}}}}}}}}},"奇":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"有":{"docs":{},"一":{"docs":{},"天":{"docs":{},"阿":{"docs":{},"东":{"docs":{},"到":{"docs":{},"图":{"docs":{},"书":{"docs":{},"馆":{"docs":{},"借":{"docs":{},"了":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}},"本":{"docs":{},"书":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}},"，":{"docs":{},"出":{"docs":{},"图":{"docs":{},"书":{"docs":{},"馆":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"警":{"docs":{},"报":{"docs":{},"响":{"docs":{},"了":{"docs":{},"，":{"docs":{},"于":{"docs":{},"是":{"docs":{},"保":{"docs":{},"安":{"docs":{},"把":{"docs":{},"阿":{"docs":{},"东":{"docs":{},"拦":{"docs":{},"下":{"docs":{},"，":{"docs":{},"要":{"docs":{},"检":{"docs":{},"查":{"docs":{},"一":{"docs":{},"下":{"docs":{},"哪":{"docs":{},"本":{"docs":{},"书":{"docs":{},"没":{"docs":{},"有":{"docs":{},"登":{"docs":{},"记":{"docs":{},"出":{"docs":{},"借":{"docs":{},"。":{"docs":{},"阿":{"docs":{},"东":{"docs":{},"正":{"docs":{},"准":{"docs":{},"备":{"docs":{},"把":{"docs":{},"每":{"docs":{},"一":{"docs":{},"本":{"docs":{},"书":{"docs":{},"在":{"docs":{},"报":{"docs":{},"警":{"docs":{},"器":{"docs":{},"下":{"docs":{},"过":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"以":{"docs":{},"找":{"docs":{},"出":{"docs":{},"引":{"docs":{},"发":{"docs":{},"警":{"docs":{},"报":{"docs":{},"的":{"docs":{},"书":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"保":{"docs":{},"安":{"docs":{},"露":{"docs":{},"出":{"docs":{},"不":{"docs":{},"屑":{"docs":{},"的":{"docs":{},"眼":{"docs":{},"神":{"docs":{},"：":{"docs":{},"你":{"docs":{},"连":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"吗":{"docs":{},"？":{"docs":{},"于":{"docs":{},"是":{"docs":{},"保":{"docs":{},"安":{"docs":{},"把":{"docs":{},"书":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"让":{"docs":{},"第":{"docs":{},"一":{"docs":{},"堆":{"docs":{},"过":{"docs":{},"一":{"docs":{},"下":{"docs":{},"报":{"docs":{},"警":{"docs":{},"器":{"docs":{},"，":{"docs":{},"报":{"docs":{},"警":{"docs":{},"器":{"docs":{},"响":{"docs":{},"；":{"docs":{},"于":{"docs":{},"是":{"docs":{},"再":{"docs":{},"把":{"docs":{},"这":{"docs":{},"堆":{"docs":{},"书":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"堆":{"docs":{},"…":{"docs":{},"…":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"框":{"docs":{},"架":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}},"次":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"保":{"docs":{},"安":{"docs":{},"成":{"docs":{},"功":{"docs":{},"的":{"docs":{},"找":{"docs":{},"到":{"docs":{},"了":{"docs":{},"那":{"docs":{},"本":{"docs":{},"引":{"docs":{},"起":{"docs":{},"警":{"docs":{},"报":{"docs":{},"的":{"docs":{},"书":{"docs":{},"，":{"docs":{},"露":{"docs":{},"出":{"docs":{},"了":{"docs":{},"得":{"docs":{},"意":{"docs":{},"和":{"docs":{},"嘲":{"docs":{},"讽":{"docs":{},"的":{"docs":{},"笑":{"docs":{},"容":{"docs":{},"。":{"docs":{},"于":{"docs":{},"是":{"docs":{},"阿":{"docs":{},"东":{"docs":{},"背":{"docs":{},"着":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"书":{"docs":{},"走":{"docs":{},"了":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"防":{"docs":{},"整":{"docs":{},"形":{"docs":{},"溢":{"docs":{},"出":{"docs":{"02-algorithm/01-basic/02-binary-search/binary-search.html":{"ref":"02-algorithm/01-basic/02-binary-search/binary-search.html","tf":0.0007194244604316547}}}}}}},"再":{"docs":{},"走":{"docs":{},"l":{"docs":{},"步":{"docs":{},"回":{"docs":{},"到":{"docs":{},"起":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"环":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}},"，":{"docs":{},"若":{"docs":{},"存":{"docs":{},"在":{"docs":{},"找":{"docs":{},"出":{"docs":{},"环":{"docs":{},"入":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}},"同":{"docs":{},"前":{"docs":{},"向":{"docs":{},"型":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}},"所":{"docs":{},"谓":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"指":{"docs":{},"的":{"docs":{},"是":{"docs":{},"在":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"普":{"docs":{},"通":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"单":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"进":{"docs":{},"行":{"docs":{},"循":{"docs":{},"环":{"docs":{},"访":{"docs":{},"问":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"相":{"docs":{},"同":{"docs":{},"方":{"docs":{},"向":{"docs":{},"或":{"docs":{},"者":{"docs":{},"相":{"docs":{},"反":{"docs":{},"方":{"docs":{},"向":{"docs":{},"的":{"docs":{},"指":{"docs":{},"针":{"docs":{},"进":{"docs":{},"行":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"达":{"docs":{},"到":{"docs":{},"相":{"docs":{},"应":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"。":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{},"充":{"docs":{},"分":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{},"这":{"docs":{},"一":{"docs":{},"特":{"docs":{},"征":{"docs":{},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"在":{"docs":{},"某":{"docs":{},"些":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"能":{"docs":{},"够":{"docs":{},"简":{"docs":{},"化":{"docs":{},"一":{"docs":{},"些":{"docs":{},"运":{"docs":{},"算":{"docs":{},"，":{"docs":{},"降":{"docs":{},"低":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"型":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}},"似":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"输":{"docs":{},"入":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"ref":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","tf":0.0006108735491753207}}}}}}},"一":{"docs":{},"个":{"docs":{},"可":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}},"到":{"docs":{},"达":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"终":{"docs":{},"点":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}},"和":{"docs":{},"第":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"更":{"docs":{},"新":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}},"步":{"docs":{},"在":{"docs":{},"优":{"docs":{},"化":{"docs":{},"这":{"docs":{},"个":{"docs":{},"「":{"docs":{},"可":{"docs":{},"行":{"docs":{},"解":{"docs":{},"」":{"docs":{},"，":{"docs":{},"最":{"docs":{},"终":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"。":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"轮":{"docs":{},"流":{"docs":{},"前":{"docs":{},"进":{"docs":{},"，":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"大":{"docs":{},"小":{"docs":{},"增":{"docs":{},"增":{"docs":{},"减":{"docs":{},"减":{"docs":{},"，":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"不":{"docs":{},"断":{"docs":{},"向":{"docs":{},"右":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"在":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"「":{"docs":{},"可":{"docs":{},"行":{"docs":{},"解":{"docs":{},"」":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"第":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":10.001481481481482}},"相":{"docs":{},"应":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"以":{"docs":{},"解":{"docs":{},"决":{"docs":{},"数":{"docs":{},"组":{"docs":{},"/":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"子":{"docs":{},"元":{"docs":{},"素":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"它":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"嵌":{"docs":{},"套":{"docs":{},"的":{"docs":{},"循":{"docs":{},"环":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"单":{"docs":{},"循":{"docs":{},"环":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"降":{"docs":{},"低":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}}},"称":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"「":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"」":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"短":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"开":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"和":{"docs":{},"长":{"docs":{},"度":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}}},"扩":{"docs":{},"散":{"docs":{},"的":{"docs":{},"步":{"docs":{},"数":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"思":{"docs":{},"路":{"docs":{},"其":{"docs":{},"实":{"docs":{},"也":{"docs":{},"不":{"docs":{},"难":{"docs":{},"，":{"docs":{},"第":{"docs":{"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"ref":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","tf":0.0014814814814814814}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"ref":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","tf":0.0024449877750611247}},"一":{"docs":{},"个":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"决":{"docs":{},"策":{"docs":{},"树":{"docs":{},"的":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"你":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"思":{"docs":{},"考":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"方":{"docs":{},"向":{"docs":{},"位":{"docs":{},"移":{"docs":{},"的":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}},"做":{"docs":{},"选":{"docs":{},"择":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"其":{"docs":{},"核":{"docs":{},"心":{"docs":{},"就":{"docs":{},"是":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}},"回":{"docs":{},"溯":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":10.00082304526749}},"算":{"docs":{},"法":{"docs":{},"对":{"docs":{},"应":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}},"法":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"子":{"docs":{},"集":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"循":{"docs":{},"环":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"在":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"之":{"docs":{},"前":{"docs":{},"「":{"docs":{},"做":{"docs":{},"选":{"docs":{},"择":{"docs":{},"」":{"docs":{},"，":{"docs":{},"在":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"之":{"docs":{},"后":{"docs":{},"「":{"docs":{},"撤":{"docs":{},"销":{"docs":{},"选":{"docs":{},"择":{"docs":{},"」":{"docs":{},"，":{"docs":{},"特":{"docs":{},"别":{"docs":{},"简":{"docs":{},"单":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"撤":{"docs":{},"销":{"docs":{},"选":{"docs":{},"择":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}},"满":{"docs":{},"足":{"docs":{},"结":{"docs":{},"束":{"docs":{},"条":{"docs":{},"件":{"docs":{},":":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}}}}}}},"组":{"docs":{},"合":{"docs":{"02-algorithm/01-basic/06-backtracking/backtracking.html":{"ref":"02-algorithm/01-basic/06-backtracking/backtracking.html","tf":0.0008230452674897119}}}},"~":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.009881422924901186}}},"一":{"docs":{},"样":{"docs":{},"同":{"docs":{},"样":{"docs":{},"需":{"docs":{},"要":{"docs":{},"对":{"docs":{},"已":{"docs":{},"经":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{},"标":{"docs":{},"记":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"要":{"docs":{},"点":{"docs":{},"：":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}},"剪":{"docs":{},"枝":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}},"是":{"docs":{},"否":{"docs":{},"还":{"docs":{},"原":{"docs":{},"标":{"docs":{},"记":{"docs":{},"根":{"docs":{},"据":{"docs":{},"题":{"docs":{},"意":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}},"标":{"docs":{},"记":{"docs":{},"：":{"docs":{},"和":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}},"对":{"docs":{},"于":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"应":{"docs":{},"该":{"docs":{},"将":{"docs":{},"它":{"docs":{},"标":{"docs":{},"记":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"重":{"docs":{},"复":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}}}}}}}},"；":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}},"深":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":10.00098814229249}},"相":{"docs":{},"应":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"ref":"02-algorithm/01-basic/07-depth-first-search/dfs.html","tf":0.0009881422924901185}}}}}}}}}}}}}}}}}}}},"宽":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":10.001398601398602}},"相":{"docs":{},"应":{"docs":{},"题":{"docs":{},"目":{"docs":{},"索":{"docs":{},"引":{"docs":{},"(":{"docs":{},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},")":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}},"核":{"docs":{},"心":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"避":{"docs":{},"免":{"docs":{},"走":{"docs":{},"回":{"docs":{},"头":{"docs":{},"路":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}},"队":{"docs":{},"列":{"docs":{},"：":{"docs":{},"用":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"每":{"docs":{},"一":{"docs":{},"轮":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"；":{"docs":{"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"ref":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","tf":0.0013986013986013986}}}}}}}}}}}}}}}}}}}},"贪":{"docs":{},"心":{"docs":{"02-algorithm/01-basic/08-greedy/greedy.html":{"ref":"02-algorithm/01-basic/08-greedy/greedy.html","tf":11}}}},"划":{"docs":{},"分":{"docs":{},"区":{"docs":{},"间":{"docs":{},"求":{"docs":{},"极":{"docs":{},"值":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}}}}}}},"取":{"docs":{},"点":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}},"求":{"docs":{},"解":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"特":{"docs":{},"征":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}},"状":{"docs":{},"态":{"docs":{},"$":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"$":{"docs":{},"表":{"docs":{},"示":{"docs":{},"将":{"docs":{},"下":{"docs":{},"标":{"docs":{},"位":{"docs":{},"置":{"docs":{},"$":{"docs":{},"i":{"docs":{},"$":{"docs":{},"到":{"docs":{},"$":{"docs":{},"j":{"docs":{},"$":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"合":{"docs":{},"并":{"docs":{},"能":{"docs":{},"获":{"docs":{},"得":{"docs":{},"的":{"docs":{},"价":{"docs":{},"值":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0028776978417266188}}}}},"，":{"docs":{},"$":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"{":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"k":{"docs":{},")":{"docs":{},"+":{"docs":{},"f":{"docs":{},"(":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"+":{"docs":{},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"}":{"docs":{},"$":{"docs":{},"为":{"docs":{},"将":{"docs":{},"这":{"docs":{},"两":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"合":{"docs":{},"并":{"docs":{},"起":{"docs":{},"来":{"docs":{},"的":{"docs":{},"代":{"docs":{},"价":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"即":{"docs":{},"将":{"docs":{},"两":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"进":{"docs":{},"行":{"docs":{},"整":{"docs":{},"合":{"docs":{},"，":{"docs":{},"当":{"docs":{},"然":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"反":{"docs":{},"过":{"docs":{},"来":{"docs":{},"；":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"整":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"设":{"docs":{},"最":{"docs":{},"优":{"docs":{},"值":{"docs":{},"，":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"合":{"docs":{},"并":{"docs":{},"点":{"docs":{},"，":{"docs":{},"将":{"docs":{},"问":{"docs":{},"题":{"docs":{},"分":{"docs":{},"解":{"docs":{},"为":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"最":{"docs":{},"优":{"docs":{},"值":{"docs":{},"得":{"docs":{},"到":{"docs":{},"原":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"最":{"docs":{},"优":{"docs":{},"值":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"能":{"docs":{},"将":{"docs":{},"问":{"docs":{},"题":{"docs":{},"分":{"docs":{},"解":{"docs":{},"为":{"docs":{},"能":{"docs":{},"两":{"docs":{},"两":{"docs":{},"合":{"docs":{},"并":{"docs":{},"的":{"docs":{},"形":{"docs":{},"式":{"docs":{},"；":{"docs":{"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"ref":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","tf":0.0014388489208633094}}}}}}}}}}}}}}}}}}},"$":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"牛":{"docs":{},"$":{"docs":{},"a":{"docs":{},"$":{"docs":{},"认":{"docs":{},"为":{"docs":{},"牛":{"docs":{},"$":{"docs":{},"b":{"docs":{},"$":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"。":{"docs":{},"这":{"docs":{},"种":{"docs":{},"关":{"docs":{},"系":{"docs":{},"是":{"docs":{},"具":{"docs":{},"有":{"docs":{},"传":{"docs":{},"递":{"docs":{},"性":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"$":{"docs":{},"a":{"docs":{},"$":{"docs":{},"认":{"docs":{},"为":{"docs":{},"$":{"docs":{},"b":{"docs":{},"$":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"，":{"docs":{},"$":{"docs":{},"b":{"docs":{},"$":{"docs":{},"认":{"docs":{},"为":{"docs":{},"$":{"docs":{},"c":{"docs":{},"$":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"牛":{"docs":{},"$":{"docs":{},"a":{"docs":{},"$":{"docs":{},"也":{"docs":{},"认":{"docs":{},"为":{"docs":{},"牛":{"docs":{},"$":{"docs":{},"c":{"docs":{},"$":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"。":{"docs":{},"你":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"是":{"docs":{},"求":{"docs":{},"出":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"头":{"docs":{},"牛":{"docs":{},"被":{"docs":{},"除":{"docs":{},"自":{"docs":{},"己":{"docs":{},"之":{"docs":{},"外":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"牛":{"docs":{},"认":{"docs":{},"为":{"docs":{},"是":{"docs":{},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"的":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}},"割":{"docs":{},"点":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}},"与":{"docs":{},"桥":{"docs":{},"：":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"受":{"docs":{},"欢":{"docs":{},"迎":{"docs":{},"的":{"docs":{},"牛":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"图":{"docs":{},"的":{"docs":{},"连":{"docs":{},"通":{"docs":{},"性":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}},"应":{"docs":{},"用":{"docs":{},"场":{"docs":{},"合":{"docs":{},"：":{"docs":{},"有":{"docs":{},"向":{"docs":{},"图":{"docs":{},"、":{"docs":{},"有":{"docs":{},"两":{"docs":{},"两":{"docs":{},"可":{"docs":{},"达":{"docs":{},"条":{"docs":{},"件":{"docs":{},"、":{"docs":{},"通":{"docs":{},"过":{"docs":{},"把":{"docs":{},"每":{"docs":{},"个":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"缩":{"docs":{},"点":{"docs":{},"从":{"docs":{},"而":{"docs":{},"把":{"docs":{},"原":{"docs":{},"图":{"docs":{},"化":{"docs":{},"简":{"docs":{},"成":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.003054989816700611}}}}}}},"把":{"docs":{},"图":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"缩":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"原":{"docs":{},"图":{"docs":{},"就":{"docs":{},"缩":{"docs":{},"成":{"docs":{},"了":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"树":{"docs":{},"，":{"docs":{},"要":{"docs":{},"加":{"docs":{},"的":{"docs":{},"边":{"docs":{},"数":{"docs":{},"就":{"docs":{},"是":{"docs":{},"(":{"docs":{},"所":{"docs":{},"有":{"docs":{},"度":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"点":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"爆":{"docs":{},"栈":{"docs":{},"了":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}},"直":{"docs":{},"接":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"j":{"docs":{},"a":{"docs":{},"n":{"docs":{},"缩":{"docs":{},"点":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"如":{"docs":{},"果":{"docs":{},"出":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"点":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"这":{"docs":{},"个":{"docs":{},"点":{"docs":{},"包":{"docs":{},"含":{"docs":{},"的":{"docs":{},"原":{"docs":{},"先":{"docs":{},"的":{"docs":{},"点":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"为":{"0":{"docs":{},"；":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"给":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"边":{"docs":{},"的":{"docs":{},"无":{"docs":{},"向":{"docs":{},"图":{"docs":{},"，":{"docs":{},"求":{"docs":{},"至":{"docs":{},"少":{"docs":{},"加":{"docs":{},"入":{"docs":{},"几":{"docs":{},"条":{"docs":{},"边":{"docs":{},"使":{"docs":{},"整":{"docs":{},"个":{"docs":{},"图":{"docs":{},"成":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"边":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"视":{"docs":{},"频":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.002036659877800407}}}},"连":{"docs":{},"通":{"docs":{},"性":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":10}}}}},"针":{"docs":{},"对":{"docs":{},"于":{"docs":{},"无":{"docs":{},"向":{"docs":{},"图":{"docs":{},"：":{"docs":{},"点":{"docs":{},"双":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"和":{"docs":{},"边":{"docs":{},"的":{"docs":{},"连":{"docs":{},"联":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"向":{"docs":{},"图":{"docs":{},"，":{"docs":{},"在":{"docs":{},"这":{"docs":{},"儿":{"docs":{},"先":{"docs":{},"明":{"docs":{},"确":{"docs":{},"两":{"docs":{},"个":{"docs":{},"定":{"docs":{},"义":{"docs":{},"：":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"和":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"。":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"是":{"docs":{},"指":{"docs":{},"有":{"docs":{},"向":{"docs":{},"图":{"docs":{},"$":{"docs":{},"g":{"docs":{},"$":{"docs":{},"中":{"docs":{},"任":{"docs":{},"意":{"docs":{},"两":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"连":{"docs":{},"通":{"docs":{},"。":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"是":{"docs":{},"极":{"docs":{},"大":{"docs":{},"的":{"docs":{},"强":{"docs":{},"连":{"docs":{},"通":{"docs":{},"子":{"docs":{},"图":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"ref":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","tf":0.0010183299389002036}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"入":{"docs":{},"度":{"docs":{},"数":{"docs":{},"组":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.002036659877800407}}}}}},"拓":{"docs":{},"扑":{"docs":{},"排":{"docs":{},"序":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":10.0020366598778}}}}}},"顶":{"docs":{},"点":{"docs":{},"数":{"docs":{},"、":{"docs":{},"边":{"docs":{},"数":{"docs":{"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"ref":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","tf":0.004073319755600814}}}}}}}},"此":{"docs":{},"处":{"docs":{},"j":{"docs":{},"=":{"0":{"docs":{},"处":{"docs":{},"理":{"docs":{},"不":{"docs":{},"可":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"情":{"docs":{},"形":{"docs":{},"，":{"docs":{},"可":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"直":{"docs":{},"接":{"docs":{},"注":{"docs":{},"释":{"docs":{},"掉":{"docs":{},"即":{"docs":{},"可":{"docs":{"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"ref":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"以":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"解":{"docs":{},"决":{"docs":{},"回":{"docs":{},"文":{"docs":{},"子":{"docs":{},"串":{"docs":{},"问":{"docs":{},"题":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}}}}}}}}}}}}}}}}},"马":{"docs":{},"拉":{"docs":{},"车":{"docs":{"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"ref":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","tf":0.006289308176100629}}}}},"四":{"docs":{},"则":{"docs":{},"运":{"docs":{},"算":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"尽":{"docs":{},"管":{"docs":{},"已":{"docs":{},"经":{"docs":{},"有":{"docs":{},"了":{"docs":{},"如":{"docs":{},"此":{"docs":{},"方":{"docs":{},"便":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"下":{"docs":{},"面":{"docs":{},"还":{"docs":{},"是":{"docs":{},"给":{"docs":{},"出":{"docs":{},"具":{"docs":{},"体":{"docs":{},"实":{"docs":{},"现":{"docs":{},"细":{"docs":{},"节":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"作":{"docs":{},"为":{"docs":{},"模":{"docs":{},"板":{"docs":{},"使":{"docs":{},"用":{"docs":{},"。":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"小":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}},"转":{"docs":{},"换":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}},"进":{"docs":{},"行":{"docs":{},"构":{"docs":{},"造":{"docs":{},"，":{"docs":{},"保":{"docs":{},"证":{"docs":{},"精":{"docs":{},"度":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}}}}}},"高":{"docs":{},"精":{"docs":{},"度":{"docs":{},"运":{"docs":{},"算":{"docs":{"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"ref":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","tf":0.003105590062111801}}}}}}},"乘":{"docs":{},"法":{"docs":{},"快":{"docs":{},"速":{"docs":{},"幂":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"快":{"docs":{},"速":{"docs":{},"幂":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}}}}},"配":{"docs":{},"合":{"docs":{"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"ref":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","tf":0.004545454545454545}}}},"素":{"docs":{},"数":{"docs":{},"筛":{"docs":{},"法":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}},"经":{"docs":{},"典":{"docs":{},"筛":{"docs":{},"法":{"docs":{"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"ref":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","tf":0.005917159763313609}}}}}}},"length":7010},"corpusTokens":["!=","!dfs(v)))","!search(word))","!stack.isempty()","!stack.isempty())","!tokenizer.hasmoretokens())","!visited[i","\"","\"\",","\"\".","\"((()))\",","\"(()())\",","\"(())()\",","\"()(())\",","\"()()()\"","\");","\"*\"","\"*a*b\"","\"...q\",","\"..q.\"],","\".q..\"]","\"0\"","\"0\";","\"10\",","\"10200\",","\"1111\"","\"1219\"","\"1432219\",","\"2","\"2*3","\"200\"","\"?a\"","\"a","\"a\"","\"a*c?b\"","\"aa\"","\"aa\".","\"aaa\"","\"aaabbb\"","\"aababba\",","\"aabbbba\".","\"ab\"","\"ab\",","\"ab\".","\"aba\"","\"abab\"","\"abab\",","\"abc\"","\"abc\",","\"abc\".","\"abcabcbb\"","\"abcb\",","\"abcced\",","\"abcde\"","\"abcde\",","\"acdcb\"","\"ace\"","\"adceb\"","\"adjacent\"","\"adobecodebanc\",","\"aec\"","\"at\",","\"atlant","\"b\"","\"b\",","\"ba\",","\"bab\"","\"babad\"","\"bac\",","\"banc\"","\"bb\"","\"bb\".","\"bbb\".","\"bbbab\"","\"bbbb\"","\"bbbb\".","\"bbbbb\"","\"caebd\"","\"cb\"","\"cba\",","\"cbaebabacd\"","\"cbbd\"","\"cog\"","\"cog\",","\"curly\");","\"dce\".","\"def\"","\"dog\"","\"dot\"","\"eat\"","\"execution\"","\"gr\"","\"great\",","\"great\".","\"great\":","\"hit\"","\"hit\",","\"horse\",","\"hot\"","\"intention\",","\"moe\",","\"null\\n\");","\"pacif","\"pwke\"","\"pwwkew\"","\"q...\",","\"rgeat\"","\"rgeat\".","\"rgtae\"","\"rgtae\".","\"ros\"","\"see\",","\"wke\",","\"单调\"","\"规律\"——递增（或递减）","\"队列\"","$，表示牛$a$认为牛$b$受欢迎。这种关系是具有传递性的，如果$a$认为$b$受欢迎，$b$认为$c$受欢迎，那么牛$a$也认为牛$c$受欢迎。你的任务是求出有多少头牛被除自己之外的所有牛认为是受欢迎的。","%","%=","%d","%d\\n\",","&","&&","'","'#'","'*'","'*')","'*'.","'+'","'.'","'.');","'.'.","'0'","'0')","'0'));","'0';","'1'","'?'","'a'","'a',","'a'.","'a']","'b'","'b'.","'c')","'c',","'e')","'h'","'i'","'n'","'o'","'o')","'q'","'r')","'t')","'t';","'u')","'x'","'x')","'x'.","(","(!queue.isempty())","(!stack.isempty()","(!stack.isempty())","(!stack1.isempty())","(!stack2.isempty())","(!temp.isempty())","(!uf.union(edge[0],","(((2*3)","((2","((2*(3","((2*3)","((b","((k","((long)nums[i","((long)t","((n","((node.left","()","());","();","(0","(0)","(0,","(1","(1).","(2","(2*((3","(2*(3","(3,6)","(4)","(4*5))","(4*5)))","(5)","(6)","(6,9)","(7)","(;","(;;)","(;;from","(a","(a[maxl]","(a^n)","(arr","(arr[i]","(arr[mid]","(assum","(b","(beginword","(binari","(blue","(board","(both","(bst)","(c)","(c1","(c[i]","(char","(char[]","(cnt","(cur","(cur.left","(cur.next","(cur.right","(cur.val","(doubl","(e[])new","(each","(eg,","(end","(exclusive)","(fa","(figur","(first","(for","(from","(grid","(head","(height","(horizont","(i","(i,","(i.e.","(i.e.,","(ie.","(ie.,","(if","(includ","(inclusive)","(inclusive),","(index","(insert","(int","(int)(math.random()","(int[]","(int[][]","(integ","(ioexcept","(issort)","(j","(k","(l","(l1","(land)","(left)，最右侧的定义为右指针","(low[v]","(m+n)).","(map.containskey(x))","(map.entri","(marked[next])","(matrix","(matrix[i][j]","(maxidx","(maxindex","(mid","(mx","(n","(n1","(next","(node.left","(node.right","(not","(num","(nums.length","(nums[i]","(o1.val","(one","(optional)","(p","(p),","(p.charat(j)","(p1","(p2","(parent[x]","(posit","(postend","(pre","(pre.next","(pre.right","(prefix","(prestart","(q","(r","(r,","(rank[x]","(re","(remov","(replac","(repres","(res.size()","(right","(right)，然后从两头向中间进行数组遍历。","(root","(s","(s)","(s.length()","(s1.length()","(sb.charat(i","(sb.length()","(size","(slow","(squar","(stack.isempty()","(stack.isempty())","(stack.size()","(str.length()","(t[])arraylist.toarray(new","(the","(thi","(token","(treenod","(true)","(up,","(v","(val","(vis[v]","(water),","(which","(with","(word","(x","(y","(zero,","(也可以自定义从小到大)","(还原标记)；",")","*","*.","*/","*left;","*next;","*right;","+","+\"\\n\");","++;","++j;","++tag;","+,","+=",",",".","...","...)","...,","......,","...;","...and","...标记的部分就是可能出现细节问题的地方。","/","/*","/**","/*****************heapfiy优化*****************/","/*****************二分插入排序*****************/","/*****************链表*****************/","//","//construct","//remov","//从arr[i]","//如果加上（还原标记）就是","/=","0","0'","0's,","0)","0));","0).","0);","0){","0,","0.","0.)","00000","00011","00100","02","0:未访问","0;","0],","0]]","0th","0},","0}};","0，把索引闭区间","1","1\"","1'","1's,","1)","1))","1)));","1));","1).","1)/2","1);","1)]","1)的数组b，其中b中index元素记录的值是a中index出现的次数，累加数组b(其中b[index]存储小于等于index的元素个数)，最后从后往前遍历序列a，将其放到辅助数组aux相应位置。","1*1*1","1*1*3","1*1*4","1*1*5","1*3*8","1*8*1","1,","1.","1.5","1.6","10","10)","10,","10.","100","100.","1000.","10000;","10002","1039.","104.","105.","106.","1089.","1091.","10;","10]","10]]","11,","11.","11000","11010","11110","1143.","117.","12","12,","1219","127.","128.","13","13,","13.","130.","14","14,","141.","142.","144","144.","147.","148.","15","150.","153.","154.","155.","15],","16,","164.","167","167.","17,","18.","19],","1:","1:55","1:已访问","1;","1]","1])","1]))","1],","1].","1]:2","1];","1][j","1][j]","1][n","1st","1},","1};","1}};","1、我们在字符串","1、路径：也就是已经做出的选择。","1次建堆，完成排序。","2","2's,","2's.","2)","2);","2*nums[j].","2,","2,5,","2.","2.0","2.0;","2.5","2.82842...,","20","20,","20,100.","200,","200.","2000","2020","207.","208.","209.","20],","21,","21.","210.","215.","216.","22.","220.","225.","22],","23,","232.","234.","239.","240.","241.","245,","24],","25","26,","26;","274.","279.","283.","287.","2:","2:访问中","2;","2]","2])","2],","2];","2d","2nd","2x","2、我们先不断地增加","2、选择列表：也就是你当前可以做的选择。","3","3)/2","3);","3*1*5","3*4*5","3*4*7","3*5*8","3*7*5","3,","3.","30,","300.","307.","30]","312.","315.","32","327.","32768);","33.","34","34,","34.","344.","349.","35.","350.","37.","39.","3:","3;","3]","3],","3sum","3sum16.","3x3","3、此时，我们停止增加","3、结束条件：也就是到达决策树底层，无法再做选择的条件。","4","4))*5)","4)*5)","4)*5))","4*5\"","4*5*7","4,","4.","40.","402.","417.","42.","424.","438.","44.","46.","47.","49","49.","493.","4:","4]","4],","4].","4sum167.","4、重复第","5","5,","5.","50,000.","50.","500,","50]","51.","516.","547.","5:","5]","5x5","6","6,","6.","6000.","664.","684.","685.","69.","695.","6]","7","7,","7.","707.","719.","72.","74.","75.","76.","77.","78.","79.","7],","8","8,","8.","81.","84.","87.","88.","9","9,","9.","90.","95.","99.","9x9.",":",";","=","=0","==",">",">\");",">1",">2",">3",">=",">>=",">中值",">右中值","?","@author","@creat","@lc","@overrid","@param","@return","[","[\"..q.\",","[\".q..\",","[\"h\",\"a\",\"n\",\"n\",\"a\",\"h\"]","[\"h\",\"e\",\"l\",\"l\",\"o\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]","[\"mylinkedlist\",\"addathead\",\"addattail\",\"addatindex\",\"get\",\"deleteatindex\",\"get\"]","[\"o\",\"l\",\"l\",\"e\",\"h\"]","['a','b','c','e'],","['a','d','e','e']","['s','f','c','s'],","[0,","[0,0,0,0,0,0,0,0,0,0,1,0,0],","[0,0,0,0,0,0,0,1,1,0,0,0,0]]","[0,0,0,0,0,0,0,1,1,1,0,0,0],","[0,0,1,1,2,2]","[0,0,1,2,2,5,6]","[0,0,1]]","[0,0],","[0,1,0,0,1,1,0,0,1,0,1,0,0],","[0,1,0,0,1,1,0,0,1,1,1,0,0],","[0,1,0,2,1,0,1,3,2,1,2,1]","[0,1,0,2,1,0,1,3,2,1,2,1].","[0,1,0,3,12]","[0,1,1,0,1,0,0,0,0,0,0,0,0],","[0,1,1]]","[0,1,2,3]","[0,1,2,3].","[0,1,2,4,5,6,7]","[0,1]","[0,2,1,3]","[0,2]","[1,","[1,#,2,3,#,4,5,7,#]","[1,0,0,2,3,0,0,4]","[1,0,1,1],","[1,0,2,3,0,4,5,0]","[1,1,0],","[1,1,1],","[1,1,2]","[1,1,2],","[1,2,1],","[1,2,2,1],","[1,2,2,3,5,6]","[1,2,2]","[1,2,2],","[1,2,3,0,0,0],","[1,2,3,1],","[1,2,3,4,5,null,7]","[1,2,3]","[1,2,3],","[1,200].","[1,2]","[1,2],","[1,3,1,4,1,5]","[1,3,12,0,0]","[1,3,2,3,1]","[1,3,2],","[1,3,4,2,2]","[1,3,5,6],","[1,3,6,9],","[1,3,null,null,2]","[1,3],","[1,4]","[1,4],","[1,5,9,1,5,9],","[1,5]]","[1,8,6,2,5,4,8,3,7]","[1,8,6,2,5,4,8,3,7].","[1,null,2,null,3]","[1,null,3,2],","[1..n]","[10,","[10,9,2,5,3,7,101,18]","[100,","[105]","[106]","[1089]","[1091]","[10]","[117]","[11]","[127]","[130]","[141]","[142]","[155]","[164]","[167]","[18,","[1],","[2,","[2,0,2,1,1,0]","[2,1,1,0]","[2,1,1]","[2,1,3],","[2,1,4,null,null,3]","[2,1,5,6,2,3]","[2,1,5,6,2,3].","[2,2]","[2,2],","[2,3,1,2,4,3]","[2,3,1],","[2,3,7,101],","[2,3]","[2,3],","[2,3]]","[2,4,3,5,1]","[2,4],","[2,5,6,0,0,1,2]).","[2,5,6,0,0,1,2],","[2,5,6],","[2,7,11,15],","[200]","[207]","[208]","[209]","[210]","[215]","[220]","[225]","[22]","[23,","[232]","[234]","[240]","[241]","[274]","[279]","[283]","[287]","[2]","[2],","[3,","[3,0,6,1,5]","[3,1,2],","[3,1,3,4,2]","[3,1,4,null,null,2]","[3,1,5,8]","[3,1,null,null,2]","[3,1,null,null,2],","[3,2,0,","[3,2,1,5,6,4]","[3,2,1]","[3,2,3,1,2,4,5,5,6]","[3,2,null,1],","[3,4]","[3,4],","[3,5,8]","[3,6,9,1]","[3,7,4,5]","[3,8]","[3,9,20,15,7]","[307]","[315]","[33]","[344]","[349]","[34]","[350]","[35]","[37]","[3]","[3],","[4,","[4,1]","[4,1],","[4,3]","[4,5,6,7,0,1,2]).","[4,5,6,7,0,1,2],","[4,9,5],","[4,9]","[402]","[417]","[424]","[438]","[46]","[47]","[493]","[4]","[5,2,6,1]","[5,7,7,8,8,10],","[51]","[547]","[5]","[684]","[685]","[695]","[69]","[707]","[74]","[75]","[76]","[77]","[78]","[79]","[81]","[88]","[8]","[9,15,7,20,3]","[9,3,15,20,7]","[9,4,9,8,4]","[9,4]","[90]","[95]","[[0,","[[0,0,0,0,0,0,0,0]]","[[0,0,0],[1,1,0],[1,1,0]]","[[0,0,1,0,0,0,0,1,0,0,0,0,0],","[[0,1],[1,0]]","[[1,0],[0,1]]","[[1,0],[2,0],[3,1],[3,2]]","[[1,0]]","[[1,1,0],","[[1,2],","[[],[1],[3],[1,2],[1],[1],[1]]","[]","[l,r],","[left,","[lower,","[null,null,null,null,2,null,3]","[two,","[u,","\\","]","];","^","_left,","_left;","_next)","_next;","_right,","_right;","_val)","_val,","_val;","a)","a),","a);","a,","a.abs();","a.add(b);","a.compareto(b);","a.divide(b);","a.equals(b);","a.gcd(b);","a.intvalue();","a.length","a.length;","a.max(b);","a.min(b);","a.mod(b);","a.multiply(b);","a.negate();","a.pow(b);","a.subtract(b);","a1,","a2","a2)","a2,","a;","a[0],","a[i","a[i]","a[i],","a[n","abov","above.","absolut","accord","achiev","acm","actual","ad","add","add(","add(0,","add(int","add(size,","add(str","add)","addal","addall(collect","addathead(val)","addathead,","addatindex","addatindex(index,","addattail(val)","addattail,","added.","addfirst(","addit","addlast(","addnode(doublelinkednod","addnode(node);","adjac","adjacent,","adjacent.","affect","ai)","ai).","algorithm","algorithm'","algorithm?","alloc","alphabet","alreadi","although","alway","an","anagram","anoth","ans)","ans++;","ans.add(new","ans;","ans[i","answer","answer.","answers,","anyth","api","app=leetcod","appear","append","approach","are:","area","area,","area;","args)","arr","arr)","arr){","arr,","arr.length","arr.length;","arr;","arr[(i","arr[0],","arr[0];","arr[])","arr[],","arr[i","arr[i]","arr[i];","arr[index++]","arr[j","arr[j]","arr[j])","arr[j].val)","arr[j];","arr[l]","arr[l];","arr[maxidx])","arr[maxindex]","arr[r]","arr[stack.peek()])","array","array'","array()","array(int","array)","array){","array,","array.","array.)","array.length","array.length;","array141.","array315.","array:","array;","arraydequ","arraydeque();","arraydeque<>());","arraydeque<>();","arrayindexoutofboundsexcept","arraylise<>();","arraylist","arraylist<>();","arraylist<>(stack));","arraylist[]","arraylist[n","arraylist[n];","arrays,","arrays.","arrays.aslist(\"larry\",","arrays.fill(isprime,","arrays.fill(row,","arrays.sort(new","arrays.sort(nums);","arrays.sort(nums1);","arrays.sort(nums2);","arrays350.","arraystoreexcept","arr}.","ascend","ascii","ask","aslist","aslist(t...","associ","assum","atlant","attack","attribut","attributes:","aux","aux;","aux[","axi","b","b)","b);","b,","b.","b.col);","b;","b[i];","back","back,","backtrack(路径,","balloon","balloons,","balloons.","bar","based)个位置的元素","based)个位置的元素为","based)位置添加新的元素","based)位置的元素,","based.","basic","bcc","bcc.add(tmp);","bcc;","bcccnt","bcccnt++;","bcccnt;","be","be:","becom","befor","beforehand.","begins.","beginword","beginword,","below","below:","better","better?","between","beyond","bf","bfs(node","big","bigdecim","bigfactorial(int","biginteg","biginteger(\"123\");","biginteger(string.valueof(0));","biginteger.vauleof(123);","binari","binaryindexedtree(int[]","binaryindexedtree{","binarysearch","binarysearch(int[]","binarysearch(object[]","bit","block","blue","blue,","blue.","board","board)","board,","board.length","board.length;","board;","board[0].length","board[0].length;","board[r][c]","boolean","boolean[9][10];","boolean[]","boolean[][]","boolean[][][]","boolean[graphic.length];","boolean[m","boolean[m][n];","boolean[n","boolean[n];","boolean[n][m];","boolean[n][n][n","boolean[nums.length];","boolean[v];","border","border,","both","bottom","bottom.","box","boxes;","break;","bridgecnt","bridgecnt++;","bridgecnt;","bst'","bst(){","bst(e[]","bst>","bubblesort(int[]","bubblesort(listnod","bucketcount","bucketcount)","buckets.","buckets[idx].add(arr[i]);","bucketsort(int[]","bufferedread","bufferedreader(new","build(int","build(postorder.length","buildgraphic(list","buildgraphic(wordlist);","buildtree(int[]","built","burst","burst,","by:","c","c)","c),","c,","c.","c2)","c[i","c[i]","c_1","c_1,","c_2,","c_i","c_k","c_{i+1}","call","canfinish(int","canreach);","canreacha","canreachp","capac","capacity)","captur","case","case,","catch","cell","cell,","cells.","chang","char","char[]","char[].","char[][]","char[n][n];","charact","character.","characterreplacement(str","characters(can","characters.","characters88.","check","chelper","chessboard","child","children","children,","children.","choos","chosen","circl","circle,","circle.","citat","citations)","citations.length;","class","class.","class:","classcastexcept","clear","clear()","clockwis","clone","clone()","closest","cnt","cnt++;","cnt;","code","code:","code=end","code=start","coer","coin","coins.","col","col)","col;","collect","color","colors215.","cols,","column","column.","combin","combination,","combine(int","come","common","compar","comparator()","compare(nod","compare(t","complex","complexity.","complexity?","compon","compos","comput","configur","connect","connect(nod","consecut","consid","consist","constant","constant)","constant,","constraint.","constraints:","construct","contain","container,","contains(","contains(object","containsal","containsall(collect","containskey","containskey(object","containsnearbyalmostduplicate(int[]","containsvalu","containsvalue(object","contigu","continent,","continu","continue;","contract","contribut","convert","convert(char[][]","convex","coordin","copi","copied,","copyofrang","copyofrange(t[]","cor","corner","corner)","correct","correspond","count","count++;","count[(nums[i]","count[arr[i]","count[i]","count[s.charat(l)","counts[i]","counts[i];","counts[n]++;","counts[num]++;","countsmaller(int[]","countsort1(int[]","countsort2(int[]","cours","courses,","courses.","courses?","coursesmap.entryset())","cover","cs","cur","cur)","cur);","cur++;","cur.left);","cur.left;","cur.next","cur.next.next;","cur.next.v","cur.next.val)","cur.next.val;","cur.next;","cur.right;","cur.val","cur.val)","cur.val;","cur;","current","cycl","cycle,","cycle142.","cycles.","d","d1","d1,","d2","d2;","d[0],","d[1]);","d[1],","data","data.length));","data.length;","data;","data[i","data[i];","data[index]","data[index];","decim","def","defin","definit","deg","deg;","deg[next]","deg[t[0]]++;","delet","deleteatindex(index)","deleteatindex.","depend","depth","depth){","depth,","dequ","deque)","deque,","deque.offer();","deque.offerfirst();","deque.offerfirst(e)))","deque.offerlast();","deque.offerlast(e)))","deque.peek();","deque.peekfirst();","deque.peeklast();","deque.pollfirst();","deque.polllast();","deque.pop();","deque.push();","descend","description:","design","detail","detectcycle(listnod","determin","devis","df","dfn","dfn;","dfn[u])","dfn[u]：深度优先搜索遍历时结点u被搜索的次序","dfn[v]","dfs()","dfs(0);","dfs(board,","dfs(grid,","dfs(int","dfs(int[]","dfs(n,","dfs(nextrow,","dfscnt","dfscnt;","dfs（深度优先搜索）","dfs（）；","dictionary'","diff","differ","diffwaystocompute(input.substring(0,","diffwaystocompute(input.substring(i","diffwaystocompute(str","digit","dimens","dir","dir)","direct","direction","directionally.","discuss","disk,","distanc","distinct","distribut","doubl","doublelinkednod","doublelinkednode{","doubli","down,","dp","dp[0][0];","dp[i","dp[i]","dp[i]);","dp[i][i]","dp[i][j","dp[i][j]","dp[i][j]:","dp[j]","dp[m][j]=true;","dp[m][n]","drawn","dsu","dummi","dummy,","dummy.left","dummy.next;","dummy;","dummyhead","dummyhead.next;","dummyhead;","duplic","duplicates,","duplicates.","duplicatezeros(int[]","e","e)","e);","e){","e,","e.tostring();","e;","e[]","each","each,","each.\"","eat","edg","edge;","edge[1]))","edgecycl","edgeremov","edges)","edges,","edges.","edges.length,","edit","effici","element","element.","elements'","elements,","elements.","elev","empti","empty\");","empty()","empty)","empty.","end","end)","end);","end,","end;","endpoint","endword","endword),","endword,","end};","enent","english","enough","enough;","entir","entry:","entryset","entryset()","equal","equals(object[]","evenly.","exactli","exampl","example,","example:","exce","except","exclusive.","exect","execut","exent","exist","exist(char[][]","exist,","exist.","existed.","exp","exp)","explanation:","explanation:th","express","extra","factorialdigit(int","failed.","fals","false.","false;","fast","fast)","fast.next","fast.next.next;","father","father;","figur","fill","fill(object[]","final","find","find(int","find(map.get(x)));","find(num","find(parent[x]);","find(x)","find(y);","findanagrams(str","findbcce()","findbccve()","findcirclenum(int[][]","findduplicate(int[]","findkthlargest(int[]","findmediansortedarrays(int[]","findmediansortedarrays(nums2,","findorder(int","findpermute(int[]","findpermute(nums,","findpermuteunique(int[]","findpermuteunique(nums,","findredundantconnection(int[][]","findredundantdirectedconnection(int[][]","findscc()","findve()","fine,","finish","first","first,","first.val","first.val;","firstequal(int[]","firstlarge(int[]","firstlargeequal(int[]","fit","fix","flag;","flip","flow","follow","for(;","for(int","for(扩展方式)","form","form.","format,","forward","forward.","found","found.","four","friend","friends,","friends.","friendship","from,","from.right)","from.right,","fromindex","fromindex,","front","front,","function","function,","function.","g","g,","g;","g[cur])","g[t[1]].add(t[0]);","g[u])","gap","gap)","gap220.","gap;","gap]","gcd(a,","gcd(arr[n","gcd(b,","gcd(int","gener","generateavl(array,","generateavl(e[]","generatebststring(nod","generatebststring(node.left,","generatebststring(node.right,","generatebststring(root,","generatedepthstring(int","generateparenthesis(int","generatesquares(int","generatesquares(n);","generatesubtree(1,","generatesubtree(i","generatesubtree(int","generatesubtree(l,","generatetrees(int","get(index)","get(int","get(object","get,","getcapacity()","getmin()","getnext(p);","getnext(str","getshortestpath(graphic,","getsize()","getsize(){","given","gr","graph","graphic","graphic,","graphic[cur])","great","greater","grid","grid)","grid,","grid.","grid.length","grid.length;","grid[0].length;","grid[0][0])","grid[i][j]","grid[n","grid[r][c]","group","guarante","h","h,","hascycle(listnod","hashmap<>();","hashmap、linkedhashmap、treemap","hashset","hashset<>();","hashset、linkedhashset、treeset","head","head)","head){","head,","head.next","head.next.next;","head.next;","head.post","head.post.pr","head.post;","head;","heapsize)","heapsize);","heapsort(int[]","height","height)","height.length","heights)","heights.length","heights.length;","heights[stack.peek()])","heights[top]","helper","helper(0,","helper(int","helper.next;","helper;","here","here,","here.","high","himself","hindex(int[]","hint:","his/her","histogram","histogram'","histogram.","hold","horizont","hors","https://coer.com","https://www.bilibili.com/video/bv1wj411n7u8?from=search&seid=15996420867699793986","i)","i));","i++;","i,","i.","i;","i],","id","id=105","id=106","id=1089","id=1091","id=11","id=117","id=127","id=130","id=141","id=142","id=155","id=164","id=167","id=200","id=207","id=208","id=209","id=210","id=215","id=22","id=220","id=225","id=232","id=234","id=240","id=241","id=274","id=279","id=283","id=287","id=3","id=307","id=315","id=33","id=34","id=344","id=349","id=35","id=350","id=37","id=4","id=402","id=417","id=424","id=438","id=46","id=47","id=493","id=5","id=51","id=547","id=684","id=685","id=69","id=695","id=707","id=74","id=75","id=76","id=77","id=78","id=79","id=81","id=88","id=90","id=95","idea","idx","if(arr","if(fast","if(head.v","if(index","if(l","if(matrix","if(nod","if(stack.size()","if(到达终点状态)","if(扩展方式所达到状态合法)","if(特殊状态)","if(越界或者是不合法状态)","if写清楚，这样就可以清楚地展现所有细节。","ii","ii209.","iii","illeg","illegal.\");","illegalargumentexcept","illegalargumentexception(\"add","illegalargumentexception(\"arr","illegalargumentexception(\"get","illegalargumentexception(\"remov","illegalargumentexception(\"set","illegalargumentexception();","image!","imagin","implement","implicit","import","imposs","impossible.","improv","in,","in.nextint();","inclus","inclusive.","increas","index","index)","index){","index,","index.","index.\");","index1","index2","index2)","index2.","index;","indexed)","indexed.","indexof","indexof(object","indic","indirect","inend)","inend,","inent","inindex","init()","initi","initially,","inord","inorder(root.left);","inorder(root.right);","inorder(treenod","inorder)","inorder);","inorder,","inorder.length","input","input)","input:","inputread","inputreader(inputstream","inputreader(inputstream);","inputstream","inputstreamreader(stream),","insert","insert(str","insert,","inserted.","insertion,","insertionsort(int[]","insertionsort(listnod","instack","instack;","instack[v]","instanc","instanti","instart","instart,","instart;","instead.","int","int[0];","int[100001];","int[26];","int[]","int[][]","int[]{start","int[a.length","int[list.size()];","int[m","int[m];","int[maxl","int[n","int[n1","int[n1];","int[n2];","int[n];","int[n][n];","int[nums.length];","int[r","int[r];","int[row][col];","int[set.size()];","int[v];","integ","integer)","integer,","integer.","integer.max_valu","integer.max_value;","integer.min_value)","integer.parseint(next());","integers)","integers,","intent","interfac","intersect","intersect(int[]","intersection(int[]","intersection.","introduct","invalid,","is:","isbridg","isbridge;","isbridge[v]","isempty()","isempty(){","island","island,","islands.","ismatch(str","isn't","ispalindrome(listnod","ispoint","ispoint;","ispoint[u]","isprime,","isprime[0]","isprime[1]","isscramble(str","issort","it.","iter","ith","j","j)","j),","j++;","j;","java","java.io.bufferedreader;","java.io.inputstream;","java.io.inputstreamreader;","java.io.ioexception;","java.io.outputstream;","java.io.printwriter;","java.util.arraydeque;","java.util.arraylist;","java.util.arrays;","java.util.comparator;","java.util.deque;","java.util.hashmap;","java.util.hashset;","java.util.linkedlist;","java.util.list;","java.util.map;","java.util.queue;","java.util.random;","java.util.set;","java.util.stringtokenizer;","java中priorityqueue默认实现最小堆。","jdk11","job","jth","k","k)","k);","k){","k,","k.","k]","key","key)","key){","key,","key.","key.)","key;","keyset","keyset()","kmp","kmp(string","kmp算法用于解决模式串匹配问题。","kn","kth","k，算法输出","l","l)","l);","l++;","l,","l1","l;","l[top]","label","ladder","ladderlength(str","land","land)","lang=java","language,","larger","largest","largestrectanglearea(int[]","last","lastbucket","lastequal(int[]","lastequalsmall(int[]","lastindexof","lastindexof(object","lastsmall(int[]","lc","lcm(arr[n","lcm(int","lead","leaf","leetcod","left","left)","left,","left;","leftnod","leftnode;","leftval","left，我们都要更新一轮结果。","len","len)","len,","length","length,","length.","lengthoflis(int[]","lengthoflongestsubstring(str","less","letter","letters,","level","level++;","level.","levelorder(treenod","li","library'","library.","lie","limit","line","linear","lines,","link","linkedhashset","linkedlist","linkedlist(){","linkedlist.addathead(1);","linkedlist.addatindex(1,","linkedlist.addattail(3);","linkedlist.deleteatindex(1);","linkedlist.get(1);","linkedlist<>();","list","list)","list,","list.","list.add(nums1[i]);","list912.","list>","list[]","list[n];","listnod","listnode(0);","listnode(int","listnode(int[]","lists23.","lists88.","liuj","load","locat","log","logn","long","long[]","long[n","longest","longestcommonsubsequence(str","longestconsecutive(int[]","longestpalindrome(str","longestpalindromesubseq(str","low","low(v)$，说明u是一个割点，同时把边从栈顶一个个取出，直到遇到了边$(u,v)$，取出的这些边与其关联的点，组成一个点双连通分支。割点可以属于多个点双连通分支，其余点和每条边只属于且属于一个点双连通分支。","low;","low;;","low[u]：以u为根的子树中的结点的dfn的最小值","low[v]","lowbit(i))","lowbit(int","lowbit(j))","lower","lower.","lowercas","m","m)","m,","m.length;","m;","m[i][i]","m[i][j]","m[j][i]","made","main","main(string[]","maintain","make","manach","manacher(str","mani","map","map.get(lc)","map.get(x);","map.getordefault(c,","map.put(bucket,","map.put(c,","map.put(lc,","map.put(num,","map.put(x,","map.remove(lastbucket);","map.size();","map;","mapped,","marco","mark","marked[next]","marked[start]","match","math.max(ans,","math.max(dp[i],","math.max(maxlen,","math.max(n1,","math.max(res,","math.min(p[2","math.min(res,","matrices.","matrix","matrix(a.row,","matrix(int","matrix)","matrix).","matrix,","matrix.","matrix.length","matrix.length,","matrix.length;","matrix:","matrix;","matrix[0].length;","matrix[nextrow][nextcol])","matrix[r][c]","matter.","max","maxarea(int[]","maxareaofisland(int[][]","maxcoins(int[]","maxcount","maxidx","maxidx);","maxidx,","maximum","maximumgap(int[]","maxindex","maxindex);","maxindex;","maxl","maxlen","maxlen;","mean","median","memori","memory.","memory?","merg","merge(arr,","merge(int[]","merge(pair[]","mergesort(arr,","mergesort(int[]","mergesort(nums,","methods.","mid","mid)","mid);","mid,","mid1,","mid2","mid2;","mid;","middl","min","min)","min;","min]]","mindistance(str","minim","minimum","minscoretriangulation(int[]","minstack","minstack()","minstack();","minstack.getmin();","minstack.pop();","minstack.push(","minstack.push(0);","minstack.top();","minsubarraylen(int","minval","minval;","minwindow(str","mistake.","mod","mod)","mod;","modif","modifi","monotonequeue(int[]","monotonestack(int[]","more","morri","morris遍历","move","movenode(doublelinkednod","movezeroes(int[]","much","mul","mul(a,","mul(matrix","mul(res,","mul(str","mulmod(a,","mulmod(long","mulmod(res,","multipl","mutabl","mutual","mx","mylinkedlist","mylinkedlist()","mylinkedlist();","myqueu","myqueue()","myqueue();","mysqrt(int","mystack","mystack()","mystack();","n","n)","n),","n).","n);","n*n","n,","n.","n1","n2","n2)","n2);","n2];","n;","naiv","natively.","natur","nature.","necessari","need","needl","needle.getordefault(c,","needle.put(c,","neg","neighboring.","new","next","next()","next)","next){","next.","next.next","next.next.next;","next.next;","next;","next[0]","next[i","next[j","next[j]","next[j]表示字符串前j+1位最长公共前后缀长度","nextcol","nextcol,","nextint()","ngcd(arr,","ngcd(int","nlcm(arr,","nlcm(int","node","node(","node()","node();","node(){","node(0,","node(int","node(xx,","node)","node,","node.","node.left","node.post","node.post.pr","node.post;","node.pr","node.pre.post","node.pre;","node.right","node.right)))","node;","node[]","node[n","nodes.","node{","non","none)","nosuchelementexcept","not).","not,","not.","note","note:","notes:","noth","now","null","null)","null);","null){","null,","null.","null;","null;)","nullpointerexcept","num","num);","num,","num.charat(i))","num.length();","num;","numarray","numarray(int[]","number","number,","number.","numbers,","numbers.length","numislands(char[][]","nums)","nums,","nums.","nums.length","nums.length){","nums.length;","nums1","nums1'","nums1);","nums1,","nums1.length,","nums1[mid1]","nums1[p","nums1[p1","nums1[p1]","nums2","nums2'","nums2)","nums2,","nums2.","nums2.length;","nums2[j])","nums2[mid2]);","nums2[p2","nums2[p2]","nums;","nums[","nums[0]","nums[0];","nums[fast];","nums[i","nums[i]","nums[i].","nums[i];","nums[j]","nums[j])","nums[left]","nums[n++]","nums[n]","nums[nums[0]];","nums[nums[fast]];","nums[r2]","nums[right]","nums[slow];","numsquares(int","nums，返回这些数字的全部排列。","n×n","o","o(1)","o(1)。","o(1)，只有在个别时刻才会退化为","o(log","o(n","o(n)","o(n).","o(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。","o(n)建树","o(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近","o(n2)","o(n²).","o)","o),","o1,","o1.compareto(o2);","o1.po","o1.val","o2)","o2.po","o2.pos;","o2.val)","o2.val;","obj","obj.empty();","obj.peek();","obj.pop();","obj.push(x);","object","object[]","object[capacity];","obtain","occur","occurr","ocean\"","ocean.","offer","offer(","offerfirst","offerfirst(","offerlast","offerlast(","oi","on","onc","once.","once?","one,","one.","one]:1","only).","only,","only.","onto","oper","operation,","operations.","operators,","operators.","optim","order","order,","order.","orders,","origin","original,","original.length","other,","other.","otherwis","otherwise,","out","out)","out);","out.close();","output","output:","outputstream","outsid","over","overal","overwrit","p","p'","p)","p,","p.charat(i))","p.charat(j)","p.charat(j))","p.left;","p.length();","p.right;","p.tochararray())","p.val","p1","p2","p:","p;","p[0]);","p[1],","p[i]","p[i])","p[i]))","p[i]++;","pacif","pacificatlant","pad","paint","pair","pair(int","pair:","pair[]","pair[nums.length];","pair[r","pairs,","palindrom","palindrome.","paper","papers至少h","param_2","param_3","param_4","parameters:","parent","parent,","parent;","parent[x]","parent[x];","parent[y]","parenthes","parentheses,","parentheses.","parenthesi","parents.","part","partial).","partit","partition(arr,","partition(int[]","pass","path","path++;","path;","pattern","peek","peek()","peek/pop","peekfirst","peekfirst()","peeklast","peeklast()","perfect","perform","permit","permut","permutations.","permute(int[]","permuteunique(int[]","pivot","place","place,","placement,","places,","pleas","plu","plug","pm","po","point","point)","pointcnt","pointcnt++;","pointcnt;","pointer","pointer/refer","pointers,","poll","poll()","pollfirst","pollfirst()","polllast","polllast()","polygon","polygon.","pop","pop()","pop,","popul","pos,","pos;","posit","possibl","possible.","post;","postend,","postord","postorder(root.left);","postorder(root.right);","postorder(treenod","postorder)","postorder);","power","powmod(long","pre","pre);","pre.next","pre.next.val)","pre.next;","pre.right","pre.right;","pre;","prefix","prefix)","prefix.","prefixnum(str","preorder","preorder(root.left);","preorder(root.right);","preorder(treenod","preorder,","preorder.length","prerequisit","prerequisites,","prerequisites.","presenc","present","prestart,","pretti","prev","previou","previous","primary(boolean[]","prime","print","print(pre,","print(treenod","printabl","printer","printwrit","printwriter(outputstream);","privat","problem","problem,","problem.","produc","product","program","properti","properties:","prove","public","purpose.","push","push(","push(int","push(x)","push,","put","put(k","putal","putall(map","puzzl","puzzle.","puzzle...","q.offer(start);","q.size();","q;","quciksort(int[]","queen","queens'","queri","query(ref[i]);","queue","queue),","queue).","queue.","queue.add(n);","queue.add(next);","queue.add(start);","queue.empty();","queue.offer(e)))","queue.offer(new","queue.offer(next);","queue.offer(root);","queue.offer(x);","queue.peek();","queue.poll();","queue.pop();","queue.push(1);","queue.push(2);","queue.size();","queue;","queues.","quickselect(int[]","quickselect(nums,","quicksort(arr,","quicksort(int[]","r","r)","r);","r){","r,","r1","r2;","r;","r[top]","rain","raining.","random","random();","rang","range.","rank","rank;","rank[y])","rank[y]++;","re","read","reader","reader;","real","receiv","recov","recovertree(treenod","rectangl","recurs","recursively.","red,","red.","redixsort(int[]","redud","redund","ref","region","region.","rehead","rehead.next;","rehead.val){","rel","relationship","remain","remappednum);","remov","remove(int","remove(object","remove(str","removeal","removeall(collect","removekdigits(str","removelastnode()","removenode(doublelinkednod","removenode(node);","repeat","replac","repres","represent","represented.","requir","requirements:","res);","res){","res.add(arr[deque.peekfirst()]);","res.add(convert(board));","res.add(integer.valueof(input));","res.add(leftv","res.add(new","res.add(node);","res.add(null);","res.add(num);","res.add(str);","res.add(tmp);","res.append(\"null\");","res.append('[');","res.append(cur","res.append(generatedepthstring(depth)","res.append(string.format(\"array:","res.tostring();","res;","res[0]","res[1]","res[cnt]","research","researcher'","researcher,","reset()","respect","respectively.","result","result.add(路径)","result;","result[k++]","ret","ret;","retain","retainal","retainall(collect","retriev","return","return:","return;","returned.","returns:","revers","reverse(cur.left,","reverse(listnod","reverse(pre,","reverse(slow);","reverse(treenod","reversepairs(int[]","reversestring(char[]","rg","rgeat","rgtae","right","right)","right.","right;","right]","right]，直到窗口中的字符串不再符合要求（不包含","right]，直到窗口中的字符串符合要求（包含了","rightnod","rightnode;","rightval","rightval);","right，转而不断增加","ro","road","root","root)","root,","root;","rors","rose","rotat","row","row,","row.","row;","rows,","rules:","run","runtim","runtimeexception(e);","s","s(i,","s)","s,","s.","s.charat(i)","s.charat(i))","s.charat(l);","s.length","s.length()","s.length(),","s.length();","s1","s1,","s1.","s1.length();","s1.length,","s2","s2)","s2.length())","s2.length;","s:","same","same(int","same.","satisfi","sb","sb.append(\"#\");","sb.append(\"$\");","sb.append((char)(a[i]","sb.append((char)(a[maxl]","sb.append((char)(c[i]","sb.append((char)(res[i]","sb.append(stack.pop());","sb.charat(0)","sb.charat(i","sb.deletecharat(0);","sb.reverse();","sb.tostring();","sccbelong","sccbelong;","sccbelong[v]","scccnt","scccnt++;","scccnt;","sccsz","sccsz;","sccsz[scccnt]++;","schedul","scientist","score","scores:","scrambl","search","search(int[]","search,","search.","searchinsert(int[]","searchmatrix(int[][]","searchrange(int[]","second","second.v","second.val;","section)","selectsort(int[]","self","self493.","sequenc","sequence).","sequence,","sequence.","sequenti","serial","set","set(int","set)","set).","set,","set.add(nums1[i]);","set>","sever","shade","share","shellsort(int[]","shift","shortest","shortestpathbinarymatrix(int[][]","shouldn’t","show","shown","shuffle(int","shuffle(nums);","side","sieve(boolean[]","sieve2(boolean[]","siftdown(arr,","siftdown(int[]","siftdown2(arr,","siftup(int[]","sign","signifi","similarly,","simul","since:","singl","singli","size","size(){","size)","size);","size,","size;","size?","slant","slide","slow","slow.next;","slow;","small","smaller","smaller);","smaller[arr[i].index]","smallest","smallest.","solut","solution,","solution.","solution?","solv","solve(char[][]","solve(int","solvenqueens(int","solver","solver.solve(1,","solvesudoku(char[][]","sort","sort(object[]","sort(t[]","sort.","sortcolors(int[]","sorted344.","sorted?","space","space.","space?","special","specif","specifi","sqrt","sqrt(int","sqrt(x)","squar","stack","stack)","stack).","stack);","stack){","stack.","stack.empty();","stack.isempty();","stack.peek()","stack.peek()));","stack.peek();","stack.pop();","stack.push(1);","stack.push(2);","stack.push(i);","stack.push(node.left);","stack.push(node.right);","stack.push(num.charat(i));","stack.push(nums[i]);","stack.push(p);","stack.push(root);","stack.push(temp.pop());","stack.push(x);","stack.top();","stack1","stack1.pop();","stack1.push(node.left);","stack1.push(node.right);","stack1.push(root);","stack2","stack2.push(node);","stack;","stacks.","standard","start","start);","start,","startswith","startswith(str","static","step","stoog","store","stored,","str,","str1,","str1.tochararray();","str2)","str2){","str2.tochararray();","straight","straightforward,th","strang","strangeprinter(str","stream)","string","string'","string(row));","string,","string.","stringbuild","stringbuilder();","strings.","stringtoken","stringtokenizer(reader.readline());","string，其它类型可转换为","struct","structur","structure.","student","students.","sub","subarray","sublist","sublist(int","subsequ","subsequence'","subsequence,","subsequence.","subset","subsets(int[]","subsets.","subsetswithdup(int[]","substr","substring,","substring.","success","such","such:","sudoku","sum","sum283.","sumrang","sumrange(0,","sums1","sums1;","sums2","sums2;","sums;","sums[i][j];","support","suppos","surprisingli","surround","swap","swap(arr,","swap(int[]","switch","system.in;","system.out.println(entry.getkey());","system.out.println(entry.getvalue());","system.out;","sz","t","t)","t,","t.tochararray())","t[0]);","t[]","t_2,","t_k$，按增量序列个数k对序列进行k趟排序，最后$t_k=1$将整个序列作为一个表来处理。","ta","tae","tag;","tail","tail)","tail.pre;","tail;","take","take,","take.","taken","target","target)","target,","tarjan","tarjan(list[]","task","task();","temp","temp.push(stack.pop());","temp;","test","testedss","testnumber,","text1","text1,","text1.length(),","text2","text2)","text2,","text2.length();","th","thank","that,","that.","that:","them.","therefor","this(","this(10);","this(e,","this(null,","this(val,","this.","this.col","this.g","this.i","this.index","this.left","this.matrix","this.next","this.po","this.right","this.row","this.v","this.val","this.x","this:","this;","those","three","throw","throws:","time","time.","time/space.","tmp","tmp.add(stack.pop());","tmp.add(u);","tmp.add(v);","tmp;","to)","to.","to:","toarray","toarray(t[]","togeth","toindex","toindex)","token","tokenizer.nexttoken();","tokenizer;","top","top()","top,","topologysort{","toposort()","tostr","tostring()","tostring(){","tostring(object[]","total","touch","transform","transformation.","transit","trap","trap(int[]","trapped.","travers","tree","tree)","tree,","tree.","tree:","treenod","treenode(","treenode()","treenode(array[mid]);","treenode(i);","treenode(int","treenode(postorder[postend]);","treenode(preorder[prestart]);","trees)","treeset","tri","triangl","triangle,","triangles.","triangul","triangulated,","triangulation.","triangulations,","tricky...","trie","trie()","trie();","trie.","trie.insert(\"app\");","trie.insert(\"apple\");","trie.search(\"app\");","trie.search(\"apple\");","trie.startswith(\"app\");","trienod","trienode()","trienode();","trienode[26];","trienode[]","trienode[max];","trivial.","true","true);","true,","true.","true;","truncat","truncated,","turn","turn,","twice.","two","twosum","twosum(int[]","type","u","u)","uand","uf","under","undirect","unionfind","unionfind(edges.length","unionfind(int","uniqu","unique.","unit","unit.","unknown","unsort","up","up:","updat","update(1,","update(i,","update(int","update(ref[i],","upper","upper]","uppercas","us","used.","v","v)","v,","v.","v;","v]","val","val)","val,","val.","val;","valid","valid,","valid.","valu","value)","value,","value.","value;","values()","versa.","vertic","vertical.)","vertically.","vertices,","vice","view","violat","vis;","vis[u]","visit","visited.add(start);","visited;","visited[i]","visited[n]","void","want","water","water.","water15.","way","well","whether","while(...){","while(cur","while(fast","while(head","while(rehead","white","white,","whose","why?","width","wikipedia:","wildcard","window","window,","wisely.","within","without","word","word)","word,","word.length()","word1","word1,","word1.length(),","word2","word2)","word2,","word2.","word2.length();","word:","wordlist","wordlist)","wordlist,","wordlist.add(beginword);","wordlist.size();","write","written.","x","x)","x).","x);","x)为桥。","x,","x,int","x.right","x;","y","y)","y,int","y.right","y.right;","y;","yy","yy));","z","z,","z.","z;","z=","zero","zero,","zero.","zero]:0","zeroes.","zeroes287.","{","{0,","{1,","{@code","{{","{{0,","{}","|","||","}","});","};","~","“高级”数据结构——树状数组！","−","≤","≥","。","一样同样需要对已经遍历过的节点进行标记。","三路快排","上时，我们可以快速得到某些字符串的公共前缀。","上浮","下一个要插入的结点","下图是排序算法的性能及稳定性总结。","下次遍历的尾结点是当前结点，每次减少访问最后结点","下沉","下表是排序算法思想相应leetcode的题目索引（持续更新）。","不包含重复元素。","不要吝啬使用指针记录。","两个要点：","个人博客：https://coer.m","个字符与","个字符最长公共子串","个数字的所有组合。","个问题：","中","中使用双指针中的左右指针技巧，初始化","中序遍历：","中的所有字符了）。同时，每次增加","中的所有字符）。","中的高精度运算可以直接调用","乘法快速幂","二分查找","二分查找相关题目索引(持续更新)","二分查找难度极大的一道题","二维","二维树状","交换导致的不稳定性","从下标索引1开始","从前往后比较相邻元素，如果第一个比第二个大，就交换。重复前面的步骤，每次都从最后累积减少一个元素。","从数组中删除index位置的元素,","从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串；","从此，图书馆丢了","从链表中删除index(0","仓库：https://github.com/millione/notes/tree/mast","代码方面，回溯算法的框架：","代码逻辑在处理头结点和尾结点的时候，是否能正常工作？","代码：","以o(n)时间复杂度解决回文子串问题","任意节点的所有子节点所包含的字符都不相同；","优化：如果数组中存储的数据没有任何规律，数组只是被当作一个存储数据的集合，如果将某个数据插入到第k个位置，则可以将第k位的数据搬移到数组元素的最后，把新元素直接放入到第k个位置。","优化：每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正地删除操作，这样就大大减少了删除操作导致的数据搬移。","传入的是差分数组","作为其他数据结构和算法的辅助结构：如后缀树，ac自动机等。","使用一个数组来表示方向位移的技巧。","修改index索引位置的元素为","修改元素","修改操作;","修改链表的第index(0","假设数组中有n个元素，最大值为max，最小值为min，则在排序数组中相邻元素最大间隔不超过ceiling[(max","做选择","偶数","先给出刷题调试用链表结构：","先给出干货，个人总结出的一些常用算法：板子","先给出排序经常会用到的swap函数，用于交换数组中两个位置的值。","先获取序列a中最小值min和最大值max，再开辟长度为(max","先讲个笑话乐呵一下：","先设置固定数量的空桶，再把数据放到对应的桶中，对每个不为空的桶中数据进行排序，最后拼接不为空的桶中数据，输出结果。","入度数组","其核心就是","内部排序","再走l步回到起点","冒泡","冒泡、选择、插入","冒泡排序","分析二分查找技巧：不要出现else，而是把所有情况用els","分治","分治算法可以分三步走：分解","分治算法相应题目索引（持续更新）","分离双指针","分解到某个容易求解的边界之后，进行递归求解。","分解原问题为结构相同的子问题。","划分区间求极值","初始化","删除元素","删除线索","判断是否存在环","判断是否存在环，若存在找出环入口","利用多个字符串的公共前缀来节省存储空间，反之，当我们把大量字符串存储到一棵","到终点","到达字符串","刷题先刷二叉树","前向双指针","前序遍历：","剪枝","割点","割点与桥：","动态数组：均摊时间复杂度一般都等于最好情况时间复杂度。因为在大部分情况下，入栈操作的时间复杂度","区间","区间dp","区间dp，顾名思义，就是需要在一个区间上去进行状态转移，先在小区间进行dp得到最优解，然后再利用小区间的最优解合并求大区间的最优解。","区间修改、区间查询","区间修改、单点查询","十大排序算法","单串li","单点修改、区间查询","单调增栈：用于定位左右小于自己的最近元素","单调栈","单调栈:","单调栈即满足单调性的栈结构。","单调队列","单调队列:","单链表实现","原地操作，从后先前。","原理","参数用来表示状态","参考","及","双串lc","双向bfs优化","双指针","双指针滑动窗口","双指针类型","双连通分量","双连通分量、割点与桥","双连通分量：","双链表实现","取点","受欢迎的牛","可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。","可以把问题转化为查找两个数组中第(n1+n2+1)/2大的数","可解决此题小于等于的情况","合并","合并（union）：将两个子集合并成一个集合。","同前向型","后序遍历：","向所有元素后添加一个新元素","和第","哈希表","四则运算","回溯","回溯法","回溯算法对应题目索引(持续更新)","因此，在使用栈和队列时，个人倾向于使用如下方式：","图的连通性","在","在index索引的位置插入一个新元素","在一个有向无环图中，我们将图中的顶点以线性方式进行排序，使得对于任何的顶点$u$到$v$的有向边","在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪个点（只能删去一个，且不能删$u$和$v$自己）都不能使它们不连通，我们就说$u$和$v$点双连通","在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪条边（只能删去一条）都不能使它们不连通，我们就说$u$和$v$边双连通","在使用jdk11相关的api接口时，stack已经不被推荐使用了，因为它继承自vector，是jdk1.0的产物，设计不够合理且性能低效。","在图$g$中，两个不同的结点$u$和结点$v$之间若存在一条路，则称结点u和结点v是连通的。","在序列中选一个元素为基准值(pivot)，将所有元素比pivot小的放在前面，比pivot大的放在后面，pivot放中间(partit","在归并过程中统计逆序数","在所有元素前添加一个新元素","在未排序序列中找到最小(大)元素放到排序序列起始位置，再从剩余未排序元素中继续寻找最小(大)元素放到已排序序列的末尾，重复步骤直到排序完毕。","在此系统整理下自己杂乱无章的笔记，希望能够自成体系，以供日后温习。","在程序实现","在线阅读：https://coer.me/notes/","在链表的index(0","基数排序","基数排序要求数据可以分割出独立的“位”来比较，而且位之间有递进的关系，即若数据a的高位比数据b的高位大，那剩下的低位就不用比较了。","基数排序要求每一位数据范围不能太大，要可以用线性算法来排序。","基本构造","堆","堆排序","增加元素","增量序列每次减半","大很多。","大数","大数乘法","大数加法","大数计算阶乘位数","大数阶乘","大顶堆，每个结点的值都大于等于其左右孩子结点的值","奇数","如果你了解jvm，你会发现这就是jvm标记清除垃圾回收算法的核心思想。","如果无排序要求可以选用hashset；如果想取出元素的顺序和放入元素的顺序相同，那么可以选用linkedhashset。如果想插入、删除立即排序或者按照一定规则排序可以选用treeset。","如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。","如果链表为空时，代码是否能正常工作？","如果链表只包含一个结点时，代码是否能正常工作？","如果链表只包含两个结点时，代码是否能正常工作？","子集","字典树","字典树的性质","字典树，又称单词查找树，trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来节约存储空间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。","字符串匹配","字符串最长公共前缀：trie","字符串检索：事先将已知的一些字符串（字典）的有关信息保存到","存储键值对映射","它支持两种操作：","实现","实现，其中","宽度优先搜索","宽度优先搜索相应题目索引(持续更新)","对于一个无向图，如果删掉一条边后图中的连通分量数增加了，则称这条边为桥或者割边。","对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。","对于点双连通分支，实际上在求割点的过程中就能顺便把每个点双连通分支求出。建立一个栈，存储当前双连通分支，在搜索图时，每找到一条树$dfn$枝边或后向边(非横叉边)，就把这条边加入栈中。如果遇到某时满足$dfn(u)\\leq","对于边双连通分支，求法更为简单。只需在求出所有的桥以后，把桥边删除，原图变成了多个连通块，则每个连通块就是一个边双连通分支。桥不属于任何一个边双连通分支，其余的边和每个顶点都属于且只属于一个边双连通分支。","对出现的引用次数进行计数，返回结果至多为数组长度n","对撞指针","对撞指针是指在有序数组中，将指向最左侧的索引定义为左指针","对每个序列做插入排序","寻找前驱结点","寻找数组中的每一个元素","将一个规模为n的问题分解为k个规模较小的子问题，这些子问题相互独立且与原问题性质相同。","将子问题的解合并成原问题的解。","将序列分为已排序区间和未排序区间，取未排序区间中的元素，在已排序区间中找到合适的位置将其插入，保证已排序区间一直有序。","将当前队列中的所有节点向四周扩散","将待排序序列构造成一个大顶堆，每次移走堆顶，重复n","将待比较元素补齐为统一长度，从最低位开始依次进行一次排序，当最高位排序完成后，序列就成了有序序列。","将起点加入队列","尽管已经有了如此方便的操作，下面还是给出具体实现细节，也可作为模板使用。","层序遍历：","左右两边离它arr[i]最近的比它大的数","希尔排序","常用","常用操作","常用方法","常用来解决可达性的问题。","并查集","并查集是一种树形的数据结构，顾名思义，它用于处理一些不交集的","应用场合：有向图、有两两可达条件、通过把每个强连通分量缩点从而把原图化简成一棵树。","建图","建树","建树、调试","开始往下调整","强连通分量","归并、快排","归并排序","归并过程中统计","当isbridge[x]为真时，(father[x],","当ispoint[x]为真时，x为割点。","当作为栈使用时，性能比stack好；当作为队列使用时，性能比linkedlist好。","当前结点为i，父亲结点为(i","当前要被插入的结点","循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」，特别简单。","快慢指针","快慢指针也是双指针，但是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如","快慢指针找环入口","快慢指针类似，不同的是快慢指针从后往前，用于合并和替换类型题，防止之前的数据被覆盖。","快速幂","快速排序","思想","思想：","思路很简单，细节是魔鬼。","我们可以用以下几个边界条件来检查链表代码是否正确：","所谓双指针算法，就是指的是在遍历的过程中，不是普通的使用单个指针进行循环访问，而是使用两个相同方向或者相反方向的指针进行扫描，从而达到相应的目的。双指针法充分使用了数组有序这一特征，从而在某些情况下能够简化一些运算，降低时间复杂度。","找到正确插入的位置","找到的路径一定是最短的，但代价就是空间复杂度比","技巧","把图中所有的边双连通分量缩成一个点，原图就缩成了一棵树，要加的边数就是(所有度为1的点的个数","拓扑排序","指的是元素只能从队头和队尾进行操作","指的是元素的的","指针扩大窗口","指针缩小窗口","排列","排序","排序：trie","控制h","控制映射到同一个桶中不同元素的差值不超过t，同时桶的数量不超过k(移除最早进桶元素)","提前结束","插入位置在pre和pre.next之间","插入排序","插入操作","撤销选择","操作)，递归地进行排序。","数据移动","数据结构可视化","数组","数组(array)是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。","数组array下标从1开始","数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为","数论","数论是纯粹数学的分支之一，主要研究整数的性质。","无参数的构造函数，默认数组的容量capacity=10","时间戳优化","时需要考虑以下问题：","映射","是否还原标记根据题意","更新","最基本的二分查找","最大公约数、最小公倍数","最大最小值","最终，检测了","有一天阿东到图书馆借了","朋友的朋友就是朋友。","本书。","本书，出图书馆的时候，警报响了，于是保安把阿东拦下，要检查一下哪本书没有登记出借。阿东正准备把每一本书在报警器下过一下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第一堆过一下报警器，报警器响；于是再把这堆书分成两堆……","构造函数，传入数组的容量capacity构造array","构造对象最好使用","查找数组中是否有元素e","查找最后一个小于key","查找最后一个小于等于key","查找最后一个等于key","查找第一个大于key","查找第一个大于等于key","查找第一个等于key","查找（find）：确定某个元素处于哪个子集；","查询","查询元素","标记：和","标记：对于遍历过的节点，应该将它标记，防止重复遍历。","标记；","栈和队列","栈底到栈顶:","栈：后进先出；队列：先进先出","栈：用栈来保存当前节点信息，当遍历新节点返回时能够继续遍历当前节点。可以使用递归栈。","树","树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串，便是按字典序排序的结果。","树状数组","树状数组是一个查询和修改复杂度都为$log(n)$的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在log(n)的复杂度下进行范围修改，但是这时只能查询其中一个元素的值。","树状数组是一种用于高效处理对一个存储数字的列表进行更新及求前缀和的数据结构。","树状数组详细解析","树状数组黑科技讲义","核心数据结构","根据题意来添加","根据题意添加","根节点（root）不包含字符，除根节点外的每一个节点都仅包含一个字符；","框架","桶排序","桶排序对排序的数据要求非常苛刻。需要足够均匀，否则桶内排序就不是常量了。","桶排序适用于外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。","模板","次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。","此处j=0处理不可重叠情形，可重叠直接注释掉即可","步在优化这个「可行解」，最终找到最优解。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。","步相当于在寻找一个「可行解」，然后第","步，直到","每一头牛的愿望就是变成一头最受欢迎的牛。现在有$n$头牛，给你$m$对整数$(a,b)","每次保证堆的性质","每次增长一个。","每次增长两个，slow","比较大小","求解","注意判断条件","注意这儿是n，因为还没有swap","注意这里","深度优先搜索","深度优先搜索相应题目索引(持续更新)","滑动窗口","滑动窗口相应题目索引(持续更新)","滑动窗口算法可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。","滑动窗口算法的思路是这样：","满足结束条件:","爆栈了！！！","父亲结点为i，左孩子结点为2*i+1，右孩子结点为2*i+2","特征","状态$dp[i][j]$表示将下标位置$i$到$j$的所有元素合并能获得的价值的最大值，那么","生成以node为根节点，深度为depth的描述二叉树的字符串","用arr[l]作为划分点","用于大整数运算，","用于高浮点型数据运算。","用来求出在数组的某个区间范围内的最值","用途：用来快速寻找一个数组中的每一个元素，左右两边离它最近的比它大（小）的数。","用途：用来求出数组的某个区间范围内的最大值。","由大到小","的前","的区间","的尽头。","的应用","的最主要的区别是：bf","的最近距离","的核心思想应该不难理解的，就是把一些问题抽象成图，从一个点开始，向四周开始扩散。一般来说，我们写","的特点：","直接tarjan缩点，然后如果出度为0的点只有一个，输出这个点包含的原先的点的个数，否则为0；","相关链接","相对","矩阵快速幂","称为一个「窗口」。","第一种双栈","第二种pre","算法","算法都是用「队列」这种数据结构，每次将一个节点周围的所有节点加入队列。","类似","类型","素数筛法","线性","线性dp","线段树","组合","经典筛法","绑定最初索引","给出一个没有重边的无向图，求至少加入几条边使整个图成为一个边双连通分量。","获取index索引位置的元素","获取数组中的元素个数","获取数组的容量","获取链表中的元素个数","获得链表的第index(0","视频","解决","解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考","计数、桶、基数","计数排序","计数排序是桶排序的一种特殊情况，适用于将要排序的n个数据的数据范围不大的情形，且不适用于有负数的情形。","计算","计算从起点","记录扩散的步数","记录最短子串的开始位置和长度","贪心","转换","输入一个可能包含重复数字的数组","输入两个数字","输入是两个数组","返回下次开始的位置，一左一右","返回删除的元素","返回匹配串出现次数","返回数组是否为空","返回链表是否为空","这个思路其实也不难，第","进行构造，保证精度","连通性","选择","选择一个增量序列$t_1,","选择列表)","选择列表):","选择列表:","选择排序","递归遍历","避免走回头路","都可以有$u$在$v$的前面。","都是","配合","里，查找另外一些未知字符串是否出现过或者出现频率。","针对于无向图：点双连通分量和边的连联通分量。","针对于有向图，在这儿先明确两个定义：强连通和强连通分量。强连通是指有向图$g$中任意两个结点连通。强连通分量是极大的强连通子图。","链表","链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。","链表，两个指针分别在两个容器中移动；根据问题的不同，初始位置可能都在头部，或者都在尾部，或一头一尾。","长度为","问题。","问题很简单，输入一个可能包含重复数字的数组，要求算法输出这些数字的所有子集。","问题是指递推方程具有明显的线性关系，有一维线性和二维线性。","队列：用来存储每一轮遍历得到的节点；","防整形溢出","随机选择pivot，防止退化为o(n²)","集","集合","非递归","非递归遍历","顶点数、边数","题号","题意：","题目","题目索引(持续更新)","马拉车","高精度运算","，$f(i,j)=max{f(i,k)+f(k+1,j)+cost}$为将这两组元素合并起来的代价。","：即将两个或多个部分进行整合，当然也可以反过来；","：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。","：能将问题分解为能两两合并的形式；"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"CS-Notes\n在此系统整理下自己杂乱无章的笔记，希望能够自成体系，以供日后温习。\n先给出干货，个人总结出的一些常用算法：板子\n相关链接\n\n仓库：https://github.com/Millione/Notes/tree/master\n在线阅读：https://coer.me/Notes/\n个人博客：https://coer.me\n\n"},"01-data-structrue/basic/01-array/array.html":{"url":"01-data-structrue/basic/01-array/array.html","title":"数组","keywords":"","body":"数组\n\n数组(Array)是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。\n原地操作，从后先前。\n\n数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。\n动态数组：均摊时间复杂度一般都等于最好情况时间复杂度。因为在大部分情况下，入栈操作的时间复杂度 O 都是 O(1)，只有在个别时刻才会退化为 O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近 O(1)。\n\n实现\n1. 基本构造\npublic class Array {\n\n    private E[] data;\n    private int size;\n\n    // 构造函数，传入数组的容量capacity构造Array\n    public Array(int capacity) {\n        data = (E[])new Object[capacity];\n        size = 0;\n    }\n\n    // 无参数的构造函数，默认数组的容量capacity=10\n    public Array() {\n        this(10);\n    }\n\n    // 获取数组的容量\n    public int getCapacity() {\n        return data.length;\n    }\n\n    // 获取数组中的元素个数\n    public int getSize() {\n        return size;\n    }\n\n    // 返回数组是否为空\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder res = new StringBuilder();\n        res.append(String.format(\"Array: size = %d , capacity = %d\\n\", size, data.length));\n        res.append('[');\n        for(int i = 0 ; i \n2. 增加元素\n优化：如果数组中存储的数据没有任何规律，数组只是被当作一个存储数据的集合，如果将某个数据插入到第K个位置，则可以将第K位的数据搬移到数组元素的最后，把新元素直接放入到第K个位置。\n    // 在index索引的位置插入一个新元素e\n    public void add(int index, E e){\n\n        if(index  size)\n            throw new IllegalArgumentException(\"Add failed. Require index >= 0 and index = index ; i --)\n            data[i + 1] = data[i];\n\n        data[index] = e;\n\n        size ++;\n    }\n\n    // 向所有元素后添加一个新元素\n    public void addLast(E e){\n        add(size, e);\n    }\n\n    // 在所有元素前添加一个新元素\n    public void addFirst(E e){\n        add(0, e);\n    }\n\n3. 删除元素\n优化：每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正地删除操作，这样就大大减少了删除操作导致的数据搬移。\n\n如果你了解JVM，你会发现这就是JVM标记清除垃圾回收算法的核心思想。\n\n    // 从数组中删除index位置的元素, 返回删除的元素\n    public E remove(int index){\n        if(index = size)\n            throw new IllegalArgumentException(\"Remove failed. Index is illegal.\");\n\n        E ret = data[index];\n        for(int i = index + 1 ; i \n4. 修改元素\n    // 修改index索引位置的元素为e\n    public void set(int index, E e){\n        if(index = size)\n            throw new IllegalArgumentException(\"Set failed. Index is illegal.\");\n        data[index] = e;\n    }\n\n5. 查询元素\n    // 获取index索引位置的元素\n    public E get(int index){\n        if(index = size)\n            throw new IllegalArgumentException(\"Get failed. Index is illegal.\");\n        return data[index];\n    }\n\n    // 查找数组中是否有元素e\n    public boolean contains(E e){\n        for(int i = 0 ; i \nArrayList\n1. contains\npublic boolean contains(Object o)\n\n\nParameters:\no - element whose presence in this list is to be testedss\n\nReturns:\ntrue if this list contains the specified element\n\n\n2. indexOf\npublic int indexOf(Object o)\n\n\nParameters:\no - element to search for\n\nReturns:\nthe index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element\n\n\n3. lastIndexOf\npublic int lastIndexOf(Object o)\n\n\nParameters:\no - element to search for\n\nReturns:\nthe index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element\n\n\n4. clone\npublic Object clone()\n\n\nReturns:\na clone of this ArrayList instance\n\n\n5. toArray\npublic  T[] toArray(T[] a)\n\nT[] E = (T[])arraylist.toArray(new T[0]);\n\n\nType Parameters:\nT - the component type of the array to contain the collection\n\nParameters:\na - the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose.\n\nReturns:\nan array containing the elements of the list\n\n\n6. clear\npublic void clear()\n\n\nSpecified by:\nclear in interface Collection\n\nSpecified by:\nclear in interface List\n\n\n7. addAll\npublic boolean addAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be added to this list\n\nReturns:\ntrue if this list changed as a result of the call\n\n\n8. removeAll\npublic boolean removeAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be removed from this list\n\nReturns:\ntrue if this list changed as a result of the call\n\n\n9. retainAll\npublic boolean retainAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be retained in this list\n\nReturns:\ntrue if this list changed as a result of the call\n\n\n10. subList\npublic List subList(int fromIndex, int toIndex)\n\n\nParameters:\nfromIndex - low endpoint (inclusive) of the subList\ntoIndex - high endpoint (exclusive) of the subList\n\nReturns:\na view of the specified range within this list\n\n\nArrays\n1. sort\npublic static void sort(Object[] a)\n\n\nParameters:\na - the array to be sorted\n\nThrows:\nClassCastException - if the array contains elements that are not mutually comparable (for example, strings and integers)\nIllegalArgumentException - (optional) if the natural ordering of the array elements is found to violate the Comparable contract\n\n\npublic static  void sort(T[] a, Comparator c)\n\nArrays.sort(new Comparator() {\n    public int compare(T o1, T o2) {\n        return o1.compareTo(o2);\n    } \n});\n\n\nType Parameters:\nT - the class of the objects to be sorted\n\nParameters:\na - the array to be sorted\nc - the comparator to determine the order of the array. A null value indicates that the elements' natural ordering should be used.\n\nThrows:\nClassCastException - if the array contains elements that are not mutually comparable using the specified comparator\nIllegalArgumentException - (optional) if the comparator is found to violate the Comparator contract\n\n\n2. binarySearch\npublic static int binarySearch(Object[] a, Object key)\n\n\nParameters:\na - the array to be searched\nkey - the value to be searched for\n\nReturns:\nindex of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.\n\nThrows:\nClassCastException - if the search key is not comparable to the elements of the array.\n\n\n3. equals\npublic static boolean equals(Object[] a, Object[] a2)\n\n\nParameters:\na - one array to be tested for equality\na2 - the other array to be tested for equality\n\nReturns:\ntrue if the two arrays are equal\n\n\n4. fill\npublic static void fill(Object[] a, Object val)\n\n\nParameters:\na - the array to be filled\nval - the value to be stored in all elements of the array\n\nThrows:\nArrayStoreException - if the specified value is not of a runtime type that can be stored in the specified array\n\n\n5. copyOfRange\npublic static  T[] copyOfRange(T[] original, int from, int to)\n\n\nType Parameters:\nT - the class of the objects in the array\n\nParameters:\noriginal - the array from which a range is to be copied\nfrom - the initial index of the range to be copied, inclusive\nto - the final index of the range to be copied, exclusive. (This index may lie outside the array.)\n\nReturns:\na new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length\n\nThrows:\nArrayIndexOutOfBoundsException - if from  or from > original.length\nIllegalArgumentException - if from > to\nNullPointerException - if original is null\n\nSince:\n1.6\n\n\n6. asList\npublic static  List asList(T... a)\n\nList stooges = Arrays.asList(\"Larry\", \"Moe\", \"Curly\");\n\n\nType Parameters:\nT - the class of the objects in the array\n\nParameters:\na - the array by which the list will be backed\n\nReturns:\na list view of the specified array\n\n\n7. toString\npublic static String toString(Object[] a)\n\n\nParameters:\na - the array whose string representation to return\n\nReturns:\na string representation of a\n\nSince:\n1.5\n\n\n题目\n1089. duplicate-zeros\n\nDescription:\nGiven a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.\nNote that elements beyond the length of the original array are not written.\nDo the above modifications to the input array in place, do not return anything from your function.\nExample 1:\nInput: [1,0,2,3,0,4,5,0]\nOutput: null\nExplanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]\nExample 2:\nInput: [1,2,3]\nOutput: null\nExplanation: After calling your function, the input array is modified to: [1,2,3]\nNote:\n\n1 \n0 \n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=1089 lang=java\n *\n * [1089] Duplicate Zeros\n */\n\n// @lc code=start\nclass Solution {\n    public void duplicateZeros(int[] arr) {\n        int cnt = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                cnt++;\n            }\n        }\n        int n = arr.length;\n        int i = n - 1;\n        while (cnt != 0) {\n            if (arr[i] == 0) {\n                cnt--;\n                if (i + cnt \n参考\nArrayList JDK11\nArrays JDK11\nLeetcode\n"},"01-data-structrue/basic/02-linkedlist/linkedlist.html":{"url":"01-data-structrue/basic/02-linkedlist/linkedlist.html","title":"链表","keywords":"","body":"链表\n\n链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。\n不要吝啬使用指针记录。\n\n我们可以用以下几个边界条件来检查链表代码是否正确：\n\n如果链表为空时，代码是否能正常工作？\n如果链表只包含一个结点时，代码是否能正常工作？\n如果链表只包含两个结点时，代码是否能正常工作？\n代码逻辑在处理头结点和尾结点的时候，是否能正常工作？\n\n先给出刷题调试用链表结构：\n/**\n * 链表\n * https://coer.com\n *\n * @author LiuJ\n * @create 2020-02-25-1:55 PM\n */\n\npublic class ListNode {\n\n    public int val;\n    public ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n\n    public ListNode(int[] arr){\n        if(arr == null || arr.length == 0){\n            throw new IllegalArgumentException(\"arr can not be empty\");\n        }\n        this.val = arr[0];\n        ListNode cur = this;\n        for(int i = 1; i \");\n            cur = cur.next;\n        }\n        res.append(\"NULL\");\n        return res.toString();\n    }\n}\n\n单链表实现\n1. 基本构造\npublic class LinkedList {\n\n    private class Node{\n        public E e;\n        public Node next;\n\n        public Node(E e, Node next){\n            this.e = e;\n            this.next = next;\n        }\n\n        public Node(E e){\n            this(e, null);\n        }\n\n        public Node(){\n            this(null, null);\n        }\n\n        @Override\n        public String toString(){\n            return e.toString();\n        }\n    }\n\n    private Node dummyHead;\n    private int size;\n\n    public LinkedList(){\n        dummyHead = new Node();\n        size = 0;\n    }\n\n    // 获取链表中的元素个数\n    public int getSize(){\n        return size;\n    }\n\n    // 返回链表是否为空\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    @Override\n    public String toString(){\n        StringBuilder res = new StringBuilder();\n\n        Node cur = dummyHead.next;\n        while(cur != null){\n            res.append(cur + \"->\");\n            cur = cur.next;\n        }\n        res.append(\"NULL\");\n\n        return res.toString();\n    }\n}\n\n2. 增加元素\n    // 在链表的index(0-based)位置添加新的元素e\n    public void add(int index, E e){\n\n        if(index  size)\n            throw new IllegalArgumentException(\"Add failed. Illegal index.\");\n\n        Node prev = dummyHead;\n        for(int i = 0 ; i \n3. 删除元素\n    // 从链表中删除index(0-based)位置的元素, 返回删除的元素\n    public E remove(int index){\n        if(index = size)\n            throw new IllegalArgumentException(\"Remove failed. Index is illegal.\");\n\n        Node prev = dummyHead;\n        for(int i = 0 ; i \n4. 修改元素\n    // 修改链表的第index(0-based)个位置的元素为e\n    public void set(int index, E e){\n        if(index = size)\n            throw new IllegalArgumentException(\"Set failed. Illegal index.\");\n\n        Node cur = dummyHead.next;\n        for(int i = 0 ; i \n5. 查询元素\n    // 获得链表的第index(0-based)个位置的元素\n    public E get(int index){\n\n        if(index = size)\n            throw new IllegalArgumentException(\"Get failed. Illegal index.\");\n\n        Node cur = dummyHead.next;\n        for(int i = 0 ; i \n双链表实现\nclass DoubleLinkedNode{\n    int key;\n    int value;\n    DoubleLinkedNode pre;\n    DoubleLinkedNode post;\n}\n\nprivate DoubleLinkedNode head, tail;\n\nprivate void addNode(DoubleLinkedNode node) {\n    node.pre = head;\n    node.post = head.post;\n    head.post.pre = node;\n    head.post = node;\n}\n\nprivate DoubleLinkedNode removeNode(DoubleLinkedNode node) {\n    node.post.pre = node.pre;\n    node.pre.post = node.post;\n    return node;\n}\n\nprivate void moveNode(DoubleLinkedNode node) {\n    removeNode(node);\n    addNode(node);\n}\n\nprivate DoubleLinkedNode removeLastNode() {\n    DoubleLinkedNode node = tail.pre;\n    return removeNode(node);\n}\n\nLinkedList\n1. peek\npublic E peek()\n\n\nSpecified by:\npeek in interface Deque\n\nSpecified by:\npeek in interface Queue\n\nReturns:\nthe head of this list, or null if this list is empty\n\n\n2. poll\npublic E poll()\n\n\nSpecified by:\npoll in interface Deque\n\nSpecified by:\npoll in interface Queue\n\nReturns:\nthe head of this list, or null if this list is empty\n\n\n3. offer\npublic boolean offer(E e)\n\n\nSpecified by:\noffer in interface Deque\n\nSpecified by:\noffer in interface Queue\n\nParameters:\ne - the element to add\n\nReturns:\ntrue (as specified by Queue.offer(E)))\n\n\n4. offerFirst\npublic boolean offerFirst(E e)\n\n\nSpecified by:\nofferFirst in interface Deque\n\nParameters:\ne - the element to insert\n\nReturns:\ntrue (as specified by Deque.offerFirst(E)))\n\n\n5. offerLast\npublic boolean offerLast(E e)\n\n\nSpecified by:\nofferLast in interface Deque\n\nParameters:\ne - the element to insert\n\nReturns:\ntrue (as specified by Deque.offerLast(E)))\n\n\n6. peekFirst\npublic E peekFirst()\n\n\nSpecified by:\npeekFirst in interface Deque\n\nReturns:\nthe first element of this list, or null if this list is empty\n\n\n7. peekLast\npublic E peekLast()\n\n\nSpecified by:\npeekLast in interface Deque\n\nReturns:\nthe last element of this list, or null if this list is empty\n\n\n8. pollFirst\npublic E pollFirst()\n\n\nSpecified by:\npollFirst in interface Deque\n\nReturns:\nthe first element of this list, or null if this list is empty\n\n\n9. pollLast\npublic E pollLast()\n\n\nSpecified by:\npollLast in interface Deque\n\nReturns:\nthe last element of this list, or null if this list is empty\n\n\n10. push\npublic void push(E e)\n\n\nSpecified by:\npush in interface Deque\n\nParameters:\ne - the element to push\n\n\n11. pop\npublic E pop()\n\n\nSpecified by:\npop in interface Deque\n\nReturns:\nthe element at the front of this list (which is the top of the stack represented by this list)\n\nThrows:\nNoSuchElementException - if this list is empty\n\n\n题目\n707. design-linked-list\n\nDescription:\nDesign your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\nImplement these functions in your linked list class:\n\nget(index) : Get the value of the index-th node in the linked list. If the index is invalid, return -1.\naddAtHead(val) : Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\naddAtTail(val) : Append a node of value val to the last element of the linked list.\naddAtIndex(index, val) : Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\ndeleteAtIndex(index) : Delete the index-th node in the linked list, if the index is valid.\n\nExample:\nInput: \n[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]\nOutput:  \n[null,null,null,null,2,null,3]\n\nExplanation:\nMyLinkedList linkedList = new MyLinkedList(); // Initialize empty LinkedList\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1->2->3\nlinkedList.get(1);            // returns 2\nlinkedList.deleteAtIndex(1);  // now the linked list is 1->3\nlinkedList.get(1);            // returns 3\nConstraints:\n\n0 \nPlease do not use the built-in LinkedList library.\nAt most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.\n\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=707 lang=java\n *\n * [707] Design Linked List\n */\n\n// @lc code=start\nclass MyLinkedList {\n\n    class Node {\n        int val;\n        Node next;\n        public Node(int val, Node next) {\n            this.val = val;\n            this.next = next;\n        }\n        public Node(int val) {\n            this(val, null);\n        }\n        public Node() {\n            this(-1, null);\n        }\n    }\n\n    private Node dummy;\n    private int size;\n\n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n        dummy = new Node();\n        size = 0;\n    }\n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    public int get(int index) {\n        if (index = size) {\n            return -1;\n        }\n        Node cur = dummy.next;\n        for (int i = 0; i  size) {\n            return;\n        }\n        Node pre = dummy;\n        for (int i = 0; i = size) {\n            return;\n        }\n        Node pre = dummy;\n        for (int i = 0; i \n141. linked-list-cycle\n\nDescription:\nGiven a linked list, determine if it has a cycle in it.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\nFollow up:\nCan you solve it using O(1) (i.e. constant) memory?\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=141 lang=java\n *\n * [141] Linked List Cycle\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return false;\n        }\n        ListNode pre = head, cur = head.next.next;\n        while (pre != cur) {\n            if (cur == null || cur.next == null) {\n                return false;\n            }\n            pre = pre.next;\n            cur = cur.next.next;\n        }\n        return true;\n    }\n}\n// @lc code=end\n\n142. linked-list-cycle-ii\n\nDescription:\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return null.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nNote: Do not modify the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n\nFollow-up:\nCan you solve it without using extra space?\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=142 lang=java\n *\n * [142] Linked List Cycle II\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        ListNode pre = head.next;\n        ListNode cur = head.next.next;\n        while (pre != cur) {\n            if (cur == null || cur.next == null) {\n                return null;\n            }\n            pre = pre.next;\n            cur = cur.next.next;\n        }\n        while (head != cur) {\n            head = head.next;\n            cur = cur.next;\n        }\n        return head;\n    }\n}\n// @lc code=end\n\n234. palindrome-linked-list\n\nDescription:\nGiven a singly linked list, determine if it is a palindrome.\nExample 1:\nInput: 1->2\nOutput: false\nExample 2:\nInput: 1->2->2->1\nOutput: true\nFollow up:\nCould you do it in O(n) time and O(1) space?\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=234 lang=java\n *\n * [234] Palindrome Linked List\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        while(fast != null && fast.next != null){\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        if(fast != null){\n            slow = slow.next;\n        }\n        ListNode reHead = reverse(slow);\n        while(reHead != null){\n            if(head.val != reHead.val){\n                return false;\n            }\n            head = head.next;\n            reHead = reHead.next;\n        }\n        return true;\n    }\n    private ListNode reverse(ListNode head){\n        ListNode pre = null;\n        while(head != null){\n            ListNode temp = head.next;\n            head.next = pre;\n            pre = head;\n            head = temp;\n        }\n        return pre;\n    }\n}\n// @lc code=end\n\n参考\nLinkedList JDK11\nLeetCode\n"},"01-data-structrue/basic/03-stack-queue/stack-queue.html":{"url":"01-data-structrue/basic/03-stack-queue/stack-queue.html","title":"栈和队列","keywords":"","body":"栈和队列\n\n栈：后进先出；队列：先进先出\n\n在使用JDK11相关的API接口时，Stack已经不被推荐使用了，因为它继承自Vector，是JDK1.0的产物，设计不够合理且性能低效。\n因此，在使用栈和队列时，个人倾向于使用如下方式：\n// 当作为栈使用时，性能比Stack好；当作为队列使用时，性能比LinkedList好。\nDeque deque = new ArrayDeque();\n\n// stack\ndeque.push();\ndeque.peek();\ndeque.pop();\n\n// queue\ndeque.offer();\ndeque.peek();\ndeque.pop();\n\n// deque\ndeque.offerFirst();\ndeque.offerLast();\ndeque.peekFirst();\ndeque.peekLast();\ndeque.pollFirst();\ndeque.pollLast();\n\nArrayDeque\n1. offer\npublic boolean offer(E e)\n\n\nParameters:\ne - the element to add\n\nReturns:\ntrue (as specified by Queue.offer(E)))\n\nThrows:\nNullPointerException - if the specified element is null\n\n\n2. poll\npublic E poll()\n\n\nReturns:\nthe head of the queue represented by this deque, or null if this deque is empty\n\n\n3. peek\npublic E peek()\n\n\nReturns:\nthe head of the queue represented by this deque, or null if this deque is empty\n\n\n4. push\npublic void push(E e)\n\n\nParameters:\ne - the element to push\n\nThrows:\nNullPointerException - if the specified element is null\n\n\n5. pop\npublic E pop()\n\n\nReturns:\nthe element at the front of this deque (which is the top of the stack represented by this deque)\n\nThrows:\nNoSuchElementException - if this deque is empty\n\n\n题目\n225. implement-stack-using-queues\n\nDescription:\nImplement the following operations of a stack using queues.\n\npush(x) -- Push element x onto stack.\npop() -- Removes the element on top of the stack.\ntop() -- Get the top element.\nempty() -- Return whether the stack is empty.\n\nExample:\nMyStack stack = new MyStack();\n\nstack.push(1);\nstack.push(2);  \nstack.top();   // returns 2\nstack.pop();   // returns 2\nstack.empty(); // returns false\nNotes:\n\nYou must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.\nDepending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.\nYou may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).\n\nDiscussion | Solution\nCode:\nimport java.util.LinkedList;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=225 lang=java\n *\n * [225] Implement Stack using Queues\n */\n\n// @lc code=start\nclass MyStack {\n    private Queue queue;\n    /** Initialize your data structure here. */\n    public MyStack() {\n        queue = new LinkedList<>();\n    }\n\n    /** Push element x onto stack. */\n    public void push(int x) {\n        queue.offer(x);\n        for (int i = 0; i \n232. implement-queue-using-stacks\n\nDescription:\nImplement the following operations of a queue using stacks.\n\npush(x) -- Push element x to the back of queue.\npop() -- Removes the element from in front of queue.\npeek() -- Get the front element.\nempty() -- Return whether the queue is empty.\n\nExample:\nMyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false\nNotes:\n\nYou must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.\nYou may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).\n\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\n/*\n * @lc app=leetcode id=232 lang=java\n *\n * [232] Implement Queue using Stacks\n */\n\n// @lc code=start\nclass MyQueue {\n    private Deque stack;\n    /** Initialize your data structure here. */\n    public MyQueue() {\n        stack = new ArrayDeque<>();\n    }\n\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        Deque temp = new ArrayDeque<>();\n        while (!stack.isEmpty()) {\n            temp.push(stack.pop());\n        }\n        stack.push(x);\n        while (!temp.isEmpty()) {\n            stack.push(temp.pop());\n        }\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        return stack.pop();\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        return stack.peek();\n    }\n\n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return stack.isEmpty();\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n// @lc code=end\n\n155. min-stack\n\nDescription:\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\npush(x) -- Push element x onto stack.\npop() -- Removes the element on top of the stack.\ntop() -- Get the top element.\ngetMin() -- Retrieve the minimum element in the stack.\n\nExample:\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --> Returns -3.\nminStack.pop();\nminStack.top();      --> Returns 0.\nminStack.getMin();   --> Returns -2.\nDiscussion | Solution\nCode:\nimport java.util.Deque;\nimport java.util.ArrayDeque;\n\n/*\n * @lc app=leetcode id=155 lang=java\n *\n * [155] Min Stack\n */\n\n// @lc code=start\nclass MinStack {\n    private Deque stack;\n    private int minVal;\n    /** initialize your data structure here. */\n    public MinStack() {\n        stack = new ArrayDeque<>();\n        minVal = Integer.MAX_VALUE;\n    }\n\n    public void push(int x) {\n        if (x \n参考\nArrayDeque JDK11\n"},"01-data-structrue/basic/04-tree/tree.html":{"url":"01-data-structrue/basic/04-tree/tree.html","title":"树","keywords":"","body":"树\n\n刷题先刷二叉树\n\n常用操作\n1. 建树、调试\npublic class BST> {\n\n    private class Node{\n        public E e;\n        public Node left, right;\n\n        public Node(E e){\n            this.e = e;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public BST(){\n        root = null;\n        size = 0;\n    }\n\n    public BST(E[] array){\n        root = generateAVL(array, 0, array.length - 1);\n        size = array.length;\n    }\n\n    private TreeNode generateAVL(E[] array, int l, int r){\n        if(l > r){\n            return null;\n        }\n        int mid = l + (r - l) / 2;\n        TreeNode node = new TreeNode(array[mid]);\n        node.left = generateAVL(array, l, mid - 1);\n        node.right = generateAVL(array, mid + 1, r);\n        return node;\n    }\n\n    public int size(){\n        return size;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n\n    @Override\n    public String toString(){\n        StringBuilder res = new StringBuilder();\n        generateBSTString(root, 0, res);\n        return res.toString();\n    }\n\n    // 生成以node为根节点，深度为depth的描述二叉树的字符串\n    private void generateBSTString(Node node, int depth, StringBuilder res){\n\n        if(node == null){\n            res.append(generateDepthString(depth) + \"null\\n\");\n            return;\n        }\n\n        res.append(generateDepthString(depth) + node.e +\"\\n\");\n        generateBSTString(node.left, depth + 1, res);\n        generateBSTString(node.right, depth + 1, res);\n    }\n\n    private String generateDepthString(int depth){\n        StringBuilder res = new StringBuilder();\n        for(int i = 0 ; i \n2. 递归遍历\n前序遍历：\npublic void preOrder(TreeNode root) {\n    if (root != null) {\n        // write your code here\n        preOrder(root.left);\n        preOrder(root.right);\n    }\n}\n\n中序遍历：\npublic void inOrder(TreeNode root) {\n    if (root != null) {\n        inOrder(root.left);\n        // write your code here\n        inOrder(root.right);\n    }\n}\n\n后序遍历：\npublic void postOrder(TreeNode root) {\n    if (root != null) {\n        postOrder(root.left);\n        postOrder(root.right);\n        // write your code here\n    }\n}\n\n3. 非递归遍历\n前序遍历：\npublic void preOrder(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    Deque stack = new ArrayDeque<>();\n    TreeNode p = root;\n    while (p != null || !stack.isEmpty()) {\n        while (p != null) {\n            // write your code here\n            stack.push(p);\n            p = p.left;\n        }\n        p = stack.pop();\n        p = p.right;\n    }\n}\n\n中序遍历：\npublic void inOrder(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    Deque stack = new ArrayDeque<>();\n    TreeNode p = root;\n    while (p != null || !stack.isEmpty()) {\n        while (p != null) {\n            stack.push(p);\n            p = p.left;\n        }\n        p = stack.pop();\n        // write your code here\n        p = p.right;\n    }\n}\n\n后序遍历：\n// 第一种双栈\npublic void postOrder(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    Deque stack1 = new ArrayDeque<>();\n    Deque stack2 = new ArrayDeque<>();\n    TreeNode p = root;\n    stack1.push(root);\n    while (!stack1.isEmpty()) {\n        TreeNode node = stack1.pop();\n        stack2.push(node);\n        if (node.left != null) {\n            stack1.push(node.left);\n        }\n        if (node.right != null) {\n            stack1.push(node.right);\n        }\n    }\n    while (!stack2.isEmpty()) {\n        // write your code here\n    }\n}\n\n// 第二种pre\npublic void postOrder(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    Deque stack = new ArrayDeque<>();\n    stack.push(root);\n    TreeNode pre = null;\n    while (!stack.isEmpty()) {\n        TreeNode node = stack.peek();\n        if ((node.left == null && node.right == null) || (pre != null && (pre == node.left || pre == node.right))) {\n            // write your code here\n            stack.pop();\n            pre = node;\n        } else {\n            if (node.right != null) {\n                stack.push(node.right);\n            }\n              if (node.left != null) {\n                stack.push(node.left);\n            }\n        }\n    }\n}\n\n层序遍历：\npublic void levelOrder(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    Queue queue = new LinkedList<>();\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        int sz = queue.size();\n        for (int i = 0; i \n4. Morris遍历\n前序遍历：\npublic void preOrder(TreeNode root) {\n    TreeNode cur = root, pre = null;\n    for (; cur != null;) {\n        if (cur.left != null) {\n            pre = cur.left;\n            // 寻找前驱结点\n            while (pre.right != null && pre.right != cur) {\n                pre = pre.right;\n            }\n            if (pre.right == null) {\n                // write your code here\n                pre.right = cur;\n                cur = cur.left;\n            } else {\n                // 删除线索\n                pre.right = null;\n                cur = cur.right;\n            }\n        } else {\n            // write your code here\n            cur = cur.right;\n        }\n    }\n}\n\n中序遍历：\npublic void inOrder(TreeNode root) {\n    TreeNode cur = root, pre = null;\n    for (; cur != null;) {\n        if (cur.left != null) {\n            pre = cur.left;\n            while (pre.right != null && pre.right != cur) {\n                pre = pre.right;\n            }\n            if (pre.right == null) {\n                pre.right = cur;\n                cur = cur.left;\n            } else {\n                // write your code here\n                pre.right = null;\n                cur = cur.right;\n            }\n        } else {\n            // write your code here\n            cur = cur.right;\n        }\n    }\n}\n\n后序遍历：\npublic void postOrder(TreeNode root) {\n    TreeNode dummy = new TreeNode(-1);\n    dummy.left = root;\n    TreeNode cur = dummy, pre = null;\n    for (; cur != null;) {\n        if (cur.left != null) {\n            pre = cur.left;\n            while (pre.right != null && pre.right != cur) {\n                pre = pre.right;   \n            }\n            if (pre.right == null) {\n                pre.right = cur;\n                cur = cur.left;\n            } else {\n                reverse(cur.left, pre);\n                print(pre, cur.left);\n                reverse(pre, cur.left);\n                pre.right = null;\n                cur = cur.right;\n            }\n\n        } else {\n            cur = cur.right;\n        }\n    }\n}\n\nprivate void print(TreeNode from, TreeNode to) {\n    for (;;from = from.right) {\n        // write your code here\n        if (from == to) {\n            break;\n        }\n    }\n}\n\nprivate void reverse(TreeNode from, TreeNode to) {\n    if (from == to) {\n        return;\n    }\n    TreeNode x = from, y = from.right, z= null;\n    x.right = null;\n    for (;;) {\n        z = y.right;\n        y.right = x;\n        x = y;\n        if (y == to) {\n            break;\n        }\n        y = z;\n    }\n}\n\n题目\n105. construct-binary-tree-from-preorder-and-inorder-traversal\n\nDescription:\nGiven preorder and inorder traversal of a tree, construct the binary tree.\nNote:\nYou may assume that duplicates do not exist in the tree.\nFor example, given\npreorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]\nReturn the following binary tree:\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nDiscussion | Solution\nCode:\nimport java.util.Arrays;\n\n/*\n * @lc app=leetcode id=105 lang=java\n *\n * [105] Construct Binary Tree from Preorder and Inorder Traversal\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return helper(0, 0, inorder.length - 1, preorder, inorder);\n    }\n\n    public TreeNode helper(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder) {\n        if (preStart > preorder.length - 1 || inStart > inEnd) {\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[preStart]);\n        int inIndex = 0; // Index of current root in inorder\n        for (int i = inStart; i \n106. construct-binary-tree-from-inorder-and-postorder-traversal\n\nDescription:\nGiven inorder and postorder traversal of a tree, construct the binary tree.\nNote:\nYou may assume that duplicates do not exist in the tree.\nFor example, given\ninorder = [9,3,15,20,7]\npostorder = [9,15,7,20,3]\nReturn the following binary tree:\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=106 lang=java\n *\n * [106] Construct Binary Tree from Inorder and Postorder Traversal\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        return build(postorder.length - 1, 0, inorder.length - 1, inorder, postorder);\n    }\n    private TreeNode build(int postEnd, int inStart, int inEnd, int[] inorder, int[] postorder) {\n        if (postEnd  inEnd) {\n            return null;\n        }\n        TreeNode node = new TreeNode(postorder[postEnd]);\n        int index = 0;\n        for (int i = inStart; i \n117. populating-next-right-pointers-in-each-node-ii\n\nDescription:\nGiven a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\nFollow up:\n\nYou may only use constant extra space.\nRecursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\n\nExample 1:\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\nConstraints:\n\nThe number of nodes in the given tree is less than 6000.\n-100 \n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=117 lang=java\n *\n * [117] Populating Next Right Pointers in Each Node II\n */\n\n// @lc code=start\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        Node head = null, pre = null, cur = root;\n        while (cur != null) {\n            while (cur != null) {\n                if (cur.left != null) {\n                    if (pre != null) {\n                        pre.next = cur.left;\n                    } else {\n                        head = cur.left;\n                    }\n                    pre = cur.left;\n                }\n                if (cur.right != null) {\n                    if (pre != null) {\n                        pre.next = cur.right;\n                    } else {\n                        head = cur.right;\n                    }\n                    pre = cur.right;\n                }\n                cur = cur.next;\n            }\n            cur = head;\n            head = null;\n            pre = null;\n        }\n        return root;\n    }\n}\n// @lc code=end\n\n99. recover-binary-search-tree\n\nDescription:\nTwo elements of a binary search tree (BST) are swapped by mistake.\nRecover the tree without changing its structure.\nExample 1:\nInput: [1,3,null,null,2]\n\n   1\n  /\n 3\n  \\\n   2\n\nOutput: [3,1,null,null,2]\n\n   3\n  /\n 1\n  \\\n   2\nExample 2:\nInput: [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n   /\n  2\n\nOutput: [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n   /\n  3\nFollow up:\n\nA solution using O(n) space is pretty straight forward.\nCould you devise a constant space solution?\n\nCode:\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        TreeNode first = null, second = null, p = null;\n        TreeNode cur = root, pre = null;\n        for (; cur != null;) {\n            if (cur.left != null) {\n                pre = cur.left;\n                while (pre.right != null && pre.right != cur) {\n                    pre = pre.right;\n                }\n                if (pre.right == null) {\n                    pre.right = cur;\n                    cur = cur.left;\n                } else {\n                    if (p != null && p.val > cur.val) {\n                        if (first == null) {\n                            first = p;\n                            second = cur;\n                        }\n                        else {\n                            second = cur;\n                        }\n                    }\n                    p = cur;\n\n                    pre.right = null;\n                    cur = cur.right;\n                }\n            } else {\n                if (p != null && p.val > cur.val) {\n                    if (first == null) {\n                        first = p;\n                        second = cur;\n                    }\n                    else {\n                        second = cur;\n                    }\n                }\n                p = cur;\n\n                cur = cur.right;\n            }\n        }\n        int tmp = first.val;\n        first.val = second.val;\n        second.val = tmp;\n    }\n}\n\n参考\nMorris\n"},"01-data-structrue/basic/05-set/set.html":{"url":"01-data-structrue/basic/05-set/set.html","title":"集合","keywords":"","body":"集\n\n不包含重复元素。\n\n如果无排序要求可以选用HashSet；如果想取出元素的顺序和放入元素的顺序相同，那么可以选用LinkedHashSet。如果想插入、删除立即排序或者按照一定规则排序可以选用TreeSet。\nHashSet、LinkedHashSet、TreeSet\n1. contains\npublic boolean contains(Object o)\n\n\nParameters:\no - element whose presence in this set is to be tested\n\nReturns:\ntrue if this set contains the specified element\n\n\n2. add\npublic boolean add(E e)\n\n\nParameters:\ne - element to be added to this set\n\nReturns:\ntrue if this set did not already contain the specified element\n\n\n3. remove\npublic boolean remove(Object o)\n\n\nParameters:\no - object to be removed from this set, if present\n\nReturns:\ntrue if the set contained the specified element\n\n\n4. containsAll\nboolean containsAll(Collection c)\n\n\nParameters:\nc - collection to be checked for containment in this set\n\nReturns:\ntrue if this set contains all of the elements of the specified collection\n\n\n5. addAll\nboolean addAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be added to this set\n\nReturns:\ntrue if this set changed as a result of the call\n\n\n6. retainAll\nboolean retainAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be retained in this set\n\nReturns:\ntrue if this set changed as a result of the call\n\n\n7. removeAll\nboolean removeAll(Collection c)\n\n\nParameters:\nc - collection containing elements to be removed from this set\n\nReturns:\ntrue if this set changed as a result of the call\n\n\n题目\n参考\nHashSet JDK11\nLinkedHashSet JDK11\nTreeSet JDK11\n"},"01-data-structrue/basic/06-map/map.html":{"url":"01-data-structrue/basic/06-map/map.html","title":"哈希表","keywords":"","body":"映射\n\n存储键值对映射\n\nHashMap、LinkedHashMap、TreeMap\n1. get\npublic V get(Object key)\n\n\nParameters:\nkey - the key whose associated value is to be returned\n\nReturns:\nthe value to which the specified key is mapped, or null if this map contains no mapping for the key\n\n\n2. containsKey\npublic boolean containsKey(Object key)\n\n\nParameters:\nkey - The key whose presence in this map is to be tested\n\nReturns:\ntrue if this map contains a mapping for the specified key.\n\n\n3. put\npublic V put(K key, V value)\n\n\nParameters:\nkey - key with which the specified value is to be associated\nvalue - value to be associated with the specified key\n\nReturns:\nthe previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)\n\n\n4. putAll\npublic void putAll(Map m)\n\n\nParameters:\nm - mappings to be stored in this map\n\nThrows:\nNullPointerException - if the specified map is null\n\n\n5. remove\npublic V remove(Object key)\n\n\nParameters:\nkey - key whose mapping is to be removed from the map\n\nReturns:\nthe previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)\n\n\n6. containsValue\npublic boolean containsValue(Object value)\n\n\nParameters:\nvalue - value whose presence in this map is to be tested\n\nReturns:\ntrue if this map maps one or more keys to the specified value\n\n\n7. keySet\npublic Set keySet()\n\n\nReturns:\na set view of the keys contained in this map\n\n\n8. values\npublic Collection values()\n\n\nReturns:\na view of the values contained in this map\n\n\n9. entrySet\npublic Set> entrySet()\n\nfor (Map.Entry entry: coursesMap.entrySet()) {  \n    System.out.println(entry.getKey());  \n    System.out.println(entry.getValue());  \n}\n\n\nReturns:\na set view of the mappings contained in this map\n\n\n题目\n"},"01-data-structrue/basic/07-heap/heap.html":{"url":"01-data-structrue/basic/07-heap/heap.html","title":"堆","keywords":"","body":"堆\n\nJava中PriorityQueue默认实现最小堆。\n\n"},"01-data-structrue/advanced/01-union-find/union-find.html":{"url":"01-data-structrue/advanced/01-union-find/union-find.html","title":"并查集","keywords":"","body":"并查集\n\n朋友的朋友就是朋友。\n\n并查集是一种树形的数据结构，顾名思义，它用于处理一些不交集的 合并 及 查询 问题。 它支持两种操作：\n\n查找（Find）：确定某个元素处于哪个子集；\n合并（Union）：将两个子集合并成一个集合。\n\n模板\nclass UnionFind {\n    private int[] parent;\n    private int[] rank;\n\n    public UnionFind(int n) {\n        parent = new int[n];\n        rank = new int[n];\n\n        for (int i = 0; i  rank[y]) {\n            parent[y] = x;\n        } else {\n            parent[x] = y;\n            if (rank[x] == rank[y]) {\n                rank[y]++;\n            }\n        }\n        return true;\n    }\n\n    public boolean same(int x, int y) {\n        return find(x) == find(y);\n    }\n\n    public int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n}\n\n题目\n128. longest-consecutive-sequence\n\nDescription:\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\nYour algorithm should run in O(n) complexity.\nExample:\nInput: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\nCode:\nclass Solution {\n    Map map;\n    public int longestConsecutive(int[] nums) {\n        map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, num + 1);\n        }\n        int ans = 0;\n        for (int num : nums) {\n            int ret = find(num + 1);\n            ans = Math.max(ans, ret - num);\n        }\n        return ans;\n    }\n    private int find(int x) {\n        if (map.containsKey(x)) {\n            map.put(x, find(map.get(x)));\n            return map.get(x);\n        } else {\n            return x;\n        }\n    }\n}\n\n684. redundant-connection\n\nDescription:\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u , that represents an undirected edge connecting nodes uand v.\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u .\nExample 1:\nInput: [[1,2], [1,3], [2,3]]\nOutput: [2,3]\nExplanation: The given undirected graph will be like this:\n  1\n / \\\n2 - 3\nExample 2:\nInput: [[1,2], [2,3], [3,4], [1,4], [1,5]]\nOutput: [1,4]\nExplanation: The given undirected graph will be like this:\n5 - 1 - 2\n    |   |\n    4 - 3\nNote:\nThe size of the input 2D-array will be between 3 and 1000.\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=684 lang=java\n *\n * [684] Redundant Connection\n */\n\n// @lc code=start\nclass Solution {\n    public int[] findRedundantConnection(int[][] edges) {\n        UnionFind uf = new UnionFind(edges.length + 1);\n        for (int[] edge : edges) {\n            if (!uf.union(edge[0], edge[1])) {\n                return edge;\n            }\n        }\n        throw new IllegalArgumentException();\n    }\n\n    class UnionFind {\n        private int[] parent;\n        private int[] rank;\n\n        public UnionFind(int n) {\n            parent = new int[n];\n            rank = new int[n];\n\n            for (int i = 0; i  rank[y]) {\n                parent[y] = x;\n            } else {\n                parent[x] = y;\n                if (rank[x] == rank[y]) {\n                    rank[y]++;\n                }\n            }\n            return true;\n        }\n\n        public boolean same(int x, int y) {\n            return find(x) == find(y);\n        }\n\n        public int find(int x) {\n            if (parent[x] != x) {\n                parent[x] = find(parent[x]);\n            }\n            return parent[x];\n        }\n    }\n}\n// @lc code=end\n\n685. redudant-connection-ii\n\nDescription:\nIn this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] that represents a directed edge connecting nodes u and v, where u is a parent of child v.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\nExample 1:\nInput: [[1,2], [1,3], [2,3]]\nOutput: [2,3]\nExplanation: The given directed graph will be like this:\n  1\n / \\\nv   v\n2-->3\nExample 2:\nInput: [[1,2], [2,3], [3,4], [4,1], [1,5]]\nOutput: [4,1]\nExplanation: The given directed graph will be like this:\n5  2\n     ^    |\n     |    v\n     4 Note:\nThe size of the input 2D-array will be between 3 and 1000.\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=685 lang=java\n *\n * [685] Redundant Connection II\n */\n\n// @lc code=start\nclass Solution {\n    public int[] findRedundantDirectedConnection(int[][] edges) {\n        int n = edges.length, edgeRemoved = -1, edgeCycle = -1;\n        int[] parent = new int[n + 1];\n        for (int i = 0; i  rank[y]) {\n                parent[y] = x;\n            } else {\n                parent[x] = y;\n                if (rank[x] == rank[y]) {\n                    rank[y]++;\n                }\n            }\n            return true;\n        }\n\n        public boolean same(int x, int y) {\n            return find(x) == find(y);\n        }\n\n        public int find(int x) {\n            if (parent[x] != x) {\n                parent[x] = find(parent[x]);\n            }\n            return parent[x];\n        }\n    }\n}\n// @lc code=end\n\n参考\nDSU\n"},"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html":{"url":"01-data-structrue/advanced/02-binary-indexed-tree/binary-indexed-tree.html","title":"树状数组","keywords":"","body":"树状数组\n\n树状数组是一种用于高效处理对一个存储数字的列表进行更新及求前缀和的数据结构。\n\n树状数组是一个查询和修改复杂度都为$log(n)$的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在log(n)的复杂度下进行范围修改，但是这时只能查询其中一个元素的值。\n\n模板\n1. 单点修改、区间查询\nclass BinaryIndexedTree{\n\n    private int[] sums;\n    private int n;\n    // 数组array下标从1开始\n    public BinaryIndexedTree(int[] array) {\n        n = array.length - 1;\n        sums = new int[n + 1];\n        for (int i = 1; i \n2. 区间修改、单点查询\nclass BinaryIndexedTree{\n\n    private int[] sums;\n    private int n;\n    // 传入的是差分数组\n    public BinaryIndexedTree(int[] array) {\n        n = array.length - 1;\n        sums = new int[n + 1];\n        for (int i = 1; i \n3. 区间修改、区间查询\nclass BinaryIndexedTree{\n\n    private long[] sums1;\n    private long[] sums2;\n    private int n;\n\n    public BinaryIndexedTree(int[] array) {\n        n = array.length - 1;\n        sums1 = new long[n + 1];\n        sums2 = new long[n + 1];\n        for (int i = 1; i \n技巧\n1. 建树\n// O(n)建树\npublic void init() {\n    for (int i = 1; i \n2. 时间戳优化\nprivate int[] tag;\nprivate int Tag;\n\npublic void reset() {\n    ++Tag;\n}\npublic void update(int x, int add) {\n    while (x \n3. 二维树状\npublic void update(int x,int y,int add) {\n    for (int i = x; i  0; i -= lowbit(i)) {\n        for (int j = y; j > 0; j -= lowbit(j)) {\n            ret += sums[i][j];\n        }\n    }\n    return ret;\n}\n\n题目\n307. range-sum-query-mutable\n\nDescription:\nGiven an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.\nThe update(i, val) function modifies nums by updating the element at index i to val.\nExample:\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8\nNote:\n\nThe array is only modifiable by the update function.\nYou may assume the number of calls to update and sumRange function is distributed evenly.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=307 lang=java\n *\n * [307] Range Sum Query - Mutable\n */\n\n// @lc code=start\nclass NumArray {\n\n    private int[] sums;\n    private int[] nums;\n    private int n;\n\n    public NumArray(int[] array) {\n        n = array.length;\n        nums = new int[n + 1];\n        for (int i = 1; i \n315. count-of-smaller-numbers after self\n\nDescription:\nYou are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\nExample:\nInput: [5,2,6,1]\nOutput: [2,1,1,0] \nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=315 lang=java\n *\n * [315] Count of Smaller Numbers After Self\n */\n\n// @lc code=start\nclass Solution {\n\n    class Node {\n        int pos;\n        int val;\n        public Node(int pos, int val) {\n            this.pos = pos;\n            this.val = val;\n        }\n    }\n\n    private int[] sums;\n    private int n;\n\n    public List countSmaller(int[] nums) {\n        n = nums.length;\n        List res = new ArrayList<>();\n        sums = new int[n + 1];\n        Node[] nodes = new Node[n + 1];\n        for (int i = 1; i () {\n\n            public int compare(Node o1, Node o2) {\n                if (o1.val == o2.val) {\n                    // o2.pos - o1.pos 可解决此题小于等于的情况\n                    return o1.pos - o2.pos;\n                }\n                return o1.val - o2.val;\n            }\n\n        });\n        int[] ref = new int[n + 1];\n        for (int i = 1; i  0; i--) {\n            ans[i - 1] = query(ref[i]);\n            update(ref[i], 1);\n        }\n        for (int num : ans) {\n            res.add(num);\n        }\n        return res;\n    }\n\n    private int lowbit(int x) {\n        return x & (-x);\n    }\n\n    private void update(int x, int add) {\n        while (x \n327. count-of-range-sum\n\nDescription:\nGiven an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive.\nNote:\nA naive algorithm of O(n2) is trivial. You MUST do better than that.\nExample:\nInput: nums = [-2,5,-1], lower = -2, upper = 2,\nOutput: 3 \nExplanation: The three ranges are : [0,0], [2,2], [0,2] and their respective sums are: -2, -1, 2.\nDiscussion | Solution\nCode:\n\n\n\n参考\n“高级”数据结构——树状数组！\n树状数组详细解析\n树状数组黑科技讲义\n树状数组\n"},"01-data-structrue/advanced/03-segment-tree/segment-tree.html":{"url":"01-data-structrue/advanced/03-segment-tree/segment-tree.html","title":"线段树","keywords":"","body":""},"01-data-structrue/advanced/04-trie/trie.html":{"url":"01-data-structrue/advanced/04-trie/trie.html","title":"字典树","keywords":"","body":"字典树\n字典树，又称单词查找树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来节约存储空间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。\n\n字典树的性质\n\n根节点（Root）不包含字符，除根节点外的每一个节点都仅包含一个字符；\n从根节点到某一节点路径上所经过的字符连接起来，即为该节点对应的字符串；\n任意节点的所有子节点所包含的字符都不相同；\n\nTrie 的应用\n\n字符串检索：事先将已知的一些字符串（字典）的有关信息保存到 Trie 里，查找另外一些未知字符串是否出现过或者出现频率。\n字符串最长公共前缀：Trie 利用多个字符串的公共前缀来节省存储空间，反之，当我们把大量字符串存储到一棵 Trie 上时，我们可以快速得到某些字符串的公共前缀。\n排序：Trie 树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串，便是按字典序排序的结果。\n作为其他数据结构和算法的辅助结构：如后缀树，AC自动机等。\n\n模板\nclass Trie {\n\n    static final int MAX = 26;\n\n    private class TrieNode {\n        int path;\n        int end;\n        TrieNode[] next;\n\n        public TrieNode() {\n            path = 0;\n            end = 0;\n            next = new TrieNode[MAX];\n        }\n    }\n\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        if (word == null) {\n            return;\n        }\n        TrieNode cur = root;\n        int index = 0;\n        for (int i = 0; i  0;\n    }\n\n    public int prefixNum(String prefix) {\n        if (prefix == null) {\n            return 0;\n        }\n        TrieNode cur = root;\n        int index = 0;\n        for (int i = 0; i  0;\n    }\n\n    public void remove(String word) {\n        if (word == null || !search(word)) {\n            return;\n        }\n        TrieNode cur = root;\n        int index = 0;\n        for (int i = 0; i \n题目\n208. implement-trie-prefix-tree\n\nDescription:\nImplement a trie with insert, search, and startsWith methods.\nExample:\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // returns true\ntrie.search(\"app\");     // returns false\ntrie.startsWith(\"app\"); // returns true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // returns true\nNote:\n\nYou may assume that all inputs are consist of lowercase letters a-z.\nAll inputs are guaranteed to be non-empty strings.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=208 lang=java\n *\n * [208] Implement Trie (Prefix Tree)\n */\n\n// @lc code=start\nclass Trie {\n\n    private class TrieNode {\n        int path;\n        int end;\n        TrieNode[] next;\n\n        public TrieNode() {\n            path = 0;\n            end = 0;\n            next = new TrieNode[26];\n        }\n    }\n\n    private TrieNode root;\n\n    /** Initialize your data structure here. */\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n        if (word == null) {\n            return;\n        }\n        TrieNode cur = root;\n        int index = 0;\n        for (int i = 0; i  0;\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n        if (prefix == null) {\n            return false;\n        }\n        TrieNode cur = root;\n        int index = 0;\n        for (int i = 0; i \n"},"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html":{"url":"01-data-structrue/advanced/05-monotone-stack/monotone-stack.html","title":"单调栈","keywords":"","body":"单调栈\n\n单调栈即满足单调性的栈结构。\n\n用途：用来快速寻找一个数组中的每一个元素，左右两边离它最近的比它大（小）的数。\n模板\n/**\n * 单调栈: 寻找数组中的每一个元素　左右两边离它arr[i]最近的比它大的数\n * 栈底到栈顶: 由大到小 (也可以自定义从小到大)\n */\n\nvoid monotoneStack(int[] arr) {\n    int n = arr.length;\n    int[] L = new int[n];\n    Deque stack = new ArrayDeque<>();\n    for (int i = 0; i  arr[stack.peek()]) {\n            int top = stack.pop();\n            if (stack.isEmpty()) {\n                L[top] = -1;\n            } else {\n                L[top] = stack.peek();\n            }\n        }\n        stack.push(i);\n    }\n    while (!stack.isEmpty()) {\n        int top = stack.pop();\n        if (stack.isEmpty()) {\n            L[top] = -1;\n        } else {\n            L[top] = stack.peek();\n        }\n    }\n}\n\nvoid monotoneStack(int[] arr) {\n    int n = arr.length;\n    int[] R = new int[n];\n    Deque stack = new ArrayDeque<>();\n    for (int i = n - 1; i >= 0; i--) {\n        while (!stack.isEmpty() && arr[i] > arr[stack.peek()]) {\n            int top = stack.pop();\n            if (stack.isEmpty()) {\n                R[top] = -1;\n            } else {\n                R[top] = stack.peek();\n            }\n        }\n        stack.push(i);\n    }\n    while (!stack.isEmpty()) {\n        int top = stack.pop();\n        if (stack.isEmpty()) {\n            R[top] = -1;\n        } else {\n            R[top] = stack.peek();\n        }\n    }\n}\n\n题目\n402. remove-k-digits\n\nDescription:\nGiven a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\nNote:\n\nThe length of num is less than 10002 and will be ≥ k.\nThe given num does not contain any leading zero.\n\nExample 1:\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\nExample 2:\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\nExample 3:\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=402 lang=java\n *\n * [402] Remove K Digits\n */\n\n// @lc code=start\npublic class Solution {\n    public String removeKdigits(String num, int k) {\n        int n = num.length();\n        if (k == n) {\n            return \"0\";            \n        }        \n        Deque stack = new ArrayDeque<>();\n        int i = 0;\n        while (i  0 && !stack.isEmpty() && stack.peek() > num.charAt(i)) {\n                stack.pop();\n                k--;\n            }\n            stack.push(num.charAt(i));\n            i++;\n        }\n\n        // corner case like \"1111\"\n        while (k > 0) {\n            stack.pop();\n            k--;            \n        }\n\n        //construct the number from the stack\n        StringBuilder sb = new StringBuilder();\n        while (!stack.isEmpty()) {\n            sb.append(stack.pop());\n        }\n        sb.reverse();\n\n        //remove all the 0 at the head\n        while (sb.length() > 1 && sb.charAt(0) == '0') {\n            sb.deleteCharAt(0);\n        }\n        return sb.toString();\n    }\n}\n// @lc code=end\n\n84. largest-rectangle-in-histogram\n\nDescription:\nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\n\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\nExample:\nInput: [2,1,5,6,2,3]\nOutput: 10\nCode:\nclass Solution {\n    public int largestRectangleArea(int[] heights) {\n        if (heights == null || heights.length == 0) {\n            return 0;\n        }\n        int n = heights.length;\n        // 单调增栈：用于定位左右小于自己的最近元素\n        Deque stack = new ArrayDeque<>();\n        int ans = 0;\n        for (int i = 0; i = heights[stack.peek()]) {\n                stack.push(i);\n            } else {\n                int top = stack.pop();\n                ans = Math.max(ans, heights[top] * (stack.isEmpty() ? i : i - 1 - stack.peek()));\n                i--;\n            }\n        }\n        return ans;\n    }\n}\n\n42. trapping-rain-water\n\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\n\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!\nExample:\nInput: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nCode:\nclass Solution {\n    public int trap(int[] height) {\n        if (height == null || height.length == 0) {\n            return 0;\n        }\n        Deque stack = new ArrayDeque<>();\n        int ans = 0;\n        for (int i = 0; i \n"},"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html":{"url":"01-data-structrue/advanced/06-monotone-queue/monotone-queue.html","title":"单调队列","keywords":"","body":"单调队列\n\n\"单调\" 指的是元素的的 \"规律\"——递增（或递减）\n\"队列\" 指的是元素只能从队头和队尾进行操作\n\n用途：用来求出数组的某个区间范围内的最大值。\n模板\n/**\n * 单调队列: 用来求出在数组的某个区间范围内的最值\n */\nvoid monotoneQueue(int[] arr, int k) {\n    int n = arr.length;\n    List res = new ArrayLise<>();\n    Deque deque = new LinkedList<>();\n    for (int i = 0; i = k - 1) {\n            res.add(arr[deque.peekFirst()]);\n        }\n    }\n}\n\n题目\n"},"02-algorithm/01-basic/01-sort/sort.html":{"url":"02-algorithm/01-basic/01-sort/sort.html","title":"排序","keywords":"","body":"排序\n先给出排序经常会用到的swap函数，用于交换数组中两个位置的值。\nvoid swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n下表是排序算法思想相应LeetCode的题目索引（持续更新）。\n\n\n\n算法\n题号\n\n\n\n\n内部排序\n148. Sort List912. Sort an Array\n\n\n归并排序\n21. Merge Two Sorted Lists23. Merge k Sorted Lists88. Merge Sorted Array315. Count of Smaller Numbers After Self493. Reverse Pairs\n\n\n快速排序\n75. Sort Colors215. Kth Largest Element in an Array\n\n\n堆排序\n215. Kth Largest Element in an Array\n\n\n计数排序\n274. H-Index\n\n\n桶排序\n164. Maximum Gap220. Contains Duplicate III\n\n\n基数排序\n164. Maximum Gap\n\n\n\n下图是排序算法的性能及稳定性总结。\n\n1. 冒泡排序\n思想\n从前往后比较相邻元素，如果第一个比第二个大，就交换。重复前面的步骤，每次都从最后累积减少一个元素。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] bubbleSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    for (int j = n - 1; j > 0; --j) {\n        boolean isSort = true;\n        // 冒泡\n        for (int i = 0; i  arr[i + 1]) {\n                swap(arr, i, i + 1);\n                isSort = false;\n            }\n        }\n        // 提前结束\n        if (isSort) {\n            break;\n        }\n    }\n    return arr;\n}\n\n/*****************链表*****************/\n\nListNode bubbleSort(ListNode head) {\n    ListNode cur = head, tail = null;\n    // 双指针\n    while (cur != tail) {\n        while (cur.next != tail) {\n            boolean isSort = true;\n            if (cur.val > cur.next.val) {\n                int tmp = cur.val;\n                cur.val = cur.next.val;\n                cur.next.val = tmp;\n                isSort = false;\n            }\n            cur = cur.next;\n        }\n        if (isSort) {\n            break;\n        }\n        // 下次遍历的尾结点是当前结点，每次减少访问最后结点\n        tail = cur;\n        cur = head;\n    }\n    return head;\n}\n\n2. 选择排序\n思想\n在未排序序列中找到最小(大)元素放到排序序列起始位置，再从剩余未排序元素中继续寻找最小(大)元素放到已排序序列的末尾，重复步骤直到排序完毕。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] selectSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    for (int i = 0; i \n3. 插入排序\n思想\n将序列分为已排序区间和未排序区间，取未排序区间中的元素，在已排序区间中找到合适的位置将其插入，保证已排序区间一直有序。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] insertionSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    for (int i = 1; i = 0 && arr[j] > val; --j) {\n            // 数据移动\n            arr[j + 1] = arr[j];\n        }\n        arr[j + 1] = val;\n    }\n    return arr;\n}\n\n/*****************二分插入排序*****************/\n\nint[] insertionSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    for (int i = 1; i  val) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        for (int j = i - 1; j >= l; --j) {\n            // 数据移动\n            arr[j + 1] = arr[j];\n        }\n        arr[l] = val;\n    }\n    return arr;\n}\n\n/*****************链表*****************/\n\nListNode insertionSort(ListNode head) {\n    if (head == null) {\n        return head;\n    }\n    ListNode helper = new ListNode(0);\n    // 当前要被插入的结点\n    ListNode cur = head;\n    // 插入位置在pre和pre.next之间\n    ListNode pre = helper;\n    // 下一个要插入的结点\n    ListNode next = null;\n    while (cur != null) {\n        next = cur.next;\n        // 找到正确插入的位置\n        while (pre.next != null && cur.val >= pre.next.val) {\n            pre = pre.next;\n        }\n        // 插入操作\n        cur.next = pre.next;\n        pre.next = cur;\n        pre = helper;\n        cur = next;\n    }\n    return helper.next;\n}\n\n4. 希尔排序\n思想\n选择一个增量序列$t_1, t_2, ......, t_k$，按增量序列个数k对序列进行k趟排序，最后$t_k=1$将整个序列作为一个表来处理。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] shellSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    // 增量序列每次减半\n    for (int gap = n; gap > 0; gap /= 2) {\n        // 对每个序列做插入排序\n        for (int end = gap; end = 0 && arr[i] > val; i -= gap) {\n                arr[i + gap] = arr[i];\n            }\n            arr[i + gap] = val;\n        }\n    }\n    return arr;\n}\n\n5. 归并排序\n思想\n如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] mergeSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    mergeSort(arr, 0, n - 1);\n    return arr;\n}\n\nvoid mergeSort(int[] arr, int l, int r) {\n    if (l >= r) {\n        return;\n    }\n    int mid = l + (r - l) / 2;\n    mergeSort(arr, l, mid);\n    mergeSort(arr, mid + 1, r);\n    merge(arr, l, mid, r);\n}\n\nvoid merge(int[] arr, int l, int mid, int r) {\n    int[] aux = new int[r - l + 1];\n    int p1 = l, p2 = mid + 1;\n    int k = 0;\n    while (p1 \n题目\n315. count-of-smaller-numbers-after-self\n\nDescription:\nYou are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\nExample:\nInput: [5,2,6,1]\nOutput: [2,1,1,0] \nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=315 lang=java\n *\n * [315] Count of Smaller Numbers After Self\n *\n * 在归并过程中统计逆序数\n *\n */\n\n// @lc code=start\nclass Solution {\n\n    // 绑定最初索引\n    class Pair {\n        int index;\n        int val;\n        public Pair(int index, int val) {\n            this.index = index;\n            this.val = val;\n        }\n    }\n\n    public List countSmaller(int[] nums) {\n        List res = new ArrayList<>();\n        if (nums == null || nums.length == 0) {\n            return res;\n        }\n        int[] smaller = new int[nums.length];\n        Pair[] arr = new Pair[nums.length];\n        for (int i = 0; i = r) {\n            return;\n        }\n        int mid = l + (r - l) / 2; \n        mergeSort(arr, l, mid, smaller);\n        mergeSort(arr, mid + 1, r, smaller); \n        for(int i = l, j = mid + 1; i  arr[j].val) {\n                ++j; \n            }\n            smaller[arr[i].index] += j - (mid + 1); \n        }\n        merge(arr, l, mid, r);\n    }\n\n    private void merge(Pair[] arr, int l, int mid, int r) {\n        Pair[] aux = new Pair[r - l + 1];\n        int p1 = l, p2 = mid + 1;\n        int k = 0;\n        while (p1 \n493. reverse-pairs\n\nDescription:\nGiven an array nums, we call (i, j) an important reverse pair if i  and nums[i] > 2*nums[j].\nYou need to return the number of important reverse pairs in the given array.\nExample 1:\nInput: [1,3,2,3,1]\nOutput: 2\nExample 2:\nInput: [2,4,3,5,1]\nOutput: 3\nNote:\n\nThe length of the given array will not exceed 50,000.\nAll the numbers in the input array are in the range of 32-bit integer.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=493 lang=java\n *\n * [493] Reverse Pairs\n *\n * 归并过程中统计\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int reversePairs(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        return mergeSort(nums, 0, nums.length - 1);\n    }\n    private int mergeSort(int[] arr, int l, int r){\n        if(l >= r) {\n            return 0;\n        } \n        int mid = l + (r - l) / 2; \n        int cnt = mergeSort(arr, l, mid) + mergeSort(arr, mid + 1, r); \n        for(int i = l, j = mid + 1; i  arr[j]) {\n                ++j; \n            }\n            cnt += j - (mid + 1); \n        }\n        merge(arr, l, mid, r);\n        return cnt; \n    }\n    private void merge(int[] arr, int l, int mid, int r) {\n        int[] aux = new int[r - l + 1];\n        int p1 = l, p2 = mid + 1;\n        int k = 0;\n        while (p1 \n6. 快速排序\n思想\n在序列中选一个元素为基准值(pivot)，将所有元素比pivot小的放在前面，比pivot大的放在后面，pivot放中间(partition 操作)，递归地进行排序。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\nint[] qucikSort(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    quickSort(arr, 0, n - 1);\n    return arr;\n}\n\nvoid quickSort(int[] arr, int l, int r) {\n    if (l >= r) {\n        return;\n    }\n    // 随机选择pivot，防止退化为O(n²)\n    swap(arr, l, l + (int)(Math.random() * (r - l + 1)));\n    int[] p = partition(arr, l, r);\n    quickSort(arr, l, p[0]);\n    quickSort(arr, p[1], r);\n}\n\nint[] partition(int[] arr, int l, int r) {\n    // 用arr[l]作为划分点\n    int val = arr[l];\n    int start = l, end = r + 1;\n    int cur = l + 1;\n    // 交换导致的不稳定性\n    while (cur  val) {\n            swap(arr, --end, cur);\n        } else {\n            cur++;\n        }\n    }\n    swap(arr, l, start);\n    // 返回下次开始的位置，一左一右\n    return new int[]{start - 1, end};\n}\n\nvoid shuffle(int arr[]) {\n    final Random random = new Random();\n    for (int idx = 1; idx \n题目\n75. sort-colors\n\nDescription:\nGiven an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\nNote: You are not suppose to use the library's sort function for this problem.\nExample:\nInput: [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\nFollow up:\n\nA rather straight forward solution is a two-pass algorithm using counting sort.\nFirst, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.\nCould you come up with a one-pass algorithm using only constant space?\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=75 lang=java\n *\n * [75] Sort Colors\n */\n\n// @lc code=start\nclass Solution {\n    public void sortColors(int[] nums) {\n        // 三路快排\n        if (nums == null || nums.length == 0) {\n            return;\n        }\n        // [0, zero]:0  (zero, one]:1  [two, nums.length - 1]:2\n        int zero = -1, one = 0, two = nums.length;\n        while (one \n215. kth-largest-element-in-an-array\n\nDescription:\nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nExample 1:\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\nExample 2:\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\nNote: \nYou may assume k is always valid, 1 ≤ k ≤ array's length.\nDiscussion | Solution\nCode:\nimport java.util.Random;\n\n/*\n * @lc app=leetcode id=215 lang=java\n *\n * [215] Kth Largest Element in an Array\n */\n\n// @lc code=start\nclass Solution {\n    public int findKthLargest(int[] nums, int k) {\n        shuffle(nums);\n        return quickSelect(nums, 0, nums.length - 1, k);\n    }\n    private int quickSelect(int[] nums, int l, int r, int k){\n        int pivot = l;\n        for(int i = l; i \n7. 堆排序\n思想\n将待排序序列构造成一个大顶堆，每次移走堆顶，重复n-1次建堆，完成排序。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\n// 大顶堆，每个结点的值都大于等于其左右孩子结点的值\nint[] heapSort(int[] arr) {\n    if (arr == null || arr.length  0) {\n        siftDown(arr, 0, size);\n        swap(arr, 0, --size);\n    }\n    return arr;\n}\n\n// 上浮\nvoid siftUp(int[] arr, int i) {\n    // 当前结点为i，父亲结点为(i-1)/2\n    while (arr[i] > arr[(i - 1) / 2]) {\n        swap(arr, i, (i - 1) / 2);\n        i = (i - 1) / 2;\n    }\n}\n\n// 下沉\nprivate void siftDown(int[] arr, int i, int heapSize) {\n    // 父亲结点为i，左孩子结点为2*i+1，右孩子结点为2*i+2\n    int l = 2 * i + 1;\n    // 每次保证堆的性质\n    while (l  arr[l] ? l + 1 : l;\n        maxIndex = arr[i] > arr[maxIndex] ? i : maxIndex;\n        if (maxIndex == i) {\n            break;\n        }\n        swap(arr, i, maxIndex);\n        i = maxIndex;\n        l = 2 * i + 1;\n    }\n}\n\n/*****************heapfiy优化*****************/\n\nint[] heapSort(int[] arr) {\n    if (arr == null || arr.length = 0; --i) {\n        // 注意这儿是n，因为还没有swap\n        siftDown(arr, i, n);\n    }\n    swap(arr, 0, size);\n    while (size > 0) {\n        siftDown(arr, 0, size);\n        swap(arr, 0, --size);\n    }\n    return arr;\n}\n\nvoid siftDown(int[] arr, int i, int heapSize) {\n    //从arr[i] 开始往下调整\n    int l = 2 * i + 1;\n    int r = 2 * i + 2;\n    int maxIdx = i;\n    if (l  arr[maxIdx]) {\n        maxIdx = l;\n    }\n    if (r  arr[maxIdx]) {\n        maxIdx = r;\n    }\n    if (maxIdx != i) {\n        swap(arr, i, maxIdx);\n        siftDown2(arr, maxIdx, heapSize);\n    }\n}\n\n8. 计数排序\n计数排序是桶排序的一种特殊情况，适用于将要排序的n个数据的数据范围不大的情形，且不适用于有负数的情形。\n思想\n先获取序列A中最小值min和最大值max，再开辟长度为(max - min + 1)的数组B，其中B中index元素记录的值是A中index出现的次数，累加数组B(其中B[index]存储小于等于index的元素个数)，最后从后往前遍历序列A，将其放到辅助数组aux相应位置。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @return sorted array of {@code arr}.\n */\n\n// 常用\nint[] countSort1(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    int min = arr[0], max = arr[0];\n    // 最大最小值\n    for (int i = 1; i = 0; --i) {\n        aux[--count[arr[i] - min]] = arr[i];\n    }\n    return aux;\n}\n\n\nint[] countSort2(int[] arr) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    int min = arr[0], max = arr[0];\n    // 最大最小值\n    for (int i = 1; i  0) {\n            arr[index++] = i + min;\n            count[i]--;\n        }\n    }\n    return arr;\n}\n\n题目\n274. h-index\n\nDescription:\nGiven an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: \"A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.\"\nExample:\nInput: citations = [3,0,6,1,5]\nOutput: 3 \nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had \n             received 3, 0, 6, 1, 5 citations respectively. \n             Since the researcher has 3 papers with at least 3 citations each and the remaining \n             two with no more than 3 citations each, her h-index is 3.\nNote: If there are several possible values for h, the maximum one is taken as the h-index.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=274 lang=java\n *\n * [274] H-Index\n *\n * 对出现的引用次数进行计数，返回结果至多为数组长度n\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int hIndex(int[] citations) {\n        int n = citations.length;\n        int[] counts = new int[n + 1];\n        for (int num : citations) {\n            if (num >= n) {\n                counts[n]++;\n            } else {\n                counts[num]++;\n            }\n        }\n        int cnt = 0;\n        // 控制h of papers至少h citations\n        for (int i = n; i >= 0; --i) {\n            cnt += counts[i];\n            if (cnt >= i) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n// @lc code=end\n\n9. 桶排序\n桶排序适用于外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n桶排序对排序的数据要求非常苛刻。需要足够均匀，否则桶内排序就不是常量了。\n思想\n先设置固定数量的空桶，再把数据放到对应的桶中，对每个不为空的桶中数据进行排序，最后拼接不为空的桶中数据，输出结果。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @param bucketCount numbers of buckets.\n * @return sorted array of {@code arr}.\n */\n\nint[] bucketSort(int[] arr, int bucketCount) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    int[] res = new int[n];\n    int min = arr[0], max = arr[0];\n    // 最大最小值\n    for (int i = 1; i ();\n        }\n        buckets[idx].add(arr[i]);\n    }\n    int k = 0;\n    for (int i = 0; i \n题目\n164. maximum-gap\n\nDescription:\nGiven an unsorted array, find the maximum difference between the successive elements in its sorted form.\nReturn 0 if the array contains less than 2 elements.\nExample 1:\nInput: [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either\n             (3,6) or (6,9) has the maximum difference 3.\nExample 2:\nInput: [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\nNote:\n\nYou may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.\nTry to solve it in linear time/space.\n\nDiscussion | Solution\nCode:\nimport java.util.Arrays;\n\n/*\n * @lc app=leetcode id=164 lang=java\n *\n * [164] Maximum Gap\n * \n * 假设数组中有N个元素，最大值为max，最小值为min，则在排序数组中相邻元素最大间隔不超过ceiling[(max - min) / (N - 1)]\n * \n */\n\n// @lc code=start\nclass Solution {\n    public int maximumGap(int[] nums) {\n        if (nums == null || nums.length \n220. contains-duplicate-iii\n\nDescription:\nGiven an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.\nExample 1:\nInput: nums = [1,2,3,1], k = 3, t = 0\nOutput: true\nExample 2:\nInput: nums = [1,0,1,1], k = 1, t = 2\nOutput: true\nExample 3:\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false\nDiscussion | Solution\nCode:\nimport java.util.HashMap;\nimport java.util.Map;\n\n/*\n * @lc app=leetcode id=220 lang=java\n *\n * [220] Contains Duplicate III\n *\n * 控制映射到同一个桶中不同元素的差值不超过t，同时桶的数量不超过k(移除最早进桶元素)\n *\n */\n\n// @lc code=start\nclass Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n        if (k  map = new HashMap<>();\n        for (int i = 0; i = k) {\n                long lastBucket = ((long)nums[i - k] - Integer.MIN_VALUE) / ((long)t + 1);\n                map.remove(lastBucket);\n            }\n            map.put(bucket, remappedNum);\n        }\n        return false;\n    }\n}\n// @lc code=end\n\n10. 基数排序\n基数排序要求数据可以分割出独立的“位”来比较，而且位之间有递进的关系，即若数据a的高位比数据b的高位大，那剩下的低位就不用比较了。\n基数排序要求每一位数据范围不能太大，要可以用线性算法来排序。\n思想\n将待比较元素补齐为统一长度，从最低位开始依次进行一次排序，当最高位排序完成后，序列就成了有序序列。\n模板\n/**\n * Return the sorted array of {@code arr}.\n * \n * @param arr the array to sort.\n * @param len max length of array's element.\n * @return sorted array of {@code arr}.\n */\n\nint[] redixSort(int[] arr, int len) {\n    if (arr == null || arr.length == 0) {\n        return arr;\n    }\n    int n = arr.length;\n    int exp = 10, R = 10;\n    for (int i = 0; i \n题目\n164. maximum-gap\n\nCode:\n/*\n * @lc app=leetcode id=164 lang=java\n *\n * [164] Maximum Gap\n * \n * 基数排序 + 计数排序\n * \n */\n\n// @lc code=start\nclass Solution {\n    public int maximumGap(int[] nums) {\n        if (nums == null || nums.length  0) {\n            int[] count = new int[R];\n            // 计数排序\n            for (int i = 0; i = 0; --i) {\n                aux[--count[(nums[i] / exp) % 10]] = nums[i];\n            }\n            for (int i = 0; i \n参考\n数据结构可视化\n冒泡、选择、插入\n归并、快排\n 计数、桶、基数\n十大排序算法\n"},"02-algorithm/01-basic/02-binary-search/binary-search.html":{"url":"02-algorithm/01-basic/02-binary-search/binary-search.html","title":"二分查找","keywords":"","body":"二分查找\n\nAlthough the basic idea of binary search is comparatively straightforward,the details can be surprisingly tricky...\n\n先讲个笑话乐呵一下：\n有一天阿东到图书馆借了 N 本书，出图书馆的时候，警报响了，于是保安把阿东拦下，要检查一下哪本书没有登记出借。阿东正准备把每一本书在报警器下过一下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第一堆过一下报警器，报警器响；于是再把这堆书分成两堆…… 最终，检测了 logN 次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。\n从此，图书馆丢了 N - 1 本书。\n\n思路很简单，细节是魔鬼。\n\n\n\n\n二分查找相关题目索引(持续更新)\n\n\n\n\n4. Median of Two Sorted Arrays\n\n\n33. Search in Rotated Sorted Array\n\n\n34. Find First and Last Position of Element in Sorted Array\n\n\n35. Search Insert Position\n\n\n69. Sqrt(x)\n\n\n74. Search a 2D Matrix\n\n\n81. Search in Rotated Sorted Array II\n\n\n153. Find Minimum in Rotated Sorted Array\n\n\n154. Find Minimum in Rotated Sorted Array II\n\n\n240. Search a 2D Matrix II\n\n\n719. Find K-th Smallest Pair Distance\n\n\n\n1. 框架\nint binarySearch(int[] arr, int key){\n    int left = 0, right = ...;\n    while(...){\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == key) {\n            ...;\n        }\n        else if (arr[mid]  key) {\n            right = ...;\n        }\n    }\n    return ...;\n}\n\n分析二分查找技巧：不要出现else，而是把所有情况用else if写清楚，这样就可以清楚地展现所有细节。\n...标记的部分就是可能出现细节问题的地方。\n2. 模板\n1. 最基本的二分查找\nint binarySearch(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l  key) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n2. 查找第一个等于key\nint firstEqual(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l = key) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    // 注意判断条件\n    if (l \n3. 查找第一个大于等于key\nint firstLargeEqual(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l = key) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n\n4. 查找第一个大于key\nint firstLarge(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l  key) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n\n5. 查找最后一个等于key\nint lastEqual(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l = 0 && arr[r] == key) {\n        return r;\n    }\n    return -1;\n}\n\n6. 查找最后一个小于等于key\nint lastEqualSmall(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l \n7. 查找最后一个小于key\nint lastSmall(int[] arr, int key) {\n    int l = 0, r = arr.length - 1;\n    while (l \n3. 题目\n4. median-of-two-sorted-arrays\n\nDescription:\nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty.\nExample 1:\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=4 lang=java\n *\n * [4] Median of Two Sorted Arrays\n *\n * 二分查找难度极大的一道题\n * https://www.bilibili.com/video/BV1wJ411N7U8?from=search&seid=15996420867699793986\n * 可以把问题转化为查找两个数组中第(n1+n2+1)/2大的数\n *\n */\n\n// @lc code=start\nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int n1 = nums1.length, n2 = nums2.length;\n        if (n1 > n2) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n        int l = 0, r = n1 - 1, mid1, mid2;\n        // 偶数-->右中值  奇数-->中值\n        int k = (n1 + n2 + 1) / 2;\n        while (l = n1 ? Integer.MAX_VALUE : nums1[mid1]\n                        , mid2 >= n2 ? Integer.MAX_VALUE : nums2[mid2]);\n        return (c1 + c2) / 2.0;\n    }\n}\n// @lc code=end\n\n33. search-in-rotated-sorted-array\n\nDescription:\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\nYou may assume no duplicate exists in the array.\nYour algorithm's runtime complexity must be in the order of O(log n).\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=33 lang=java\n *\n * [33] Search in Rotated Sorted Array\n */\n\n// @lc code=start\nclass Solution {\n    public int search(int[] nums, int target) {\n        int l = 0, r = nums.length - 1;\n        while (l \n81. search-in-rotated-sorted-array-II\n\nDescription:\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\nYou are given a target value to search. If found in the array return true, otherwise return false.\nExample 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\nExample 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\nFollow up:\n\nThis is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.\nWould this affect the run-time complexity? How and why?\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=81 lang=java\n *\n * [81] Search in Rotated Sorted Array II\n */\n\n// @lc code=start\nclass Solution {\n    public boolean search(int[] nums, int target) {\n        int l = 0, r = nums.length - 1;\n        while (l \n34. find-first-and-last-position-of-element-in-sorted-array\n\nDescription:\nGiven an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nYour algorithm's runtime complexity must be in the order of O(log n).\nIf the target is not found in the array, return [-1, -1].\nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=34 lang=java\n *\n * [34] Find First and Last Position of Element in Sorted Array\n */\n\n// @lc code=start\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int l1 = 0, r1 = nums.length - 1;\n        int[] res = {-1, -1};\n        while (l1 = target) {\n                r1 = mid - 1;\n            } else {\n                l1 = mid + 1;\n            }\n        }\n        if (l1 = 0 && nums[r2] == target) {\n            res[1] = r2;\n        }\n        return res;\n    }\n}\n// @lc code=end\n\n35. search-insert-position\n\nDescription:\nGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample 1:\nInput: [1,3,5,6], 5\nOutput: 2\nExample 2:\nInput: [1,3,5,6], 2\nOutput: 1\nExample 3:\nInput: [1,3,5,6], 7\nOutput: 4\nExample 4:\nInput: [1,3,5,6], 0\nOutput: 0\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=35 lang=java\n *\n * [35] Search Insert Position\n */\n\n// @lc code=start\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n        int l = 0, r = nums.length - 1;\n        while (l  target) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n}\n// @lc code=end\n\n69. sqrt-x\n\nDescription:\nImplement int sqrt(int x).\nCompute and return the square root of x, where x is guaranteed to be a non-negative integer.\nSince the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.\nExample 1:\nInput: 4\nOutput: 2\nExample 2:\nInput: 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since \n             the decimal part is truncated, 2 is returned.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=69 lang=java\n *\n * [69] Sqrt(x)\n */\n\n// @lc code=start\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0)\n            return 0;\n        int l = 1, r = Integer.MAX_VALUE;\n        while (true) {\n            int mid = l + (r - l) / 2;\n            // 防整形溢出\n            if (mid > x / mid) {\n                r = mid - 1;\n            } else {\n                if (mid + 1 > x / (mid + 1)) {\n                    return mid;\n                }\n                l = mid + 1;\n            }\n        }\n    }\n}\n// @lc code=end\n\n74. search-a-2-d-matrix\n\nDescription:\nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer of the previous row.\n\nExample 1:\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\nOutput: true\nExample 2:\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\nOutput: false\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=74 lang=java\n *\n * [74] Search a 2D Matrix\n */\n\n// @lc code=start\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if(matrix == null || matrix.length == 0) {\n            return false;\n        }\n        int m = matrix.length, n = matrix[0].length;\n        int l = 0, r = m * n - 1, mid, val;\n        while (l  target) {\n                r = mid - 1;\n            } else if (val \n240. search-a-2-d-matrix-II\n\nDescription:\nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n\nExample:\nConsider the following matrix:\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\nGiven target = 5, return true.\nGiven target = 20, return false.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=240 lang=java\n *\n * [240] Search a 2D Matrix II\n */\n\n// @lc code=start\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0) {\n            return false;\n        }\n        for (int i = matrix.length - 1, j = 0; i >= 0 && j  target) {\n                i--;\n            } else if (matrix[i][j] \n"},"02-algorithm/01-basic/03-two-pointer/two-pointer.html":{"url":"02-algorithm/01-basic/03-two-pointer/two-pointer.html","title":"双指针","keywords":"","body":"双指针\n所谓双指针算法，就是指的是在遍历的过程中，不是普通的使用单个指针进行循环访问，而是使用两个相同方向或者相反方向的指针进行扫描，从而达到相应的目的。双指针法充分使用了数组有序这一特征，从而在某些情况下能够简化一些运算，降低时间复杂度。\n\n\n\n双指针类型\n题目索引(持续更新)\n\n\n\n\n对撞指针\n11. Container With Most Water15. 3Sum16. 3Sum Closest 18. 4Sum167. Two Sum II - Input array is sorted344. Reverse String\n\n\n快慢指针\n3. Longest Substring Without Repeating Characters88. Merge Sorted Array141. Linked List Cycle142. Linked List Cycle II209. Minimum Size Subarray Sum283. Move Zeroes287. Find the Duplicate Number\n\n\n分离双指针\n349. Intersection of Two Arrays350. Intersection of Two Arrays II\n\n\n\n类型\n1. 对撞指针\n对撞指针是指在有序数组中，将指向最左侧的索引定义为左指针 (left)，最右侧的定义为右指针 (right)，然后从两头向中间进行数组遍历。\n167. two-sum-II\n\nDescription:\nGiven an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\nNote:\n\nYour returned answers (both index1 and index2) are not zero-based.\nYou may assume that each input would have exactly one solution and you may not use the same element twice.\n\nExample:\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=167 lang=java\n *\n * [167] Two Sum II - Input array is sorted\n */\n\n// @lc code=start\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int l = 0, r = numbers.length - 1;\n        while (l \n344. reverse-string\n\nDescription:\nWrite a function that reverses a string. The input string is given as an array of characters char[].\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nYou may assume all the characters consist of printable ascii characters.\nExample 1:\nInput: [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\nExample 2:\nInput: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=344 lang=java\n *\n * [344] Reverse String\n */\n\n// @lc code=start\nclass Solution {\n    public void reverseString(char[] s) {\n        int l = 0, r = s.length - 1;\n        while (l \n2. 快慢指针\n快慢指针也是双指针，但是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如 fast 每次增长两个，slow 每次增长一个。\n283. move-zeros\n\nDescription:\nGiven an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nExample:\nInput: [0,1,0,3,12]\nOutput: [1,3,12,0,0]\nNote:\n\nYou must do this in-place without making a copy of the array.\nMinimize the total number of operations.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=283 lang=java\n *\n * [283] Move Zeroes\n *\n * 前向双指针\n *\n */\n\n// @lc code=start\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int j = 0;\n        for (int i = 0; i \n148. linked-list-cycle-II\n\nDescription:\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return null.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nNote: Do not modify the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n\nFollow-up:\nCan you solve it without using extra space?\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=142 lang=java\n *\n * [142] Linked List Cycle II\n *\n * 判断是否存在环，若存在找出环入口\n *\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        ListNode pre = head.next;\n        ListNode next = head.next.next;\n        while (pre != next) {\n            if (next == null || next.next == null) {\n                return null;\n            }\n            pre = pre.next;\n            next = next.next.next;\n        }\n        // x = L + S  2x  L + S = kn 再走L步回到起点\n        while (head != next) {\n            head = head.next;\n            next = next.next;\n        }\n        return head;\n    }\n}\n// @lc code=end\n\n209. minimum-size-subarray-sum\n\nDescription:\nGiven an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.\nExample: \nInput: s = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: the subarray [4,3] has the minimal length under the problem constraint.\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). \nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=209 lang=java\n *\n * [209] Minimum Size Subarray Sum\n *\n * 双指针滑动窗口\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int i = 0, j = -1;\n        int sum = 0;\n        int res = nums.length + 1;\n        while (i = s) {\n                res = Math.min(res, j - i + 1);\n            }\n        }\n        return res == nums.length + 1 ? 0 : res;\n    }\n}\n// @lc code=end\n\n88. merge-sorted-array\n\nDescription:\nGiven two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\nNote:\n\nThe number of elements initialized in nums1 and nums2 are m and n respectively.\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.\n\nExample:\nInput:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\nOutput: [1,2,2,3,5,6]\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=88 lang=java\n *\n * [88] Merge Sorted Array\n *\n * 同前向型-快慢指针类似，不同的是快慢指针从后往前，用于合并和替换类型题，防止之前的数据被覆盖。\n *\n */\n\n// @lc code=start\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int p1 = m - 1, p2 = n - 1, p = m + n - 1;\n        while (p1 >= 0 && p2 >= 0) {\n            nums1[p--] = nums1[p1] >= nums2[p2] ? nums1[p1--] : nums2[p2--];\n        }\n        while (p2 >= 0) {\n            nums1[p--] = nums2[p2--];\n        }\n    }\n}\n// @lc code=end\n\n3. 分离双指针\n输入是两个数组 / 链表，两个指针分别在两个容器中移动；根据问题的不同，初始位置可能都在头部，或者都在尾部，或一头一尾。\n349. intersection-of-two-arrays\n\nDescription:\nGiven two arrays, write a function to compute their intersection.\nExample 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\nExample 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nNote:\n\nEach element in the result must be unique.\nThe result can be in any order.\n\nDiscussion | Solution\nCode:\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/*\n * @lc app=leetcode id=349 lang=java\n *\n * [349] Intersection of Two Arrays\n */\n\n// @lc code=start\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        Set set = new HashSet<>();\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int i = 0;\n        int j = 0;\n        while (i  nums2[j]) {\n                j++;\n            } else {\n                set.add(nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        int[] result = new int[set.size()];\n        int k = 0;\n        for (Integer num : set) {\n            result[k++] = num;\n        }\n        return result;\n    }\n}\n// @lc code=end\n\n350. intersection-of-two-arrays-II\n\nDescription:\nGiven two arrays, write a function to compute their intersection.\nExample 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\nExample 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nNote:\n\nEach element in the result should appear as many times as it shows in both arrays.\nThe result can be in any order.\n\nFollow up:\n\nWhat if the given array is already sorted? How would you optimize your algorithm?\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=350 lang=java\n *\n * [350] Intersection of Two Arrays II\n */\n\n// @lc code=start\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        List list = new ArrayList<>();\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int i = 0;\n        int j = 0;\n        while (i  nums2[j]) {\n                j++;\n            } else {\n                list.add(nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        int[] result = new int[list.size()];\n        int k = 0;\n        for (int num : list) {\n            result[k++] = num;\n        }\n        return result;\n    }\n}\n// @lc code=end\n\n题目\n11. container-with-most-water\n\nDescription:\nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\nNote: You may not slant the container and n is at least 2.\n\nThe above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample:\nInput: [1,8,6,2,5,4,8,3,7]\nOutput: 49\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=11 lang=java\n *\n * [11] Container With Most Water\n */\n\n// @lc code=start\nclass Solution {\n    public int maxArea(int[] height) {\n        int l = 0, r = height.length - 1;\n        int res = 0;\n        while (l \n147. linked list cycle\n\nDescription:\nGiven a linked list, determine if it has a cycle in it.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\nFollow up:\nCan you solve it using O(1) (i.e. constant) memory?\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=141 lang=java\n *\n * [141] Linked List Cycle\n *\n * 判断是否存在环\n *\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return false;\n        }\n        ListNode pre = head;\n        ListNode next = head.next.next;\n        while (pre != next) {\n            if (next == null || next.next == null) {\n                return false;\n            }\n            pre = pre.next;\n            next = next.next.next;\n        }\n        return true;\n    }\n}\n// @lc code=end\n\n287. find-the-duplicate-number\n\nDescription:\nGiven an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\nExample 1:\nInput: [1,3,4,2,2]\nOutput: 2\nExample 2:\nInput: [3,1,3,4,2]\nOutput: 3\nNote:\n\nYou must not modify the array (assume the array is read only).\nYou must use only constant, O(1) extra space.\nYour runtime complexity should be less than O(n²).\nThere is only one duplicate number in the array, but it could be repeated more than once.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=287 lang=java\n *\n * [287] Find the Duplicate Number\n *\n * 快慢指针找环入口\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        if (nums.length >= 1) {\n            int slow = nums[0];\n            int fast = nums[nums[0]];\n            while (slow != fast) {\n                slow = nums[slow];\n                fast = nums[nums[fast]];\n            }\n            slow = 0;\n            while (slow != fast) {\n                slow = nums[slow];\n                fast = nums[fast];\n            }\n            return slow;\n        }\n        return -1;\n    }\n}\n// @lc code=end\n\n"},"02-algorithm/01-basic/04-sliding-window/sliding-window.html":{"url":"02-algorithm/01-basic/04-sliding-window/sliding-window.html","title":"滑动窗口","keywords":"","body":"滑动窗口\n\n滑动窗口算法可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。\n\n\n\n\n滑动窗口相应题目索引(持续更新)\n\n\n\n\n3. Longest Substring Without Repeating Characters\n\n\n76. Minimum Window Substring\n\n\n239. Sliding Window Maximum\n\n\n424. Longest Repeating Character Replacement\n\n\n438. Find All Anagrams in a String\n\n\n\n思想\n滑动窗口算法的思路是这样：\n1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。\n2、我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。\n3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。\n4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。\n这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。\nint left = 0, right = 0;\n\nwhile (right \n题目\n76. minimum-window-substring\n\nDescription:\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\nExample:\nInput: S = \"ADOBECODEBANC\", T = \"ABC\"\nOutput: \"BANC\"\nNote:\n\nIf there is no such window in S that covers all characters in T, return the empty string \"\".\nIf there is such window, you are guaranteed that there will always be only one unique minimum window in S.\n\nDiscussion | Solution\nCode:\nimport java.util.HashMap;\nimport java.util.Map;\n\n/*\n * @lc app=leetcode id=76 lang=java\n *\n * [76] Minimum Window Substring\n */\n\n// @lc code=start\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s.length()  map = new HashMap<>();\n        // 记录最短子串的开始位置和长度\n        int l = 0, r = 0, head = 0, len = Integer.MAX_VALUE;\n        for (char c : t.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        int count = map.size();\n        while (r  0) {\n                        count++;\n                    }\n                }\n                // 更新\n                if (r - l \n438. find-all-anagrams-in-a-string\n\nDescription:\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s.\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\nThe order of output does not matter.\nExample 1:\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\nExample 2:\nInput:\ns: \"abab\" p: \"ab\"\n\nOutput:\n[0, 1, 2]\n\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/*\n * @lc app=leetcode id=438 lang=java\n *\n * [438] Find All Anagrams in a String\n */\n\n// @lc code=start\nclass Solution {\n    public List findAnagrams(String s, String p) {\n        List res = new ArrayList<>();\n        if (s == null || p == null || s.length()  window = new HashMap<>();\n        Map needle = new HashMap<>();\n        for (char c : p.toCharArray()) {\n            needle.put(c, needle.getOrDefault(c, 0) + 1);\n        }\n        int l = 0, r = 0, match = 0;\n        while (r \n3. longest-substring-without-repeating-characters\n\nDescription:\nGiven a string, find the length of the longest substring without repeating characters.\nExample 1:\nInput: \"abcabcbb\"\nOutput: 3 \nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3. \n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\nDiscussion | Solution\nCode:\nimport java.util.HashMap;\nimport java.util.Map;\n\n/*\n * @lc app=leetcode id=3 lang=java\n *\n * [3] Longest Substring Without Repeating Characters\n */\n\n// @lc code=start\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        Map map = new HashMap<>();\n        int l = 0, r = 0, res = 0;\n        while (r  1) {\n                char lc = s.charAt(l);\n                map.put(lc, map.get(lc) - 1);\n                l++;\n            }\n            res = Math.max(res, r - l);\n        }\n        return res;\n    }\n}\n// @lc code=end\n\n424. longest-repeating-character-replacement\n\nDescription:\nGiven a string s that consists of only uppercase English letters, you can perform at most k operations on that string.\nIn one operation, you can choose any character of the string and change it to any other uppercase English character.\nFind the length of the longest sub-string containing all repeating letters you can get after performing the above operations.\nNote:\nBoth the string's length and k will not exceed 104.\nExample 1:\nInput:\ns = \"ABAB\", k = 2\n\nOutput:\n4\n\nExplanation:\nReplace the two 'A's with two 'B's or vice versa.\nExample 2:\nInput:\ns = \"AABABBA\", k = 1\n\nOutput:\n4\n\nExplanation:\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=424 lang=java\n *\n * [424] Longest Repeating Character Replacement\n */\n\n// @lc code=start\nclass Solution {\n    public int characterReplacement(String s, int k) {\n        int[] count = new int[26];\n        int l = 0, maxCount = 0, maxLen = 0;\n        for (int r = 0; r  k) {\n                count[s.charAt(l) - 'A']--;\n                l++;\n            }\n            maxLen = Math.max(maxLen, r - l + 1);\n        }\n        return maxLen;\n    }\n}\n// @lc code=end\n\n"},"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html":{"url":"02-algorithm/01-basic/05-divide-and-conquer/divide-and-conquer.html","title":"分治","keywords":"","body":"分治\n\n将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。\n\n\n\n\n分治算法相应题目索引（持续更新）\n\n\n\n\n95. Unique Binary Search Trees II\n\n\n241. Different Ways to Add Parentheses\n\n\n\n思想\n分治算法可以分三步走：分解 -> 解决 -> 合并\n\n分解原问题为结构相同的子问题。\n分解到某个容易求解的边界之后，进行递归求解。\n将子问题的解合并成原问题的解。\n\n题目\n95. unique-binary-search-trees-ii\n\nDescription:\nGiven an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.\nExample:\nInput: 3\nOutput:\n[\n  [1,null,3,2],\n  [3,2,null,1],\n  [3,1,null,null,2],\n  [2,1,3],\n  [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\nDiscussion | Solution\nCode:\nimport java.util.LinkedList;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=95 lang=java\n *\n * [95] Unique Binary Search Trees II\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public List generateTrees(int n) {\n        if (n ();\n        }\n        return generateSubTree(1, n);\n    }\n    public List generateSubTree(int l, int r) {\n        List res = new LinkedList<>();\n        if (l > r) {\n            res.add(null);\n            return res;\n        }\n        for (int i = l; i  left = generateSubTree(l, i - 1);\n            List right = generateSubTree(i + 1, r);\n            for (TreeNode leftNode : left) {\n                for (TreeNode rightNode : right) {\n                    TreeNode node = new TreeNode(i);\n                    node.left = leftNode;\n                    node.right = rightNode;\n                    res.add(node);\n                }\n            }\n        }\n        return res;\n    }\n}\n// @lc code=end\n\n241. different-ways-to-add-parentheses\n\nDescription:\nGiven a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.\nExample 1:\nInput: \"2-1-1\"\nOutput: [0, 2]\nExplanation: \n((2-1)-1) = 0 \n(2-(1-1)) = 2\nExample 2:\nInput: \"2*3-4*5\"\nOutput: [-34, -14, -10, -10, 10]\nExplanation: \n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=241 lang=java\n *\n * [241] Different Ways to Add Parentheses\n */\n\n// @lc code=start\nclass Solution {\n    public List diffWaysToCompute(String input) {\n        List res = new ArrayList<>();\n        for (int i = 0; i  left = diffWaysToCompute(input.substring(0, i));\n                List right = diffWaysToCompute(input.substring(i + 1));\n                for (int leftVal : left) {\n                    for (int rightVal : right) {\n                        switch (c) {\n                            case '+' : \n                                res.add(leftVal + rightVal);\n                                break;\n                            case '-' :\n                                res.add(leftVal - rightVal);\n                                break;\n                            case '*' :\n                                res.add(leftVal * rightVal);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        if (res.size() == 0) {\n            res.add(Integer.valueOf(input));\n        }\n        return res;\n    }\n}\n// @lc code=end\n\n"},"02-algorithm/01-basic/06-backtracking/backtracking.html":{"url":"02-algorithm/01-basic/06-backtracking/backtracking.html","title":"回溯","keywords":"","body":"回溯\n解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：\n1、路径：也就是已经做出的选择。\n2、选择列表：也就是你当前可以做的选择。\n3、结束条件：也就是到达决策树底层，无法再做选择的条件。\n代码方面，回溯算法的框架：\nresult = []\ndef backtrack(路径, 选择列表):\n    if 满足结束条件:\n        result.add(路径)\n        return\n\n    for 选择 in 选择列表:\n        做选择\n        backtrack(路径, 选择列表)\n        撤销选择\n其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」，特别简单。\n\n\n\n回溯算法对应题目索引(持续更新)\n\n\n\n\n22. Generate Parentheses\n\n\n37. Sudoku Solver\n\n\n39. Combination Sum\n\n\n40. Combination Sum II\n\n\n46. Permutations\n\n\n47. Permutations II\n\n\n51. N-Queens\n\n\n77. Combinations\n\n\n78. Subsets\n\n\n79. Word Search\n\n\n90. Subsets II\n\n\n216. Combination Sum III\n\n\n\n类型\n1. 子集\n问题很简单，输入一个可能包含重复数字的数组，要求算法输出这些数字的所有子集。\n78. subsets\n\nDescription:\nGiven a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]\nOutput:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=78 lang=java\n *\n * [78] Subsets\n */\n\n// @lc code=start\nclass Solution {\n    private List> res;\n    public List> subsets(int[] nums) {\n        res = new ArrayList<>();\n        for (int i = 0; i ());\n        }\n        return res;\n    }\n    private void dfs(int[] nums, int len, int index, Deque stack) {\n        if (stack.size() == len) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = index; i \n90. subsets-ii\n\nDescription:\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: [1,2,2]\nOutput:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=90 lang=java\n *\n * [90] Subsets II\n */\n\n// @lc code=start\nclass Solution {\n    private List> res;\n    public List> subsetsWithDup(int[] nums) {\n        res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i ());\n        }\n        return res;\n    }\n    private void dfs(int[] nums, int len, int index, Deque stack) {\n        if (stack.size() == len) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = index; i \n2. 排列\n输入一个可能包含重复数字的数组 nums，返回这些数字的全部排列。\n46. permutations\n\nDescription:\nGiven a collection of distinct integers, return all possible permutations.\nExample:\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=46 lang=java\n *\n * [46] Permutations\n */\n\n// @lc code=start\nclass Solution {\n    private List> res;\n    private boolean[] visited;\n\n    public List> permute(int[] nums) {\n        res = new ArrayList<>();\n        visited = new boolean[nums.length];\n        findPermute(nums, new ArrayDeque<>());\n        return res;\n    }\n\n    private void findPermute(int[] nums, Deque stack){\n        if(stack.size() == nums.length){\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for(int i = 0; i \n90. permutations-ii\n\nDescription:\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\nExample:\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=47 lang=java\n *\n * [47] Permutations II\n */\n\n// @lc code=start\nclass Solution {\n\n    private List> res;\n    private boolean[] visited;\n\n    public List> permuteUnique(int[] nums) {\n        res = new ArrayList<>();\n        visited = new boolean[nums.length];\n        Arrays.sort(nums);\n        findPermuteUnique(nums, new ArrayDeque<>());\n        return res;\n    }\n\n    private void findPermuteUnique(int[] nums, Deque stack){\n        if(stack.size() == nums.length){\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for(int i = 0; i  0 && nums[i] == nums[i - 1] && !visited[i - 1])) {\n                continue;\n            }\n            visited[i] = true;\n            stack.push(nums[i]);\n            findPermuteUnique(nums, stack);\n            stack.pop();\n            visited[i] = false;\n        }\n    }\n}\n// @lc code=end\n\n3. 组合\n输入两个数字 n, k，算法输出 [1..n] 中 k 个数字的所有组合。\n77. combinations\n\nDescription:\nGiven two integers n and k, return all possible combinations of k numbers out of 1 ... n.\nExample:\nInput: n = 4, k = 2\nOutput:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=77 lang=java\n *\n * [77] Combinations\n */\n\n// @lc code=start\nclass Solution {\n\n    private List> res;\n\n    public List> combine(int n, int k) {\n        res = new ArrayList<>();\n        if (n ());\n        return res;\n    }\n\n    private void dfs(int n, int k, int index, Deque stack) {\n        if (k == 0) {\n            res.add(new ArrayList<>(stack));\n            return;\n        }\n        for (int i = index; i \n4. 二维\n使用一个数组来表示方向位移的技巧。\n37. sudoku-solver\n\nDescription:\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nEmpty cells are indicated by the character '.'.\n\nA sudoku puzzle...\n\n...and its solution numbers marked in red.\nNote:\n\nThe given board contain only digits 1-9 and the character '.'.\nYou may assume that the given Sudoku puzzle will have a single unique solution.\nThe given board size is always 9x9.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=37 lang=java\n *\n * [37] Sudoku Solver\n */\n\n// @lc code=start\nclass Solution {\n    private boolean[][] rows, cols, boxes;\n    public void solveSudoku(char[][] board) {\n        if (board == null || board.length == 0 || board[0].length == 0) {\n            return;\n        }\n        rows = new boolean[9][10];\n        cols = new boolean[9][10];\n        boxes = new boolean[9][10];\n        // 初始化\n        for (int i = 0; i \n51. n-queens\n\nDescription:\nThe n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\nExample:\nInput: 4\nOutput: [\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above.\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=51 lang=java\n *\n * [51] N-Queens\n */\n\n// @lc code=start\nclass Solution {\n    private int N;\n    private boolean[] cols, d1, d2;\n    private List> res;\n    private char[][] board;\n\n    public List> solveNQueens(int n) {\n        res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n        cols = new boolean[n];\n        d1 = new boolean[n * 2 - 1];\n        d2 = new boolean[n * 2 - 1];\n        N = n;\n        board = new char[n][n];\n        for (char[] row : board) {\n            Arrays.fill(row, '.');\n        }\n\n        dfs(0);\n        return res;\n    }\n\n    private void dfs(int r) {\n        if (r == N) {\n            res.add(convert(board));\n            return;\n        }\n        for (int c = 0; c  convert(char[][] board) {\n        List ans = new ArrayList<>();\n        for (char[] row : board) {\n            ans.add(new String(row));\n        }\n        return ans;\n    }\n}\n// @lc code=end\n\n79. word-search\n\nDescription:\nGiven a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\nExample:\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\nGiven word = \"ABCCED\", return true.\nGiven word = \"SEE\", return true.\nGiven word = \"ABCB\", return false.\nDiscussion | Solution\nCode:\n\n/*\n * @lc app=leetcode id=79 lang=java\n *\n * [79] Word Search\n */\n\n// @lc code=start\nclass Solution {\n    private int[][] cor = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n    private int n, m;\n    private boolean[][] visited;\n\n    public boolean exist(char[][] board, String word) {\n        if (board == null || board.length == 0) {\n            return false;\n        }\n        if (word == null || word.length() == 0) {\n             return true;\n        }\n        n = board.length;\n        m = board[0].length;\n        visited = new boolean[n][m];\n        for (int i = 0; i = 0 && x =0 && y \n题目\n22. generate-parenthesis\n\nDescription:\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nFor example, given n = 3, a solution set is:\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=22 lang=java\n *\n * [22] Generate Parentheses\n */\n\n// @lc code=start\nclass Solution {\n    private List res;\n    public List generateParenthesis(int n) {\n        res = new ArrayList<>();\n        dfs(n, \"\", 0, 0);\n        return res;\n    }\n    private void dfs(int n, String str, int l, int r) {\n        if (str.length() == 2 * n) {\n            res.add(str);\n            return;\n        }\n        if (l \n"},"02-algorithm/01-basic/07-depth-first-search/dfs.html":{"url":"02-algorithm/01-basic/07-depth-first-search/dfs.html","title":"深度优先搜索","keywords":"","body":"深度优先搜索\n\nDFS（深度优先搜索） 常用来解决可达性的问题。\n\n两个要点：\n\n栈：用栈来保存当前节点信息，当遍历新节点返回时能够继续遍历当前节点。可以使用递归栈。\n标记：和 BFS 一样同样需要对已经遍历过的节点进行标记。\n\n\n\n\n深度优先搜索相应题目索引(持续更新)\n\n\n\n\n130. Surrounded Regions\n\n\n200. Number of Islands\n\n\n417. Pacific Atlantic Water Flow\n\n\n547. Friend Circles\n\n\n695. Max Area of Island\n\n\n\n模板\nvoid dfs()    // 参数用来表示状态  \n{  \n    if(到达终点状态)  \n    {  \n        ...        // 根据题意添加  \n        return;  \n    }  \n    if(越界或者是不合法状态)  \n        return;  \n    if(特殊状态)    // 剪枝\n        return ;\n    for(扩展方式)  \n    {  \n        if(扩展方式所达到状态合法)  \n        {  \n            修改操作;    // 根据题意来添加  \n            标记；  \n            dfs（）；  \n            (还原标记)；  // 是否还原标记根据题意  \n            //如果加上（还原标记）就是 回溯法  \n        }  \n    }  \n}\n\n题目\n695. max-area-of-island\n\nDescription:\nGiven a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\nExample 1:\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\nGiven the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\nExample 2:\n[[0,0,0,0,0,0,0,0]]\nGiven the above grid, return 0.\nNote: The length of each dimension in the given grid does not exceed 50.\nDiscussion | Solution\nCode:\n\n/*\n * @lc app=leetcode id=695 lang=java\n *\n * [695] Max Area of Island\n */\n\n// @lc code=start\nclass Solution {\n    private int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n    private int m, n;\n\n    public int maxAreaOfIsland(int[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n        int ans = 0;\n        m = grid.length;\n        n = grid[0].length;\n        for (int i = 0; i = m || j = n || grid[i][j] == 0) {\n            return 0;\n        }\n        grid[i][j] = 0;\n        for (int[] d : dir) {\n            area += dfs(grid, i + d[0], j + d[1], 1);\n        }\n        return area;\n    }\n}\n// @lc code=end\n\n200. number-of-island\n\nDescription:\nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\nExample 1:\nInput:\n11110\n11010\n11000\n00000\n\nOutput: 1\nExample 2:\nInput:\n11000\n11000\n00100\n00011\n\nOutput: 3\nDiscussion | Solution\nCode:\n\n/*\n * @lc app=leetcode id=200 lang=java\n *\n * [200] Number of Islands\n */\n\n// @lc code=start\nclass Solution {\n    private int m, n;\n    private int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n        m = grid.length;\n        n = grid[0].length;\n        int res = 0;\n        for (int i = 0; i = m || j = n || grid[i][j] == '0') {\n            return;\n        }\n        grid[i][j] = '0';\n        for (int[] d : dir) {\n            dfs(grid, i + d[0], j + d[1]);\n        }\n    }\n}\n// @lc code=end\n\n547. friend-circles\n\nDescription:\nThere are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\nGiven a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\nExample 1:\nInput: \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\nOutput: 2\nExplanation:The 0th and 1st students are direct friends, so they are in a friend circle. The 2nd student himself is in a friend circle. So return 2.\nExample 2:\nInput: \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\nOutput: 1\nExplanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\nNote:\n\nN is in range [1,200].\nM[i][i] = 1 for all students.\nIf M[i][j] = 1, then M[j][i] = 1.\n\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=547 lang=java\n *\n * [547] Friend Circles\n */\n\n// @lc code=start\nclass Solution {\n    private int n;\n    private boolean[] visited;\n\n    public int findCircleNum(int[][] M) {\n        n = M.length;\n        visited = new boolean[n];\n        int res = 0;\n        for (int i = 0; i \n130. surrounded-regions\n\nDescription:\nGiven a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\nExample:\nX X X X\nX O O X\nX X O X\nX O X X\nAfter running your function, the board should be:\nX X X X\nX X X X\nX X X X\nX O X X\nExplanation:\nSurrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\nDiscussion | Solution\nCode:\n\n/*\n * @lc app=leetcode id=130 lang=java\n *\n * [130] Surrounded Regions\n */\n\n// @lc code=start\nclass Solution {\n\n    private int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    private int m, n;\n\n    public void solve(char[][] board) {\n        if (board == null || board.length == 0) {\n            return;\n        }\n\n        m = board.length;\n        n = board[0].length;\n\n        for (int i = 0; i = m || c = n || board[r][c] != 'O') {\n            return;\n        }\n        board[r][c] = 'T';\n        for (int[] d : dir) {\n            dfs(board, r + d[0], c + d[1]);\n        }\n    }\n}\n// @lc code=end\n\n417. pacific-atlantic-water-flow\n\nDescription:\nGiven an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.\nWater can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.\nFind the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.\nNote:\n\nThe order of returned grid coordinates does not matter.\nBoth m and n are less than 150.\n\nExample:\nGiven the following 5x5 matrix:\n\n  Pacific ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * Atlantic\n\nReturn:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\nDiscussion | Solution\nCode:\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/*\n * @lc app=leetcode id=417 lang=java\n *\n * [417] Pacific Atlantic Water Flow\n */\n\n// @lc code=start\nclass Solution {\n\n    private int[][] matrix;\n    private int m, n;\n    private int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public List> pacificAtlantic (int[][] matrix) {\n        List> res = new ArrayList<>();\n        if (matrix == null || matrix.length == 0) {\n            return res;\n        }\n        m = matrix.length;\n        n = matrix[0].length;\n        this.matrix = matrix;\n        boolean[][] canReachP = new boolean[m][n];\n        boolean[][] canReachA = new boolean[m][n];\n\n        for (int i = 0; i = m || nextCol = n\n                    || matrix[r][c] > matrix[nextRow][nextCol]) {\n                continue;\n            }\n            dfs(nextRow, nextCol, canReach);\n        }\n    }\n}\n// @lc code=end\n\n"},"02-algorithm/01-basic/08-breadth-first-search/bfs.html":{"url":"02-algorithm/01-basic/08-breadth-first-search/bfs.html","title":"宽度优先搜索","keywords":"","body":"宽度优先搜索\nBFS 的核心思想应该不难理解的，就是把一些问题抽象成图，从一个点开始，向四周开始扩散。一般来说，我们写 BFS 算法都是用「队列」这种数据结构，每次将一个节点周围的所有节点加入队列。\nBFS 相对 DFS 的最主要的区别是：BFS 找到的路径一定是最短的，但代价就是空间复杂度比 DFS 大很多。\n在程序实现 BFS 时需要考虑以下问题：\n\n队列：用来存储每一轮遍历得到的节点；\n标记：对于遍历过的节点，应该将它标记，防止重复遍历。\n\n\n\n\n宽度优先搜索相应题目索引(持续更新)\n\n\n\n\n127. Word Ladder\n\n\n279. Perfect Squares\n\n\n1091. Shortest Path in Binary Matrix\n\n\n\n模板\n// 计算从起点 start 到终点 target 的最近距离\nint BFS(Node start, Node target) {\n    Queue q; // 核心数据结构\n    Set visited; // 避免走回头路\n\n    q.offer(start); // 将起点加入队列\n    visited.add(start);\n    int step = 0; // 记录扩散的步数\n\n    while (q not empty) {\n        int sz = q.size();\n        /* 将当前队列中的所有节点向四周扩散 */\n        for (int i = 0; i \n题目\n1091. shortest-path-in-binary-matrix\nDescription:\nIn an N by N square grid, each cell is either empty (0) or blocked (1).\nA clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\n\nAdjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)\nC_1 is at location (0, 0) (ie. has value grid[0][0])\nC_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\nIf C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n\nReturn the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.\nExample 1:\nInput: [[0,1],[1,0]]\n\nOutput: 2\nExample 2:\nInput: [[0,0,0],[1,1,0],[1,1,0]]\n\nOutput: 4\nNote:\n\n1 \ngrid[r][c] is 0 or 1\n\nDiscussion | Solution\nCode:\n\nimport java.util.ArrayDeque;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=1091 lang=java\n *\n * [1091] Shortest Path in Binary Matrix\n */\n\n// @lc code=start\nclass Solution {\n    class Node {\n        int x;\n        int y;\n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        int[][] dir = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n        int m = grid.length;\n        int n = grid[0].length;\n        Queue queue = new ArrayDeque<>();\n        queue.offer(new Node(0, 0));\n        int ans = 0;\n        while (!queue.isEmpty()) {\n            ans++;\n            int sz = queue.size();\n            for (int i = 0; i = m || yy = n) {\n                        continue;\n                    }\n                    queue.offer(new Node(xx, yy));\n                }\n            }\n        }\n        return -1;\n    }\n}\n// @lc code=end\n\n279. perfect-squares\nDescription:\nGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\nExample 1:\nInput: n = 12\nOutput: 3 \nExplanation: 12 = 4 + 4 + 4.\nExample 2:\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\nDiscussion | Solution\nCode:\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=279 lang=java\n *\n * [279] Perfect Squares\n *\n * 可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int numSquares(int n) {\n        List squares = generateSquares(n);\n        Queue queue = new ArrayDeque<>();\n        boolean[] visited = new boolean[n + 1];\n        queue.add(n);\n        visited[n] = true;\n        int level = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            level++;\n            for (int i = 0; i  generateSquares(int n) {\n        List squares = new ArrayList<>();\n        int square = 1;\n        int diff = 3;\n        while (square \n127. word-ladder\nGiven two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\n\nOnly one letter can be changed at a time.\nEach transformed word must exist in the word list.\n\nNote:\n\nReturn 0 if there is no such transformation sequence.\nAll words have the same length.\nAll words contain only lowercase alphabetic characters.\nYou may assume no duplicates in the word list.\nYou may assume beginWord and endWord are non-empty and are not the same.\n\nExample 1:\nInput:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\nExample 2:\nInput:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=127 lang=java\n *\n * [127] Word Ladder\n *\n * 建图\n *\n */\n\n// @lc code=start\nclass Solution {\n    public int ladderLength(String beginWord, String endWord, List wordList) {\n        wordList.add(beginWord);\n        int N = wordList.size();\n        int start = N - 1;\n        int end = 0;\n        while (end [] graphic = buildGraphic(wordList);\n        return getShortestPath(graphic, start, end);\n    }\n\n    private List[] buildGraphic(List wordList) {\n        int N = wordList.size();\n        List[] graphic = new List[N];\n        for (int i = 0; i ();\n            for (int j = 0; j [] graphic, int start, int end) {\n        Queue queue = new LinkedList<>();\n        boolean[] marked = new boolean[graphic.length];\n        queue.add(start);\n        marked[start] = true;\n        int path = 1;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            path++;\n            while (size-- > 0) {\n                int cur = queue.poll();\n                for (int next : graphic[cur]) {\n                    if (next == end) {\n                        return path;\n                    }\n                    if (marked[next]) {\n                        continue;\n                    }\n                    marked[next] = true;\n                    queue.add(next);\n                }\n            }\n        }\n        return 0;\n    }\n}\n// @lc code=end\n\n参考\n双向BFS优化\n"},"02-algorithm/01-basic/08-greedy/greedy.html":{"url":"02-algorithm/01-basic/08-greedy/greedy.html","title":"贪心","keywords":"","body":"贪心\n"},"02-algorithm/02-advanced/01-dp/01-线性/linear.html":{"url":"02-algorithm/02-advanced/01-dp/01-线性/linear.html","title":"线性","keywords":"","body":"线性DP\n线性 DP 问题是指递推方程具有明显的线性关系，有一维线性和二维线性。\n单串LIS\n300. longest-increasing-subsequence\n\nDescription:\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\nExample:\nInput: [10,9,2,5,3,7,101,18]\nOutput: 4 \nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\nNote:\n\nThere may be more than one LIS combination, it is only necessary for you to return the length.\nYour algorithm should run in O(n2) complexity.\n\nFollow up: Could you improve it to O(n log n) time complexity?\nCode:\nclass Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        int res = 0;\n        for (int i = 0; i = 0; j--) {\n                if (nums[i] > nums[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            res = Math.max(res, dp[i]);\n        }\n        return res;\n    }\n}\n\n双串LCS\n1143. longest-common-subsequence\n\nDescription:\nGiven two strings text1 and text2, return the length of their longest common subsequence.\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not). A common subsequence of two strings is a subsequence that is common to both strings.\nIf there is no common subsequence, return 0.\nExample 1:\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\nExample 2:\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\nExample 3:\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\nConstraints:\n\n1 \n1 \nThe input strings consist of lowercase English characters only.\n\nCode:\nclass Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int m = text1.length(), n = text2.length();\n        // dp[i][j]: text1 的前 i 个字符与 text2 的前 j 个字符最长公共子串\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i \n字符串匹配\n72. edit-distance\n\nDescription:\nGiven two words word1 and word2, find the minimum number of operations required to convert word1 to word2.\nYou have the following 3 operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\nExample 1:\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\nExample 2:\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\nCode:\nclass Solution {\n    public int minDistance(String word1, String word2) {\n        int m = word1.length(), n = word2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i \n44. wildcard-matching\n\nDescription:\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\nNote:\n\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like ? or *.\n\nExample 1:\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput:\ns = \"aa\"\np = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\nExample 3:\nInput:\ns = \"cb\"\np = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\nExample 4:\nInput:\ns = \"adceb\"\np = \"*a*b\"\nOutput: true\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\nExample 5:\nInput:\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false\nCode:\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        if (s == null || p == null) {\n            return false;\n        }\n        int m = s.length(), n = p.length();\n        boolean[][] dp = new boolean[m + 1][n + 1];\n        dp[m][n] = true;\n        for (int j = n - 1; j >= 0; j--) {\n            if (p.charAt(j) != '*') {\n                break;\n            } else {\n                dp[m][j]=true;\n            }\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                if (p.charAt(j) == '?' || s.charAt(i) == p.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j + 1];\n                } else if (p.charAt(j) == '*') {\n                    dp[i][j] = dp[i + 1][j] || dp[i][j + 1];\n                } else {\n                    dp[i][j] = false;\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n\n"},"02-algorithm/02-advanced/01-dp/02-区间/interval.html":{"url":"02-algorithm/02-advanced/01-dp/02-区间/interval.html","title":"区间","keywords":"","body":"区间DP\n区间DP，顾名思义，就是需要在一个区间上去进行状态转移，先在小区间进行DP得到最优解，然后再利用小区间的最优解合并求大区间的最优解。\n区间 DP 的特点：\n合并 ：即将两个或多个部分进行整合，当然也可以反过来；\n特征 ：能将问题分解为能两两合并的形式；\n求解 ：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。\n模板\n状态$dp[i][j]$表示将下标位置$i$到$j$的所有元素合并能获得的价值的最大值，那么 ，$f(i,j)=max{f(i,k)+f(k+1,j)+cost}$为将这两组元素合并起来的代价。\nint[][] dp = new int[n][n];\n\nfor (int i = 0; i \n题目\n516. longest-palindromic-subsequence\n\nDescription:\nGiven a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.\nExample 1:\nInput:\n\"bbbab\"\nOutput:\n4\nOne possible longest palindromic subsequence is \"bbbb\".\nExample 2:\nInput:\n\"cbbd\"\nOutput:\n2\nOne possible longest palindromic subsequence is \"bb\".\nCode:\nclass Solution {\n    public int longestPalindromeSubseq(String s) {\n        int n = s.length();\n        int[][] dp = new int[n][n];\n\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i][i] = 1;\n            for (int j = i + 1; j \n1039. minimum-score-triangulation-of-polygon\n\nDescription:\nGiven N, consider a convex N-sided polygon with vertices labelled A[0], A[i], ..., A[N-1] in clockwise order.\nSuppose you triangulate the polygon into N-2 triangles. For each triangle, the value of that triangle is the product of the labels of the vertices, and the total score of the triangulation is the sum of these values over all N-2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.\nExample 1:\nInput: [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.\nExample 2:\n\nInput: [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.  The minimum score is 144.\nExample 3:\nInput: [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\nNote:\n\n3 \n1 \n\nCode:\nclass Solution {\n    public int minScoreTriangulation(int[] A) {\n        int n = A.length;\n        int[][] dp = new int[n][n];\n        // 区间 dp : 长度为 len 的区间 [l,r], 取点 k 划分区间求极值 \n        for (int len = 3; len \n312. burst-balloons\n\nDescription:\nGiven n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.\nFind the maximum coins you can collect by bursting the balloons wisely.\nNote:\n\nYou may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.\n0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100\n\nExample:\nInput: [3,1,5,8]\nOutput: 167 \nExplanation: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\n             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\nCode:\nclass Solution {\n    public int maxCoins(int[] A) {\n        int[] nums = new int[A.length + 2];\n        int n = 1;\n        for (int x : A) {\n            if (x > 0) {\n                nums[n++] = x;\n            }\n        }\n        nums[0] = nums[n++] = 1;\n        // 区间 dp : 长度为 len 的区间 [l,r], 取点 k 划分区间求极值 \n        int[][] dp = new int[n][n];\n\n        for (int len = 3; len \n664. strange-printer\n\nDescription:\nThere is a strange printer with the following two special requirements:\n\nThe printer can only print a sequence of the same character each time.\nAt each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\n\nGiven a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.\nExample 1:\nInput: \"aaabbb\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"bbb\".\nExample 2:\nInput: \"aba\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\nHint: Length of the given string will not exceed 100.\nCode:\nclass Solution {\n    public int strangePrinter(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int n = s.length();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i \n87. scramble-string\n\nDescription:\nGiven a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\nBelow is one possible representation of s1 = \"great\":\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\nTo scramble the string, we may choose any non-leaf node and swap its two children.\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\nWe say that \"rgeat\" is a scrambled string of \"great\".\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\nWe say that \"rgtae\" is a scrambled string of \"great\".\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\nExample 1:\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExample 2:\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\nCode:\nclass Solution {\n    public boolean isScramble(String s1, String s2) {\n        if (s1.length() != s2.length()) {\n            return false;\n        }\n        int n = s1.length();\n        boolean[][][] dp = new boolean[n][n][n + 1];\n        for (int i = 0; i \n"},"02-algorithm/02-advanced/02-graph/01-connected/connected.html":{"url":"02-algorithm/02-advanced/02-graph/01-connected/connected.html","title":"连通性","keywords":"","body":"图的连通性\n在图$G$中，两个不同的结点$u$和结点$v$之间若存在一条路，则称结点u和结点v是连通的。\n强连通分量\n针对于有向图，在这儿先明确两个定义：强连通和强连通分量。强连通是指有向图$G$中任意两个结点连通。强连通分量是极大的强连通子图。\n应用场合：有向图、有两两可达条件、通过把每个强连通分量缩点从而把原图化简成一棵树。\n模板\nclass Tarjan {\n\n    private int V;\n    private List[] G;\n    private List> res;\n    private boolean[] inStack;\n    private Deque stack;\n    // dfn[u]：深度优先搜索遍历时结点u被搜索的次序\n    // low[u]：以u为根的子树中的结点的dfn的最小值\n    private int[] dfn;\n    private int[] low;\n    private int[] sccBelong;\n    private int[] sccSz;\n    private int dfsCnt;\n    private int sccCnt;\n\n    public Tarjan(List[] G, int V) {\n        this.G = G;\n        this.V = V;\n        stack = new ArrayDeque<>();\n        inStack = new boolean[V];\n        dfn = new int[V];\n        low = new int[V];\n        sccBelong = new int[V];\n        sccSz = new int[V];\n        dfsCnt = sccCnt = 0;\n        res = new ArrayList<>();\n    }\n\n    public List> findScc() {\n        // 从下标索引1开始\n        for (int i = 1; i  tmp = new ArrayList<>();\n            sccCnt++;\n            for (; ; ) {\n                int v = stack.pop();\n                inStack[v] = false;\n                sccBelong[v] = sccCnt;\n                sccSz[sccCnt]++;\n                tmp.add(v);\n                if (v == u) {\n                    break;\n                }\n            }\n            res.add(tmp);\n        }\n    }\n\n}\n\n题目\n受欢迎的牛\n题意：\n每一头牛的愿望就是变成一头最受欢迎的牛。现在有$N$头牛，给你$M$对整数$(A,B) $，表示牛$A$认为牛$B$受欢迎。这种关系是具有传递性的，如果$A$认为$B$受欢迎，$B$认为$C$受欢迎，那么牛$A$也认为牛$C$受欢迎。你的任务是求出有多少头牛被除自己之外的所有牛认为是受欢迎的。\n思想：\n直接tarjan缩点，然后如果出度为0的点只有一个，输出这个点包含的原先的点的个数，否则为0；\n代码：\n爆栈了！！！\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.IOException;\nimport java.util.Deque;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.io.BufferedReader;\nimport java.util.ArrayDeque;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Coer\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class Task {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            List[] G = new ArrayList[n + 1];\n            for (int i = 1; i ();\n            }\n            for (int i = 0; i [] G;\n            private List> res;\n            private boolean[] inStack;\n            private Deque stack;\n            private int[] dfn;\n            private int[] low;\n            private int[] sccBelong;\n            private int[] sccSz;\n            private int dfsCnt;\n            private int sccCnt;\n\n            public Tarjan(List[] G, int V) {\n                this.G = G;\n                this.V = V;\n                stack = new ArrayDeque<>();\n                inStack = new boolean[V];\n                dfn = new int[V];\n                low = new int[V];\n                sccBelong = new int[V];\n                sccSz = new int[V];\n                dfsCnt = sccCnt = 0;\n                res = new ArrayList<>();\n            }\n\n            public List> findScc() {\n                for (int i = 1; i  tmp = new ArrayList<>();\n                    sccCnt++;\n                    for (; ; ) {\n                        int v = stack.pop();\n                        inStack[v] = false;\n                        sccBelong[v] = sccCnt;\n                        sccSz[sccCnt]++;\n                        tmp.add(v);\n                        if (v == u) {\n                            break;\n                        }\n                    }\n                    res.add(tmp);\n                }\n            }\n\n        }\n\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n    }\n\n}\n\n参考\nACM-强连通分量\nOI-强连通分量\nTarjan\n视频\n双连通分量、割点与桥\n针对于无向图：点双连通分量和边的连联通分量。\n在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪条边（只能删去一条）都不能使它们不连通，我们就说$u$和$v$边双连通 。\n在一张连通的无向图中，对于两个点$u$和$v$，如果无论删去哪个点（只能删去一个，且不能删$u$和$v$自己）都不能使它们不连通，我们就说$u$和$v$点双连通 。\n对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。\n对于一个无向图，如果删掉一条边后图中的连通分量数增加了，则称这条边为桥或者割边。\n模板\n双连通分量：\n对于点双连通分支，实际上在求割点的过程中就能顺便把每个点双连通分支求出。建立一个栈，存储当前双连通分支，在搜索图时，每找到一条树$dfn$枝边或后向边(非横叉边)，就把这条边加入栈中。如果遇到某时满足$dfn(u)\\leq low(v)$，说明u是一个割点，同时把边从栈顶一个个取出，直到遇到了边$(u,v)$，取出的这些边与其关联的点，组成一个点双连通分支。割点可以属于多个点双连通分支，其余点和每条边只属于且属于一个点双连通分支。\nclass Tarjan {\n\n    private int V;\n    private List[] G;\n    private Deque stack;\n    private List> bcc;\n    // dfn[u]：深度优先搜索遍历时结点u被搜索的次序\n    // low[u]：以u为根的子树中的结点的dfn的最小值\n    private int[] dfn;\n    private int[] low;;\n    private int dfsCnt;\n    private int bccCnt;\n\n    public Tarjan(List[] G, int V) {\n        this.G = G;\n        this.V = V;\n        stack = new ArrayDeque<>();\n        bcc = new ArrayList<>();\n        dfn = new int[V];\n        low = new int[V];\n        dfsCnt = bccCnt = 0;\n    }\n\n    public List> findBccVE() {\n        // 从下标索引1开始\n        for (int i = 1; i = dfn[u]) {\n                    bccCnt++;\n                    List tmp = new ArrayList<>();\n                    while (!stack.isEmpty() && stack.peek() != v) {\n                        tmp.add(stack.pop());\n                    }\n                    tmp.add(stack.pop());\n                    tmp.add(u);\n                    bcc.add(tmp);\n                }\n            } else if (fa != v && dfn[v] \n对于边双连通分支，求法更为简单。只需在求出所有的桥以后，把桥边删除，原图变成了多个连通块，则每个连通块就是一个边双连通分支。桥不属于任何一个边双连通分支，其余的边和每个顶点都属于且只属于一个边双连通分支。\nclass Tarjan {\n\n    private int V;\n    private List[] G;\n    private Deque stack;\n    // dfn[u]：深度优先搜索遍历时结点u被搜索的次序\n    // low[u]：以u为根的子树中的结点的dfn的最小值\n    private int[] dfn;\n    private int[] low;\n    private int dfsCnt;\n\n    public Tarjan(List[] G, int V) {\n        this.G = G;\n        this.V = V;\n        stack = new ArrayDeque<>();\n        dfn = new int[V];\n        low = new int[V];\n        dfsCnt = 0;\n    }\n\n    public List> findBccE() {\n        // 从下标索引1开始\n        for (int i = 1; i \n割点与桥：\n/**\n * 当isPoint[x]为真时，x为割点。\n * 当isBridge[x]为真时，(father[x], x)为桥。\n */\nclass Tarjan {\n\n    private int V;\n    private List[] G;\n    private boolean[] isPoint;\n    private boolean[] isBridge;\n    // dfn[u]：深度优先搜索遍历时结点u被搜索的次序\n    // low[u]：以u为根的子树中的结点的dfn的最小值\n    private int[] dfn;\n    private int[] low;\n    private int[] father;\n    private int dfsCnt;\n    private int pointCnt;\n    private int bridgeCnt;\n\n    public Tarjan(List[] G, int V) {\n        this.G = G;\n        this.V = V;\n        isPoint = new boolean[V];\n        isBridge = new boolean[V];\n        dfn = new int[V];\n        low = new int[V];\n        father = new int[V];\n        dfsCnt = pointCnt = bridgeCnt = 0;\n    }\n\n    public void findVE() {\n        // 从下标索引1开始\n        for (int i = 1; i = 2) {\n                    isPoint[u] = true;\n                    pointCnt++;\n                }\n                if (fa != -1 && low[v] >= dfn[u]) {\n                    isPoint[u] = true;\n                    pointCnt++;\n                }\n                if (low[v] > dfn[u]) {\n                    isBridge[v] = true;\n                    bridgeCnt++;\n                }\n            } else if (fa != v && dfn[v] \n题目\nRoad Construction\n题意：\n给出一个没有重边的无向图，求至少加入几条边使整个图成为一个边双连通分量。\n思想：\n把图中所有的边双连通分量缩成一个点，原图就缩成了一棵树，要加的边数就是(所有度为1的点的个数 + 1) / 2\n割点\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Coer\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class Task {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            List[] G = new ArrayList[n + 1];\n            for (int i = 1; i ();\n            }\n            for (int i = 1; i [] G;\n            private boolean[] isPoint;\n            private boolean[] isBridge;\n            private int[] dfn;\n            private int[] low;\n            private int[] father;\n            private int dfsCnt;\n            private int pointCnt;\n            private int bridgeCnt;\n\n            public Tarjan(List[] G, int V) {\n                this.G = G;\n                this.V = V;\n                isPoint = new boolean[V];\n                isBridge = new boolean[V];\n                dfn = new int[V];\n                low = new int[V];\n                father = new int[V];\n                dfsCnt = pointCnt = bridgeCnt = 0;\n            }\n\n            public void findVE() {\n                // 从下标索引1开始\n                for (int i = 1; i = 2) {\n                            isPoint[u] = true;\n                            pointCnt++;\n                        }\n                        if (fa != -1 && low[v] >= dfn[u]) {\n                            isPoint[u] = true;\n                            pointCnt++;\n                        }\n                        if (low[v] > dfn[u]) {\n                            isBridge[v] = true;\n                            bridgeCnt++;\n                        }\n                    } else if (fa != v && dfn[v] \n参考\n双连通分量\n视频\n"},"02-algorithm/02-advanced/02-graph/02-topological/topological.html":{"url":"02-algorithm/02-advanced/02-graph/02-topological/topological.html","title":"拓扑排序","keywords":"","body":"拓扑排序\n\n 在一个有向无环图中，我们将图中的顶点以线性方式进行排序，使得对于任何的顶点$u$到$v$的有向边 , 都可以有$u$在$v$的前面。\n\n模板\n// bfs\nclass TopologySort{\n\n    private ArrayList[] G;\n    // 入度数组\n    private int[] deg;\n    // 顶点数、边数\n    private int n, m;\n\n    public void topoSort() {\n        Queue queue = new LinkedList<>();\n        for (int i = 1; i [] G;\n    // 0:未访问 1:已访问 2:访问中\n    private int[] vis;\n    // 顶点数、边数\n    private int n, m;\n\n    public boolean dfs(int u) {\n        vis[u] = 2;\n        for (int v : G[u]) {\n            if (vis[v] == 2 || (vis[v] == 0 && !dfs(v))) {\n                return false;\n            }\n        }\n        vis[u] = 1;\n        return true;\n    }\n\n}\n\n题目\n207. course-schedule\n\nDescription:\nThere are a total of n courses you have to take, labeled from 0 to n-1.\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\nExample 1:\nInput: 2, [[1,0]] \nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\nExample 2:\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should\n             also have finished course 1. So it is impossible.\nNote:\n\nThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\nYou may assume that there are no duplicate edges in the input prerequisites.\n\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=207 lang=java\n *\n * [207] Course Schedule\n */\n\n// @lc code=start\nclass Solution {\n    public boolean canFinish(int n, int[][] p) {\n        List[] g = new ArrayList[n];\n        int[] deg = new int[n];\n        for (int i = 0; i ();\n        }\n        for (int[] t : p) {\n            g[t[1]].add(t[0]);\n            deg[t[0]]++;\n        }\n        Queue queue = new LinkedList<>();\n        for (int i = 0; i \n210. course-schedule-ii\n\nDescription:\nThere are a total of n courses you have to take, labeled from 0 to n-1.\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\nGiven the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\nThere may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\nExample 1:\nInput: 2, [[1,0]] \nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished   \n             course 0. So the correct course order is [0,1] .\nExample 2:\nInput: 4, [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,1,2,3] or [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both     \n             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. \n             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .\nNote:\n\nThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\nYou may assume that there are no duplicate edges in the input prerequisites.\n\nDiscussion | Solution\nCode:\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\n/*\n * @lc app=leetcode id=210 lang=java\n *\n * [210] Course Schedule II\n */\n\n// @lc code=start\nclass Solution {\n    public int[] findOrder(int n, int[][] p) {\n        List[] g = new ArrayList[n];\n        int[] deg = new int[n];\n        for (int i = 0; i ();\n        }\n        for (int[] t : p) {\n            g[t[1]].add(t[0]);\n            deg[t[0]]++;\n        }\n        Queue queue = new LinkedList<>();\n        for (int i = 0; i = n) {\n                return new int[0];\n            }\n            res[cnt] = cur;\n            for (int next : g[cur]) {\n                if (--deg[next] == 0) {\n                    queue.offer(next);\n                }\n            }\n        }\n        if (cnt != n - 1) {\n            return new int[0];\n        }\n        return res;\n    }\n}\n// @lc code=end\n\n"},"02-algorithm/02-advanced/03-string/01-kmp/kmp.html":{"url":"02-algorithm/02-advanced/03-string/01-kmp/kmp.html","title":"KMP","keywords":"","body":"KMP\n\nKMP算法用于解决模式串匹配问题。\n\n模板\n// next[j]表示字符串前j+1位最长公共前后缀长度\nprivate int[] getNext(String p) {\n    int m = p.length();\n    int[] next = new int[m];\n    next[0] = 0;\n    int i, j;\n    for (j = 1, i = 0; j  0 && p.charAt(j) != p.charAt(i)) {\n            i = next[i - 1];\n        }\n        if (p.charAt(j) == p.charAt(i)) {\n            i++;\n        }\n        next[j] = i;\n    }\n}\n\n// 返回匹配串出现次数\npublic int kmp(String s, String p) {\n    int ans = 0;\n    int n = s.length();\n    int m = p.length();\n    int[] next = getNext(p);\n    for (int i = 0, j = 0; i  0 && p.charAt(j) != s.charAt(i)) {\n            j = next[j - 1];\n        }\n        if (p.charAt(j) == s.charAt(i)) {\n            j++;\n        }\n        if (j == m) {\n            ans++;\n            // 此处j=0处理不可重叠情形，可重叠直接注释掉即可\n            j = 0;\n        }\n    }\n    return ans;\n}\n\n题目\n参考\n原理\nKMP\n"},"02-algorithm/02-advanced/03-string/02-manacher/manacher.html":{"url":"02-algorithm/02-advanced/03-string/02-manacher/manacher.html","title":"Manacher","keywords":"","body":"马拉车\n\n以O(n)时间复杂度解决回文子串问题\n\n模板\npublic String manacher(String s) {\n    int n = s.length();\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"$\");\n    sb.append(\"#\");\n    for (int i = 0; i  i ? Math.min(p[2 * id - i], mx - i) : 1;\n        while (i + p[i] = 0) {\n            if (sb.charAt(i + p[i]) == sb.charAt(i - p[i])) {\n                p[i]++;\n            } else {\n                break;\n            }\n        }\n        if (mx \n题目\n5. longest-palindromic-substring\n\nDescription:\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nExample 1:\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\nInput: \"cbbd\"\nOutput: \"bb\"\nDiscussion | Solution\nCode:\n/*\n * @lc app=leetcode id=5 lang=java\n *\n * [5] Longest Palindromic Substring\n */\n\n// @lc code=start\nclass Solution {\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"$\");\n        sb.append(\"#\");\n        for (int i = 0; i  i ? Math.min(p[2 * id - i], mx - i) : 1;\n            while (i + p[i] = 0) {\n                if (sb.charAt(i + p[i]) == sb.charAt(i - p[i])) {\n                    p[i]++;\n                } else {\n                    break;\n                }\n            }\n\n            if (mx \n参考\n原理\n"},"02-algorithm/02-advanced/04-math/01-big-num/big-num.html":{"url":"02-algorithm/02-advanced/04-math/01-big-num/big-num.html","title":"大数","keywords":"","body":"高精度运算\n在 Java 中的高精度运算可以直接调用 API 实现，其中 BigInteger 用于大整数运算， BigDecimal 用于高浮点型数据运算。\n// BigDecimal 类似\n// 构造对象最好使用 String，其它类型可转换为 String 进行构造，保证精度\nBigInteger a = new BigInteger(\"123\");\nBigInteger b = BigInteger.vauleOf(123);\nBigInteger c = new BigInteger(String.valueOf(0));\n\n// 四则运算\nc = a.add(b);\nc = a.subtract(b);\nc = a.divide(b);\nc = a.multiply(b);\n\n// 比较大小\na.compareTo(b);\na.equals(b);\n\n// 常用方法\nc = a.mod(b);\nc = a.gcd(b);\nc = a.max(b);\nc = a.min(b);\nc = a.abs();\nc = a.negate();\nc = a.pow(b);\n\n// 转换\nint d = a.intValue();\n\n尽管已经有了如此方便的操作，下面还是给出具体实现细节，也可作为模板使用。\n模板\n// 大数加法\npublic String add(String str1, String str2) {\n    char[] s1 = str1.toCharArray();\n    char[] s2 = str2.toCharArray();\n    int n1 = s1.length, n2 = s2.length;\n    int maxL = Math.max(n1, n2);\n    int[] a = new int[maxL + 1];\n    int[] b = new int[maxL + 1];\n    for (int i = 0; i = 10) {\n            int tmp = a[i] + b[i];\n            a[i] = tmp % 10;\n            a[i + 1] += tmp / 10;\n        } else {\n            a[i] += b[i];\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    if (a[maxL] != 0) {\n        sb.append((char)(a[maxL] + '0'));\n    }\n    for (int i = maxL - 1; i >= 0; i--) {\n        sb.append((char)(a[i] + '0'));\n    }\n    return sb.toString();\n}\n\n// 大数乘法\npublic String mul(String str1, String str2){\n    char[] s1 = str1.toCharArray();\n    char[] s2 = str2.toCharArray();\n    int n1 = s1.length, n2 = s2.length;\n    int[] a = new int[n1];\n    int[] b = new int[n2];\n    int[] c = new int[n1 + n2];\n    for (int i = 0; i = 10) {\n            c[i + 1] += c[i] / 10;\n            c[i] %= 10;\n        }\n    }\n    int i;\n    for (i = n1 + n2 - 1; i >= 0; i--) {\n        if (c[i] != 0) {\n            break;\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for(; i >= 0; i--) {\n        sb.append((char)(c[i] + '0'));\n    }\n    return sb.toString();\n}\n\n// 大数阶乘\npublic String bigFactorial(int n) {\n    int[] res = new int[100001];\n    int digit = 1;\n    res[0] = 1;\n    for (int i = 2; i = 0; i--) {\n        sb.append((char)(res[i] + '0'));\n    }\n    return sb.toString();\n}\n// 大数计算阶乘位数\nprivate int factorialDigit(int n) {\n    double sum = 0;\n    for (int i = 1; i \n题目\n"},"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html":{"url":"02-algorithm/02-advanced/04-math/02-quick-pow/quick-pow.html","title":"快速幂","keywords":"","body":"快速幂\n乘法快速幂\n// 计算 (a^n) % mod\npublic long powMod(long a, long n, long mod) {\n    long res = 1;\n    while (n > 0) {\n        if ((n & 1) != 0) {\n            res = res * a % mod;\n        }\n        a = a * a % mod;\n        n >>= 1;\n    }\n    return res;\n}\n\n// 计算 (a * b) % mod\npublic long mulMod(long a, long n, long mod) {\n    long res = 0;\n    while (b > 0) {\n        if ((b & 1) != 0) {\n            res = (res + a) % mod;\n        }\n        a = (a >= 1;\n    }\n    return res;\n}\n\n// 计算 (a^n) % mod  配合 mul\npublic long powMod(long a, long n, long mod) {\n    long res = 1;\n    while (n > 0) {\n        if ((n & 1) != 0) {\n            res = mulMod(res, a, mod) % mod;\n        }\n        a = mulMod(a, a, mod) % mod;\n        n >>= 1;\n    }\n    return res;\n}\n\n矩阵快速幂\nclass Matrix {\n    int row;\n    int col;\n    int[][] m;\n\n    public Matrix(int row, int col) {\n        this.row = row;\n        this.col = col;\n        m = new int[row][col];\n    }\n}\n\nstatic final int MOD = 10000;\n\npublic Matrix mul(Matrix a, Matrix b) {\n    Matrix c = new Matrix(a.row, b.col); // 注意这里\n\n    for (int i = 0; i  0) {\n        if ((k & 1) != 0) {\n            res = mul(res, a);\n        }\n        a = mul(a, a);\n        k >>= 1;\n    }\n    return res;\n}\n\n"},"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html":{"url":"02-algorithm/02-advanced/04-math/03-number-theory/number-theory.html","title":"数论","keywords":"","body":"数论\n\n数论是纯粹数学的分支之一，主要研究整数的性质。\n\n最大公约数、最小公倍数\n// 非递归\npublic int gcd(int a, int b) {\n    int r;\n    while (b != 0) {\n        r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}\n\npublic int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\npublic int lcm(int a, int b) {\n    return a / gcd(a, b) * b;\n}\n\npublic int ngcd(int arr[], int n) {\n    if (n == 1) {\n        return arr[0];\n    }\n    return gcd(arr[n - 1], ngcd(arr, n - 1));\n}\n\npublic int nlcm(int arr[], int n) {\n    if (n == 1) {\n        return arr[0];\n    }\n    return lcm(arr[n - 1], nlcm(arr, n - 1));\n}\n\n素数筛法\n// 经典筛法\npublic List primary(boolean[] isPrime, int n) {\n    List prime = new ArrayList<>();\n    isPrime[0] = isPrime[1] = false;\n    boolean flag;\n    for (int i = 2; i  sieve(boolean[] isPrime, int n) {\n    List prime = new ArrayList<>();\n    Arrays.fill(isPrime, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int i = 2; i  sieve2(boolean[] isPrime, int n) {\n    ArrayList prime = new ArrayList<>();\n    Arrays.fill(isPrime, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int i = 2; i \n"}}}